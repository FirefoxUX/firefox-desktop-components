{"version":3,"file":"moz-input-folder-README-stories-md.9a98f6db.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjbA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrsources":["webpack:///../../../toolkit/content/widgets/moz-input-folder/moz-input-folder.mjs","webpack:///./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack:///./node_modules/@mdx-js/react/index.js","webpack:///./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs","webpack:///./node_modules/react/jsx-runtime.js","webpack:///../../../toolkit/content/widgets/moz-input-folder/README.stories.md","webpack:///../../../toolkit/content/widgets/moz-input-text/moz-input-text.mjs","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import __chrome_styles_loader__mozinputfolderStyles from \"toolkit/content/widgets/moz-input-folder/moz-input-folder.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, classMap, styleMap } from \"../vendor/lit.all.mjs\";\nimport MozInputText from \"chrome://global/content/elements/moz-input-text.mjs\";\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozInputFolder.ftl\");\n\n/**\n * An input folder custom element.\n *\n * @tagname moz-input-folder\n *\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The path to the selected folder\n * @property {boolean} disabled - The disabled state of the component\n * @property {string} iconSrc - The src for an optional icon in the label\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} placeholder - Text to display when the input has no value.\n * @property {string} displayValue - The value of the input control if it's different from the component value.\n * @property {string} dialogTitle - Text to display as a file picker dialog title.\n * @property {object} folder - The file object that represents the selected folder.\n */\n\nexport default class MozInputFolder extends MozInputText {\n  #folder;\n\n  static properties = {\n    displayValue: { type: String },\n    dialogTitle: { type: String, fluent: true },\n    _inputIconSrc: { type: String, state: true },\n  };\n\n  static queries = {\n    chooseFolderButtonEl: \"#choose-folder-button\",\n  };\n\n  constructor() {\n    super();\n    this.readonly = true;\n    this.displayValue = \"\";\n    this.dialogTitle = \"\";\n    this._inputIconSrc = \"\";\n    this.#folder = null;\n  }\n\n  willUpdate(changedProperties) {\n    super.willUpdate(changedProperties);\n\n    if (changedProperties.has(\"readonly\")) {\n      this.readonly = true;\n    }\n    if (changedProperties.has(\"value\")) {\n      if (this.value == \"\") {\n        this.#folder = null;\n        this._inputIconSrc = \"\";\n      } else if (!this.#folder || this.value != this.#folder.path) {\n        let currentValue = this.value;\n        this.getFolderFromPath(this.value).then(folder => {\n          if (this.value === currentValue) {\n            this.#folder = folder;\n            this._inputIconSrc = this.getInputIconSrc(this.#folder);\n          }\n        });\n      } else {\n        this._inputIconSrc = this.getInputIconSrc(this.#folder);\n      }\n    }\n  }\n\n  get folder() {\n    return this.#folder;\n  }\n\n  hasServices() {\n    // Safely check for Services without throwing a ReferenceError.\n    return typeof Services !== \"undefined\";\n  }\n\n  async getFolderFromPath(path) {\n    let folder = null;\n    try {\n      folder = await IOUtils.getDirectory(path);\n    } catch (e) {\n      //Not a valid path\n      console.error(\n        \"The error occurred while attempting to get directory from the moz-input-folder value\"\n      );\n    }\n\n    return folder;\n  }\n\n  getInputIconSrc(folder) {\n    if (!folder || !this.hasServices()) {\n      let defaultIconSrc = \"chrome://global/skin/icons/folder.svg\";\n      return defaultIconSrc;\n    }\n\n    let fph = Services.io\n      .getProtocolHandler(\"file\")\n      .QueryInterface(Ci.nsIFileProtocolHandler);\n    let iconUrlSpec = fph.getURLSpecFromDir(folder);\n    let inputIconSrc = \"moz-icon://\" + iconUrlSpec + \"?size=16\";\n    return inputIconSrc;\n  }\n\n  async openFolderPicker() {\n    let folderPicker = Cc[\"@mozilla.org/filepicker;1\"].createInstance(\n      Ci.nsIFilePicker\n    );\n    let mode = Ci.nsIFilePicker.modeGetFolder;\n    folderPicker.init(window.browsingContext, this.dialogTitle, mode);\n    folderPicker.appendFilters(Ci.nsIFilePicker.filterAll);\n\n    if (this.#folder && (await IOUtils.exists(this.#folder.path))) {\n      folderPicker.displayDirectory = this.#folder;\n    }\n\n    let result = await new Promise(resolve => folderPicker.open(resolve));\n    if (\n      result != Ci.nsIFilePicker.returnOK ||\n      this.value == folderPicker.file.path\n    ) {\n      if (Cu.isInAutomation) {\n        // Dispatch a test-only event so we can tell that the dialog is closing.\n        this.dispatchEvent(new CustomEvent(\"moz-input-folder-picker-close\"));\n      }\n\n      return;\n    }\n\n    this.#folder = folderPicker.file;\n    this.value = this.#folder.path;\n\n    this.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    this.dispatchEvent(new Event(\"change\", { bubbles: true }));\n  }\n\n  inputStylesTemplate() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__mozinputfolderStyles}\"\n    />`;\n  }\n\n  inputTemplate() {\n    let inputValue = this.displayValue || this.value;\n    let classes, styles;\n    if (this._inputIconSrc) {\n      classes = classMap({\n        \"with-icon\": true,\n      });\n      styles = styleMap({\n        \"--input-background-icon\": `url(${this._inputIconSrc})`,\n      });\n    }\n\n    return html`\n      <div class=\"container\">\n        ${super.inputTemplate({ classes, styles, inputValue })}\n        <moz-button\n          id=\"choose-folder-button\"\n          data-l10n-id=\"choose-folder-button\"\n          data-l10n-attrs=\"accesskey\"\n          ?disabled=${this.disabled || this.parentDisabled}\n          @click=${this.openFolderPicker}\n        ></moz-button>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"moz-input-folder\", MozInputFolder);\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","export {\n  MDXContext,\n  MDXProvider,\n  useMDXComponents,\n  withMDXComponents\n} from './lib/index.js'\n","export * from '@mdx-js/react';\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/firefox-desktop-components/firefox-desktop-components/gecko/browser/components/storybook/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Canvas, ArgTypes } from \"@storybook/addon-docs\";\nimport \"toolkit-widgets/moz-input-folder/moz-input-folder.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"UI Widgets/ Input Folder/README\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        },\n        viewMode: \"docs\"\n      }\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n      id: \"mozinputfolder\",\n      children: \"MozInputFolder\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" is a reusable component that provides the ability to browse and pick a folder from the file system. It displays the path and icon of the selected folder to the user. It can also be configured to display custom text if needed.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Save files to\\\" placeholder=\\\"Select folder\\\" /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: \"500px\"\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Save files to\",\n            placeholder: \"Select folder\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"usage-guidelines\",\n      children: \"Usage guidelines\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"when-to-use\",\n      children: \"When to use\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"Use \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"moz-input-folder\"\n        }), \" when you want to allow a user to select a directory.\"]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"when-not-to-use\",\n      children: \"When not to use\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"When users need to select individual files rather than folders.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"code\",\n      children: \"Code\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The source for \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" can be found under \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/content/widgets/moz-input-folder\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"toolkit/content/widgets/moz-input-folder/\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"how-to-use-moz-input-folder\",\n      children: [\"How to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"importing-the-element\",\n      children: \"Importing the element\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Like other custom elements, you should usually be able to rely on \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" getting lazy loaded at the time of first use.\\nSee \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://firefox-source-docs.mozilla.org/browser/components/storybook/docs/README.reusable-widgets.stories.html#using-new-design-system-components\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"this documentation\"\n      }), \" for more information on using design system custom elements.\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-label\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"label\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Providing a label for the moz-input-folder component is crucial for usability and accessibility:\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Helps users understand the purpose of the folder picker.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Improves accessibility by ensuring screen readers can announce the function of the input.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"To set a label, use the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"label\"\n      }), \" attribute. In general, the label should be controlled by Fluent.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Label text\\\"></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Label text\\\" /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '500px'\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Label text\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-description\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"description\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"In order to set a description, use the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"description\"\n      }), \" attribute.\\nIn general, the description should be controlled by Fluent. This is the the preferred way of setting  descriptions since it ensures consistency across instances of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Label\\\" description=\\\"Description text\\\"></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Label\\\" description=\\\"Description text\\\" /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '500px'\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Label\",\n            description: \"Description text\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"However, \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" does support a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"slot\"\n      }), \" element if your use case is more complex.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Label\\\">\\n  <span slot=\\\"description\\\">A more complex description</span>\\n</moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Label\\\"><span slot=\\\"description\\\">{\\\"A more \\\"}<b>{\\\"complex\\\"}</b>{\\\" description\\\"}</span></moz-input-folder></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: \"500px\"\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Label\",\n            children: /*#__PURE__*/_jsxs(\"span\", {\n              slot: \"description\",\n              children: [\"A more \", /*#__PURE__*/_jsx(\"b\", {\n                children: \"complex\"\n              }), \" description\"]\n            })\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-value\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"value\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"value\"\n      }), \" attribute of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" sets the initial folder path displayed in the input field. When a new folder is selected, the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"value\"\n      }), \" gets updated with that folder's path.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Save files to:\\\" value=\\\"/User/Downloads\\\"></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Save files to:\\\" value=\\\"/User/Downloads\\\" /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '500px'\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Save files to:\",\n            value: \"/User/Downloads\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-displayvalue\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"displayValue\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"displayValue\"\n      }), \" property to display something other than a folder path in the input element. Listen to the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"change\"\n      }), \" event to set a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"displayValue\"\n      }), \" after the new folder was selected. The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"folder\"\n      }), \" property represents the selected folder in the file system (\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"nsIFile\"\n      }), \" object). You can use properties of the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"folder\"\n      }), \" when setting a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"displayValue\"\n      }), \" (e.g., \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"folder.path\"\n      }), \", \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"folder.displayName\"\n      }), \" or \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"folder.leafName\"\n      }), \").\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Save files to:\\\" value=\\\"/User/Downloads\\\" displayvalue=\\\"Downloads\\\"></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Code example\\nlet mozInputFolder = document.querySelector(\\\"moz-input-folder\\\");\\nmozInputFolder.addEventListener(\\n  \\\"change\\\",\\n  () => {\\n    mozInputFolder.displayValue = mozInputFolder.folder.displayName;\\n  }\\n);\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Save files to:\\\" value=\\\"/User/Downloads\\\" displayvalue=\\\"Downloads\\\" /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '500px'\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Save files to:\",\n            value: \"/User/Downloads\",\n            displayvalue: \"Downloads\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-disabled-state\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"In order to disable the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \", add \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled=\\\"\\\"\"\n      }), \" or \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" to the markup with no value.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Label\\\" disabled></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Label\\\" disabled /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '500px'\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Label\",\n            disabled: true\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-accesskey\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"accesskey\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"accesskey\"\n      }), \" defines an keyboard shortcut for the input.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder label=\\\"Label with accesskey\\\" accesskey=\\\"L\\\"></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><div style={{ width: \\\"500px\\\" }} onClickCapture={e => e.stopPropagation()}><moz-input-folder label=\\\"Label with accesskey\\\" accesskey=\\\"L\\\" /></div></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '500px'\n          },\n          onClickCapture: e => e.stopPropagation(),\n          children: /*#__PURE__*/_jsx(\"moz-input-folder\", {\n            label: \"Label with accesskey\",\n            accesskey: \"L\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"fluent-usage\",\n      children: \"Fluent usage\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"label\"\n      }), \", \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"description\"\n      }), \", \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"placeholder\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"accesskey\"\n      }), \" attributes of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" will generally be provided via \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://mozilla-l10n.github.io/localizer-documentation/tools/fluent/basic_syntax.html#attributes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Fluent attributes\"\n      }), \".\\nThe relevant \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-attrs\"\n      }), \" are set automatically, so to get things working you just need to supply a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-id\"\n      }), \" as you would with any other element.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"For example, the following Fluent messages:\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder-label =\\n  .label = Save files to\\nmoz-input-folder-placeholder =\\n  .label = Save files to\\n  .placeholder = Select folder\\nmoz-input-folder-description =\\n  .label = Save files to\\n  .description = Description text\\n  .placeholder = Select folder\\nmoz-input-folder-with-accesskey =\\n  .label = Save files to\\n  .accesskey = v\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"would be used to set text and attributes on the different \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-input-folder\"\n      }), \" elements as follows:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-input-folder data-l10n-id=\\\"moz-input-folder-label\\\"></moz-input-folder>\\n<moz-input-folder data-l10n-id=\\\"moz-input-folder-placeholder\\\"></moz-input-folder>\\n<moz-input-folder data-l10n-id=\\\"moz-input-folder-description\\\"></moz-input-folder>\\n<moz-input-folder data-l10n-id=\\\"moz-input-folder-with-accesskey\\\"></moz-input-folder>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"args-table\",\n      children: \"Args Table\"\n    }), \"\\n\", /*#__PURE__*/_jsx(ArgTypes, {\n      of: \"moz-input-folder\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'UI Widgets/ Input Folder/README',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    },\n    viewMode: \"docs\"\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","import __chrome_styles_loader__mozinputtextStyles from \"toolkit/content/widgets/moz-input-text/moz-input-text.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n/**\n * A text input custom element.\n *\n * @tagname moz-input-text\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the input control\n * @property {boolean} disabled - The disabled state of the input control\n * @property {boolean} readonly - The readonly state of the input control\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} placeholder - Text to display when the input has no value.\n */\nexport default class MozInputText extends MozBaseInputElement {\n  static properties = {\n    placeholder: { type: String, fluent: true },\n    readonly: { type: Boolean, reflect: true },\n  };\n  static inputLayout = \"block\";\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.readonly = false;\n  }\n\n  inputStylesTemplate() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__mozinputtextStyles}\"\n    />`;\n  }\n\n  handleInput(e) {\n    this.value = e.target.value;\n  }\n\n  inputTemplate(options = {}) {\n    let { type = \"text\", classes, styles, inputValue } = options;\n\n    return html`\n      <input\n        id=\"input\"\n        type=${type}\n        class=${ifDefined(classes)}\n        style=${ifDefined(styles)}\n        name=${this.name}\n        .value=${inputValue || this.value}\n        ?disabled=${this.disabled || this.parentDisabled}\n        ?readonly=${this.readonly}\n        accesskey=${ifDefined(this.accessKey)}\n        placeholder=${ifDefined(this.placeholder)}\n        aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n        aria-describedby=\"description\"\n        @input=${this.handleInput}\n        @change=${this.redispatchEvent}\n      />\n    `;\n  }\n}\ncustomElements.define(\"moz-input-text\", MozInputText);\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":[],"sourceRoot":""}