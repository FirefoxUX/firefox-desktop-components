{"version":3,"file":"moz-box-group-moz-box-group-stories.62c5aeaa.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-box-group/moz-box-group.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-box-group/moz-box-group.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { GROUP_TYPES } from \"./moz-box-group.mjs\";\n\nexport default {\n  title: \"UI Widgets/Box Group\",\n  component: \"moz-box-group\",\n  argTypes: {\n    type: {\n      options: Object.keys(GROUP_TYPES),\n      mapping: GROUP_TYPES,\n      control: \"select\",\n    },\n  },\n  parameters: {\n    status: \"in-development\",\n    fluent: `\nmoz-box-item =\n  .label = I'm a box item\n  .description = I'm part of a group\nmoz-box-button-1 =\n  .label = I'm a box button in a group\nmoz-box-button-2 =\n  .label = I'm another box button in a group\nmoz-box-link =\n  .label = I'm a box link in a group\nmoz-box-delete-action =\n  .title = Delete I'm a box item\nmoz-box-edit-action =\n  .title = Edit I'm a box item\nmoz-box-toggle-action =\n  .aria-label = Toggle I'm a box item\nmoz-box-more-action =\n  .title = More options, I'm a box item\nmoz-box-item-reorderable-1 =\n  .label = I'm box item number 1\nmoz-box-item-reorderable-2 =\n  .label = I'm box item number 2\nmoz-box-item-reorderable-3 =\n  .label = I'm box item number 3\nmoz-box-item-reorderable-4 =\n  .label = I'm box item number 4\nmoz-box-item-reorderable-5 =\n  .label = I'm box item number 5\nmoz-box-item-header =\n  .label = I'm a header box item\nmoz-box-button-footer =\n  .label = I'm a footer box button\n    `,\n  },\n};\n\nfunction getInnerElements(type) {\n  if (type == GROUP_TYPES.reorderable) {\n    return reorderableElements();\n  }\n  return basicElements();\n}\n\nfunction reorderableElements() {\n  return Array.from({ length: 5 }).map((_, i) => {\n    return html`<moz-box-item\n      data-l10n-id=${`moz-box-item-reorderable-${i + 1}`}\n    >\n      <moz-button\n        iconsrc=\"chrome://global/skin/icons/edit-outline.svg\"\n        data-l10n-id=\"moz-box-edit-action\"\n        slot=\"actions-start\"\n      ></moz-button>\n      <moz-toggle\n        slot=\"actions\"\n        pressed\n        data-l10n-id=\"moz-box-toggle-action\"\n      ></moz-toggle>\n    </moz-box-item>`;\n  });\n}\n\nfunction basicElements() {\n  return html`<moz-box-item data-l10n-id=\"moz-box-item\">\n      <moz-button\n        iconsrc=\"chrome://global/skin/icons/edit-outline.svg\"\n        data-l10n-id=\"moz-box-edit-action\"\n        type=\"ghost\"\n        slot=\"actions\"\n      ></moz-button>\n      <moz-toggle\n        slot=\"actions\"\n        pressed\n        data-l10n-id=\"moz-box-toggle-action\"\n      ></moz-toggle>\n      <moz-button\n        iconsrc=\"chrome://global/skin/icons/more.svg\"\n        data-l10n-id=\"moz-box-more-action\"\n        slot=\"actions-start\"\n      ></moz-button>\n    </moz-box-item>\n    <moz-box-link data-l10n-id=\"moz-box-link\"></moz-box-link>\n    <moz-box-button data-l10n-id=\"moz-box-button-1\"></moz-box-button>\n    <moz-box-item data-l10n-id=\"moz-box-item\">\n      <moz-button\n        iconsrc=\"chrome://global/skin/icons/edit-outline.svg\"\n        data-l10n-id=\"moz-box-edit-action\"\n        type=\"ghost\"\n        slot=\"actions-start\"\n      ></moz-button>\n      <moz-button\n        iconsrc=\"chrome://global/skin/icons/more.svg\"\n        data-l10n-id=\"moz-box-more-action\"\n        slot=\"actions-start\"\n      ></moz-button>\n    </moz-box-item>\n    <moz-box-button data-l10n-id=\"moz-box-button-2\"></moz-box-button>`;\n}\n\nconst Template = ({ type, hasHeader, hasFooter }) => html`\n  <style>\n    .delete {\n      margin-top: var(--space-medium);\n    }\n  </style>\n  <moz-box-group type=${ifDefined(type)}>\n    ${hasHeader\n      ? html`<moz-box-item\n          slot=\"header\"\n          data-l10n-id=\"moz-box-item-header\"\n        ></moz-box-item>`\n      : \"\"}\n    ${getInnerElements(type)}\n    ${hasFooter\n      ? html`<moz-box-button\n          slot=\"footer\"\n          data-l10n-id=\"moz-box-button-footer\"\n        ></moz-box-button>`\n      : \"\"}\n  </moz-box-group>\n  ${type == \"list\"\n    ? html`<moz-button class=\"delete\" @click=${appendItem}>\n        Add an item\n      </moz-button>`\n    : \"\"}\n`;\n\nconst appendItem = event => {\n  let group = event.target.getRootNode().querySelector(\"moz-box-group\");\n\n  let boxItem = document.createElement(\"moz-box-item\");\n  boxItem.label = \"New box item\";\n  boxItem.description = \"New items are added to the list\";\n\n  let actionButton = document.createElement(\"moz-button\");\n  actionButton.addEventListener(\"click\", () => boxItem.remove());\n  actionButton.iconSrc = \"chrome://global/skin/icons/delete.svg\";\n  actionButton.slot = \"actions\";\n  actionButton.setAttribute(\"data-l10n-id\", \"moz-box-delete-action\");\n  boxItem.append(actionButton);\n\n  group.prepend(boxItem);\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  type: \"default\",\n  hasHeader: false,\n  hasFooter: false,\n};\n\nexport const List = Template.bind({});\nList.args = {\n  ...Default.args,\n  type: \"list\",\n};\n\nexport const Reorderable = Template.bind({});\nReorderable.args = {\n  ...Default.args,\n  type: \"reorderable\",\n};\n\nexport const ListWithHeaderAndFooter = Template.bind({});\nListWithHeaderAndFooter.args = {\n  ...List.args,\n  hasHeader: true,\n  hasFooter: true,\n};\n","import __chrome_styles_loader__mozboxgroupStyles from \"toolkit/content/widgets/moz-box-group/moz-box-group.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, staticHtml, literal } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\nexport const GROUP_TYPES = {\n  list: \"list\",\n  reorderable: \"reorderable-list\",\n};\n\n/**\n * An element used to group combinations of moz-box-item, moz-box-link, and\n * moz-box-button elements and provide the expected styles.\n *\n * @tagname moz-box-group\n * @property {string} type\n *   The type of the group, either \"list\", \"reorderable-list\", or undefined.\n *   Note that \"reorderable-list\" only works with moz-box-item elements for now.\n * @slot default - Slot for rendering various moz-box-* elements.\n * @slot <index> - Slots used to assign moz-box-* elements to <li> elements when\n *   the group is type=\"list\".\n */\nexport default class MozBoxGroup extends MozLitElement {\n  #tabbable = true;\n\n  static properties = {\n    type: { type: String },\n    listItems: { type: Array, state: true },\n  };\n\n  static queries = {\n    reorderableList: \"moz-reorderable-list\",\n  };\n\n  constructor() {\n    super();\n    this.listItems = [];\n  }\n\n  contentTemplate() {\n    if (this.type == GROUP_TYPES.reorderable) {\n      return html`<moz-reorderable-list\n        itemselector=\"moz-box-item\"\n        dragselector=\".handle\"\n        @reorder=${this.handleReorder}\n      >\n        ${this.slotTemplate()}\n      </moz-reorderable-list>`;\n    }\n    return this.slotTemplate();\n  }\n\n  slotTemplate() {\n    if (this.type == GROUP_TYPES.list || this.type == GROUP_TYPES.reorderable) {\n      let listTag =\n        this.type == GROUP_TYPES.reorderable ? literal`ol` : literal`ul`;\n      return staticHtml`<${listTag}\n          class=\"list\"\n          aria-orientation=\"vertical\"\n          @keydown=${this.handleKeydown}\n          @focusin=${this.handleFocus}\n          @focusout=${this.handleBlur}\n        >\n          ${this.listItems.map((_, i) => {\n            return html`<li>\n              <slot name=${i}></slot>\n            </li> `;\n          })}\n        </${listTag}>\n        <slot hidden @slotchange=${this.updateItems}></slot>`;\n    }\n    return html`<slot></slot>`;\n  }\n\n  handleReorder(event) {\n    let { draggedElement, targetElement, position } = event.detail;\n    let parent = targetElement.parentNode;\n    let moveBefore = position === -1;\n\n    if (moveBefore) {\n      parent.insertBefore(draggedElement, targetElement);\n    } else {\n      parent.insertBefore(draggedElement, targetElement.nextElementSibling);\n    }\n\n    draggedElement.focus();\n    this.updateItems();\n  }\n\n  handleKeydown(event) {\n    if (\n      this.type == GROUP_TYPES.reorderable &&\n      event.originalTarget == event.target.handleEl\n    ) {\n      let detail = this.reorderableList.evaluateKeyDownEvent(event);\n      if (detail) {\n        event.stopPropagation();\n        this.handleReorder({ detail });\n        return;\n      }\n    }\n\n    let positionAttr =\n      event.target.getAttribute(\"position\") ??\n      // handles the case where an interactive element is nested in a moz-box-item\n      event.target.closest(\"moz-box-item\").getAttribute(\"position\");\n    let currentPosition = parseInt(positionAttr);\n\n    switch (event.key) {\n      case \"Down\":\n      case \"ArrowDown\": {\n        let nextItem = this.listItems[currentPosition + 1];\n        nextItem?.focus(event);\n        break;\n      }\n      case \"Up\":\n      case \"ArrowUp\": {\n        let prevItem = this.listItems[currentPosition - 1];\n        prevItem?.focus(event);\n        break;\n      }\n    }\n  }\n\n  handleFocus() {\n    if (this.#tabbable) {\n      this.#tabbable = false;\n      this.listItems.forEach(item => {\n        item.setAttribute(\"tabindex\", \"-1\");\n      });\n    }\n  }\n\n  handleBlur() {\n    if (!this.#tabbable) {\n      this.#tabbable = true;\n      this.listItems.forEach(item => {\n        item.removeAttribute(\"tabindex\");\n      });\n    }\n  }\n\n  updateItems() {\n    let boxElements = this.querySelectorAll(\n      \":is(moz-box-item, moz-box-button, moz-box-link):not([slot='header'], [slot='footer'])\"\n    );\n    this.listItems = Array.from(boxElements);\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozboxgroupStyles}\"\n      />\n      <slot name=\"header\"></slot>\n      ${this.contentTemplate()}\n      <slot name=\"footer\"></slot>\n    `;\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has(\"listItems\") && this.listItems.length) {\n      this.listItems.forEach((item, i) => {\n        item.slot = i;\n        item.setAttribute(\"position\", i);\n      });\n    }\n  }\n}\ncustomElements.define(\"moz-box-group\", MozBoxGroup);\n"],"names":[],"sourceRoot":""}