{"version":3,"file":"fxview-tab-list-stories.2f5c23e2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/PA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA2BA;AAqBA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3NA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/TA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;;AAEA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-button/moz-button.mjs","webpack:///./stories/fxview-tab-list.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///../firefoxview/search-helpers.mjs","webpack:///../firefoxview/fxview-tab-list.mjs"],"sourcesContent":["import __chrome_styles_loader__mozbuttonStyles from \"toolkit/content/widgets/moz-button/moz-button.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * Controls moz-button behavior when menuId property is set.\n * Helps to integrate moz-button with panel-list.\n */\nclass MenuController {\n  /** @type {HTMLElement} */\n  host;\n\n  /** @type {string} */\n  #menuId;\n\n  /** @type {HTMLElement | null} */\n  #menuEl;\n\n  constructor(host) {\n    this.host = host;\n    host.addController(this);\n  }\n\n  hostDisconnected() {\n    this.host.removeEventListener(\"click\", this.openPanelList);\n    this.host.removeEventListener(\"mousedown\", this.openPanelList);\n  }\n\n  hostUpdated() {\n    if (this.#menuId === this.host.menuId) {\n      return;\n    }\n    if (this.#menuEl?.localName == \"panel-list\") {\n      this.panelListCleanUp();\n    }\n\n    this.#menuId = this.host.menuId;\n\n    // Check to see if a menuId has been added to host, or changed\n    if (this.#menuId) {\n      this.#menuEl = this.host.getRootNode().querySelector(`#${this.#menuId}`);\n\n      if (this.#menuEl?.localName == \"panel-list\") {\n        this.panelListSetUp();\n      }\n    }\n\n    // Check to see if menuId has been removed from host\n    if (!this.#menuId) {\n      this.#menuEl = null;\n      this.host.removeController(this);\n    }\n  }\n\n  /**\n   * Handles opening/closing the panel-list when the host is clicked or activated via keyboard.\n   * @param {MouseEvent|KeyboardEvent} event\n   */\n  openPanelList = event => {\n    if (\n      (event.type == \"mousedown\" && event.button == 0) ||\n      event.inputSource == MouseEvent.MOZ_SOURCE_KEYBOARD ||\n      !event.detail\n    ) {\n      this.#menuEl?.toggle(event, this.host);\n    }\n  };\n\n  /**\n   * Sets up the host for integration with panel-list,\n   * adding necessary event listeners and ARIA attributes.\n   */\n  panelListSetUp() {\n    this.host.addEventListener(\"click\", this.openPanelList);\n    this.host.addEventListener(\"mousedown\", this.openPanelList);\n    this.host.ariaHasPopup = \"menu\";\n    this.host.ariaExpanded = this.#menuEl?.open ? \"true\" : \"false\";\n  }\n\n  /**\n   * Cleans up panel-list integration,\n   * removing event listeners and clearing ARIA attributes.\n   */\n  panelListCleanUp() {\n    this.host.removeEventListener(\"click\", this.openPanelList);\n    this.host.removeEventListener(\"mousedown\", this.openPanelList);\n    this.host.ariaHasPopup = null;\n    this.host.ariaExpanded = null;\n  }\n}\n\n/**\n * A button with multiple types and two sizes.\n *\n * @tagname moz-button\n * @property {string} label - The button's label, will be overridden by slotted content.\n * @property {string} type - The button type.\n *   Options: default, primary, destructive, icon, icon ghost, ghost.\n * @property {string} size - The button size.\n *   Options: default, small.\n * @property {boolean} disabled - The disabled state.\n * @property {string} title - The button's title attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} titleAttribute - Internal, map title attribute to the title JS property.\n * @property {string} tooltipText - Set the title property, the title attribute will be used first.\n * @property {string} ariaLabel - The button's aria-label attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} ariaHasPopup - The button's aria-haspopup attribute, that indicates that a popup element can be triggered by the button.\n * @property {string} ariaExpanded - The button's aria-expanded attribute, that indicates whether or not the controlled elements are displayed or hidden.\n * @property {string} iconSrc - Path to the icon that should be displayed in the button.\n * @property {string} ariaLabelAttribute - Internal, map aria-label attribute to the ariaLabel JS property.\n * @property {string} ariaHasPopupAttribute - Internal, map aria-haspopup attribute to the ariaHasPopup JS property.\n * @property {string} ariaExpandedAttribute - Internal, map aria-expanded attribute to the ariaExpanded JS property.\n * @property {string} hasVisibleLabel - Internal, tracks whether or not the button has a visible label.\n * @property {boolean} attention - Show a dot notification on the button if true.\n * @property {boolean} parentDisabled - When the parent of this component is disabled.\n * @property {string} iconPosition - The icon's position relative to the button label.\n *   Options: start, end.\n * @property {string} menuId - A CSS selector string that identifies the associated menu element controlled by the button.\n * @property {HTMLButtonElement} buttonEl - The internal button element in the shadow DOM.\n * @property {HTMLButtonElement} slotEl - The internal slot element in the shadow DOM.\n * @cssproperty [--button-outer-padding-inline] - Used to set the outer inline padding of toolbar style buttons\n * @csspropert [--button-outer-padding-block] - Used to set the outer block padding of toolbar style buttons.\n * @cssproperty [--button-outer-padding-inline-start] - Used to set the outer inline-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-inline-end] - Used to set the outer inline-end padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-start] - Used to set the outer block-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-end] - Used to set the outer block-end padding of toolbar style buttons\n * @slot default - The button's content, overrides label property.\n * @fires click - The click event.\n */\nexport default class MozButton extends MozLitElement {\n  static shadowRootOptions = {\n    ...MozLitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  static properties = {\n    label: { type: String, reflect: true, fluent: true },\n    type: { type: String, reflect: true },\n    size: { type: String, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    title: { type: String, mapped: true },\n    tooltipText: { type: String, fluent: true },\n    ariaLabel: { type: String, mapped: true },\n    ariaHasPopup: { type: String, mapped: true },\n    ariaExpanded: { type: String, mapped: true },\n    iconSrc: { type: String },\n    hasVisibleLabel: { type: Boolean, state: true },\n    accessKey: { type: String, mapped: true },\n    attention: { type: Boolean },\n    iconPosition: { type: String, reflect: true },\n    menuId: { type: String, reflect: true },\n    parentDisabled: { type: Boolean },\n  };\n\n  static queries = {\n    buttonEl: \"button\",\n    slotEl: \"slot\",\n    backgroundEl: \".button-background\",\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.size = \"default\";\n    this.disabled = false;\n    this.hasVisibleLabel = !!this.label;\n    this.attention = false;\n    this.iconPosition = \"start\";\n    this.menuId = \"\";\n    this.parentDisabled = undefined;\n  }\n\n  willUpdate(changedProperties) {\n    super.willUpdate(changedProperties);\n\n    if (changedProperties.has(\"menuId\")) {\n      if (this.menuId && !this._menuController) {\n        this._menuController = new MenuController(this);\n      }\n      if (!this.menuId && this._menuController) {\n        this._menuController = null;\n      }\n    }\n  }\n\n  // Delegate clicks on host to the button element.\n  click() {\n    this.buttonEl.click();\n  }\n\n  checkForLabelText() {\n    this.hasVisibleLabel = this.slotEl\n      ?.assignedNodes()\n      .some(node => node.textContent.trim());\n  }\n\n  labelTemplate() {\n    if (this.label) {\n      return this.label;\n    }\n    return html`<slot @slotchange=${this.checkForLabelText}></slot>`;\n  }\n\n  iconTemplate(position) {\n    if (this.iconSrc && position == this.iconPosition) {\n      return html`<img src=${this.iconSrc} role=\"presentation\" />`;\n    }\n    return null;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttonStyles}\"\n      />\n      <button\n        ?disabled=${this.disabled || this.parentDisabled}\n        title=${ifDefined(this.title || this.tooltipText)}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-expanded=${ifDefined(this.ariaExpanded)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        accesskey=${ifDefined(this.accessKey)}\n      >\n        <span\n          class=${classMap({\n            labelled: this.label || this.hasVisibleLabel,\n            \"button-background\": true,\n            badged:\n              (this.iconSrc || this.type.includes(\"icon\")) && this.attention,\n          })}\n          part=\"button\"\n          type=${this.type}\n          size=${this.size}\n        >\n          ${this.iconTemplate(\"start\")}\n          <label\n            is=\"moz-label\"\n            shownaccesskey=${ifDefined(this.accessKey)}\n            part=\"moz-button-label\"\n          >\n            ${this.labelTemplate()}\n          </label>\n          ${this.iconTemplate(\"end\")}\n        </span>\n      </button>\n    `;\n  }\n}\ncustomElements.define(\"moz-button\", MozButton);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"lit.all.mjs\";\nimport \"browser/components/firefoxview/fxview-tab-list.mjs\";\n\nconst DATE_TIME_FORMATS = {\n  relative: \"relative\",\n  dateTime: \"dateTime\",\n  date: \"date\",\n  time: \"time\",\n};\n\nexport default {\n  title: \"Domain-specific UI Widgets/Firefox View/Tab List\",\n  component: \"fxview-tab-list\",\n  argTypes: {\n    dateTimeFormat: {\n      options: Object.keys(DATE_TIME_FORMATS),\n      mapping: DATE_TIME_FORMATS,\n      control: { type: \"select\" },\n    },\n  },\n};\n\nconst Template = ({\n  listClass,\n  dateTimeFormat,\n  hasPopup,\n  maxTabsLength,\n  primaryAction,\n  secondaryAction,\n  secondaryActionClass,\n  tabItems,\n}) => html`\n  <style>\n    main {\n      max-width: 750px;\n    }\n    fxview-tab-list.menu::part(secondary-button) {\n      background-image: url(\"chrome://global/skin/icons/more.svg\");\n    }\n    fxview-tab-list.dismiss::part(secondary-button) {\n      background-image: url(\"chrome://global/skin/icons/close.svg\");\n    }\n    :host panel-item::part(button) {\n      padding-inline-start: 12px;\n      cursor: pointer;\n    }\n  </style>\n  <main>\n    <fxview-tab-list\n      class=${listClass}\n      .hasPopup=${hasPopup}\n      .dateTimeFormat=${dateTimeFormat}\n      .maxTabsLength=${maxTabsLength}\n      .tabItems=${tabItems}\n      .updatesPaused=${false}\n      .secondaryActionClass=${secondaryActionClass}\n      @fxview-tab-list-secondary-action=${secondaryAction}\n      @fxview-tab-list-primary-action=${primaryAction}\n    >\n      <panel-list slot=\"menu\">\n        <panel-item data-l10n-id=\"fxviewtabrow-delete\"></panel-item>\n        <panel-item\n          data-l10n-id=\"fxviewtabrow-forget-about-this-site\"\n        ></panel-item>\n        <hr />\n        <panel-item data-l10n-id=\"fxviewtabrow-open-in-window\"></panel-item>\n        <panel-item\n          data-l10n-id=\"fxviewtabrow-open-in-private-window\"\n        ></panel-item>\n        <hr />\n        <panel-item data-l10n-id=\"fxviewtabrow-add-bookmark\"></panel-item>\n        <panel-item data-l10n-id=\"fxviewtabrow-save-to-pocket\"></panel-item>\n        <panel-item data-l10n-id=\"fxviewtabrow-copy-link\"></panel-item>\n      </panel-list>\n    </fxview-tab-list>\n  </main>\n`;\n\nconst MAX_TABS_LENGTH = 25;\n\nlet secondaryAction = e => {\n  e.target.querySelector(\"panel-list\").toggle(e.detail.originalEvent);\n};\n\nlet primaryAction = () => {\n  // Open in new tab\n};\n\nconst tabItems = [\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.net\",\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-options-menu-button\",\n    secondaryL10nArgs: JSON.stringify({ tabTitle: \"Example Domain\" }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.org\",\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.org\" }),\n    secondaryL10nId: \"fxviewtabrow-options-menu-button\",\n    secondaryL10nArgs: JSON.stringify({ tabTitle: \"Example Domain\" }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.com\",\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.com\" }),\n    secondaryL10nId: \"fxviewtabrow-options-menu-button\",\n    secondaryL10nArgs: JSON.stringify({ tabTitle: \"Example Domain\" }),\n  },\n];\nconst recentlyClosedItems = [\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.net\",\n    tabid: 1,\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-dismiss-tab-button\",\n    secondaryL10nArgs: JSON.stringify({\n      tabTitle: \"Example Domain\",\n    }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.org\",\n    tabid: 2,\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-dismiss-tab-button\",\n    secondaryL10nArgs: JSON.stringify({\n      tabTitle: \"Example Domain\",\n    }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.com\",\n    tabid: 3,\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-dismiss-tab-button\",\n    secondaryL10nArgs: JSON.stringify({\n      tabTitle: \"Example Domain\",\n    }),\n  },\n];\n\nexport const RelativeTime = Template.bind({});\nRelativeTime.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"relative\",\n  hasPopup: \"menu\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  secondaryActionClass: \"options-button\",\n  tabItems,\n};\nexport const DateAndTime = Template.bind({});\nDateAndTime.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"dateTime\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  secondaryActionClass: \"options-button\",\n  tabItems,\n};\nexport const DateOnly = Template.bind({});\nDateOnly.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"date\",\n  hasPopup: \"menu\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  secondaryActionClass: \"options-button\",\n  tabItems,\n};\nexport const TimeOnly = Template.bind({});\nTimeOnly.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"time\",\n  hasPopup: \"menu\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  secondaryActionClass: \"options-button\",\n  tabItems,\n};\nexport const RecentlyClosed = Template.bind({});\nRecentlyClosed.args = {\n  listClass: \"dismiss\",\n  dateTimeFormat: \"relative\",\n  hasPopup: null,\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction: () => {},\n  secondaryActionClass: \"dismiss-button\",\n  tabItems: recentlyClosedItems,\n};\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.formatAccessKey();\n      }).observe(this, { characterData: true, childList: true, subtree: true });\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#observer.disconnect();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * Escape special characters for regular expressions from a string.\n *\n * @param {string} string\n *   The string to sanitize.\n * @returns {string} The sanitized string.\n */\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Search a tab list for items that match the given query.\n */\nexport function searchTabList(query, tabList) {\n  const regex = RegExp(escapeRegExp(query), \"i\");\n  return tabList.filter(\n    ({ title, url }) => regex.test(title) || regex.test(url)\n  );\n}\n","import __chrome_styles_loader__fxviewtabrowStyles from \"browser/components/firefoxview/fxview-tab-row.css\";\nimport __chrome_styles_loader__fxviewtablistStyles from \"browser/components/firefoxview/fxview-tab-list.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  classMap,\n  html,\n  ifDefined,\n  repeat,\n  styleMap,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { escapeRegExp } from \"./search-helpers.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-button.mjs\";\n\nconst NOW_THRESHOLD_MS = 91000;\nconst FXVIEW_ROW_HEIGHT_PX = 32;\nconst lazy = {};\nlet XPCOMUtils;\n\nif (!window.IS_STORYBOOK) {\n  XPCOMUtils = ChromeUtils.importESModule(\n    \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n  ).XPCOMUtils;\n  XPCOMUtils.defineLazyPreferenceGetter(\n    lazy,\n    \"virtualListEnabledPref\",\n    \"browser.firefox-view.virtual-list.enabled\"\n  );\n  ChromeUtils.defineLazyGetter(lazy, \"relativeTimeFormat\", () => {\n    return new Services.intl.RelativeTimeFormat(undefined, {\n      style: \"narrow\",\n    });\n  });\n\n  ChromeUtils.defineESModuleGetters(lazy, {\n    BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n  });\n}\n\n/**\n * A list of clickable tab items\n *\n * @property {boolean} compactRows - Whether to hide the URL and date/time for each tab.\n * @property {string} dateTimeFormat - Expected format for date and/or time\n * @property {string} hasPopup - The aria-haspopup attribute for the secondary action, if required\n * @property {number} maxTabsLength - The max number of tabs for the list\n * @property {Array} tabItems - Items to show in the tab list\n * @property {string} searchQuery - The query string to highlight, if provided.\n * @property {string} secondaryActionClass - The class used to style the secondary action element\n * @property {string} tertiaryActionClass - The class used to style the tertiary action element\n */\nexport class FxviewTabListBase extends MozLitElement {\n  constructor() {\n    super();\n    window.MozXULElement.insertFTLIfNeeded(\"toolkit/branding/brandings.ftl\");\n    window.MozXULElement.insertFTLIfNeeded(\"browser/fxviewTabList.ftl\");\n    this.activeIndex = 0;\n    this.currentActiveElementId = \"fxview-tab-row-main\";\n    this.hasPopup = null;\n    this.dateTimeFormat = \"relative\";\n    this.maxTabsLength = 25;\n    this.tabItems = [];\n    this.compactRows = false;\n    this.updatesPaused = true;\n    this.#register();\n  }\n\n  static properties = {\n    activeIndex: { type: Number },\n    compactRows: { type: Boolean },\n    currentActiveElementId: { type: String },\n    dateTimeFormat: { type: String },\n    hasPopup: { type: String },\n    maxTabsLength: { type: Number },\n    tabItems: { type: Array },\n    updatesPaused: { type: Boolean },\n    searchQuery: { type: String },\n    secondaryActionClass: { type: String },\n    tertiaryActionClass: { type: String },\n  };\n\n  static queries = {\n    emptyState: \"fxview-empty-state\",\n    rowEls: {\n      all: \"fxview-tab-row\",\n    },\n    rootVirtualListEl: \"virtual-list\",\n  };\n\n  willUpdate(changes) {\n    this.activeIndex = Math.min(\n      Math.max(this.activeIndex, 0),\n      this.tabItems.length - 1\n    );\n\n    if (changes.has(\"dateTimeFormat\") || changes.has(\"updatesPaused\")) {\n      this.clearIntervalTimer();\n      if (\n        !this.updatesPaused &&\n        this.dateTimeFormat == \"relative\" &&\n        !window.IS_STORYBOOK\n      ) {\n        this.startIntervalTimer();\n        this.onIntervalUpdate();\n      }\n    }\n\n    if (this.maxTabsLength > 0) {\n      this.tabItems = this.tabItems.slice(0, this.maxTabsLength);\n    }\n  }\n\n  startIntervalTimer() {\n    this.clearIntervalTimer();\n    this.intervalID = setInterval(\n      () => this.onIntervalUpdate(),\n      this.timeMsPref\n    );\n  }\n\n  clearIntervalTimer() {\n    if (this.intervalID) {\n      clearInterval(this.intervalID);\n      delete this.intervalID;\n    }\n  }\n\n  #register() {\n    if (!window.IS_STORYBOOK) {\n      XPCOMUtils.defineLazyPreferenceGetter(\n        this,\n        \"timeMsPref\",\n        \"browser.tabs.firefox-view.updateTimeMs\",\n        NOW_THRESHOLD_MS,\n        () => {\n          this.clearIntervalTimer();\n          if (!this.isConnected) {\n            return;\n          }\n          this.startIntervalTimer();\n          this.requestUpdate();\n        }\n      );\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (\n      !this.updatesPaused &&\n      this.dateTimeFormat === \"relative\" &&\n      !window.IS_STORYBOOK\n    ) {\n      this.startIntervalTimer();\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.clearIntervalTimer();\n  }\n\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await Promise.all(Array.from(this.rowEls).map(item => item.updateComplete));\n  }\n\n  onIntervalUpdate() {\n    this.requestUpdate();\n    Array.from(this.rowEls).forEach(fxviewTabRow =>\n      fxviewTabRow.requestUpdate()\n    );\n  }\n\n  /**\n   * Focuses the expected element (either the link or button) within fxview-tab-row\n   * The currently focused/active element ID within a row is stored in this.currentActiveElementId\n   */\n  handleFocusElementInRow(e) {\n    let fxviewTabRow = e.target;\n    if (e.code == \"ArrowUp\") {\n      // Focus either the link or button of the previous row based on this.currentActiveElementId\n      e.preventDefault();\n      this.focusPrevRow();\n    } else if (e.code == \"ArrowDown\") {\n      // Focus either the link or button of the next row based on this.currentActiveElementId\n      e.preventDefault();\n      this.focusNextRow();\n    } else if (e.code == \"ArrowRight\") {\n      // Focus either the link or the button in the current row and\n      // set this.currentActiveElementId to that element's ID\n      e.preventDefault();\n      if (document.dir == \"rtl\") {\n        fxviewTabRow.moveFocusLeft();\n      } else {\n        fxviewTabRow.moveFocusRight();\n      }\n    } else if (e.code == \"ArrowLeft\") {\n      // Focus either the link or the button in the current row and\n      // set this.currentActiveElementId to that element's ID\n      e.preventDefault();\n      if (document.dir == \"rtl\") {\n        fxviewTabRow.moveFocusRight();\n      } else {\n        fxviewTabRow.moveFocusLeft();\n      }\n    }\n  }\n\n  focusPrevRow() {\n    this.focusIndex(this.activeIndex - 1);\n  }\n\n  focusNextRow() {\n    this.focusIndex(this.activeIndex + 1);\n  }\n\n  async focusIndex(index) {\n    // Focus link or button of item\n    if (lazy.virtualListEnabledPref) {\n      let row = this.rootVirtualListEl.getItem(index);\n      if (!row) {\n        return;\n      }\n      let subList = this.rootVirtualListEl.getSubListForItem(index);\n      if (!subList) {\n        return;\n      }\n      this.activeIndex = index;\n\n      // In Bug 1866845, these manual updates to the sublists should be removed\n      // and scrollIntoView() should also be iterated on so that we aren't constantly\n      // moving the focused item to the center of the viewport\n      await this.requestVirtualListUpdate();\n      row.scrollIntoView({ block: \"center\" });\n      row.focus();\n    } else if (index >= 0 && index < this.rowEls?.length) {\n      this.rowEls[index].focus();\n      this.activeIndex = index;\n    }\n  }\n\n  async requestVirtualListUpdate() {\n    for (const sublist of this.rootVirtualListEl.children) {\n      await sublist.requestUpdate();\n      await sublist.updateComplete;\n    }\n  }\n\n  shouldUpdate(changes) {\n    if (changes.has(\"updatesPaused\")) {\n      if (this.updatesPaused) {\n        this.clearIntervalTimer();\n      }\n    }\n    return !this.updatesPaused;\n  }\n\n  itemTemplate = (tabItem, i) => {\n    let time;\n    if (tabItem.time || tabItem.closedAt) {\n      let stringTime = (tabItem.time || tabItem.closedAt).toString();\n      // Different APIs return time in different units, so we use\n      // the length to decide if it's milliseconds or nanoseconds.\n      if (stringTime.length === 16) {\n        time = (tabItem.time || tabItem.closedAt) / 1000;\n      } else {\n        time = tabItem.time || tabItem.closedAt;\n      }\n    }\n\n    return html`\n      <fxview-tab-row\n        ?active=${i == this.activeIndex}\n        ?compact=${this.compactRows}\n        .currentActiveElementId=${this.currentActiveElementId}\n        .favicon=${tabItem.icon}\n        .primaryL10nId=${tabItem.primaryL10nId}\n        .primaryL10nArgs=${ifDefined(tabItem.primaryL10nArgs)}\n        .secondaryL10nId=${tabItem.secondaryL10nId}\n        .secondaryL10nArgs=${ifDefined(tabItem.secondaryL10nArgs)}\n        .tertiaryL10nId=${ifDefined(tabItem.tertiaryL10nId)}\n        .tertiaryL10nArgs=${ifDefined(tabItem.tertiaryL10nArgs)}\n        .secondaryActionClass=${this.secondaryActionClass}\n        .tertiaryActionClass=${ifDefined(this.tertiaryActionClass)}\n        .sourceClosedId=${ifDefined(tabItem.sourceClosedId)}\n        .sourceWindowId=${ifDefined(tabItem.sourceWindowId)}\n        .closedId=${ifDefined(tabItem.closedId || tabItem.closedId)}\n        role=\"listitem\"\n        .tabElement=${ifDefined(tabItem.tabElement)}\n        .time=${ifDefined(time)}\n        .title=${tabItem.title}\n        .url=${tabItem.url}\n        .searchQuery=${ifDefined(this.searchQuery)}\n        .timeMsPref=${ifDefined(this.timeMsPref)}\n        .hasPopup=${this.hasPopup}\n        .dateTimeFormat=${this.dateTimeFormat}\n      ></fxview-tab-row>\n    `;\n  };\n\n  stylesheets() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__fxviewtablistStyles}\"\n    />`;\n  }\n\n  render() {\n    if (this.searchQuery && !this.tabItems.length) {\n      return this.emptySearchResultsTemplate();\n    }\n    return html`\n      ${this.stylesheets()}\n      <div\n        id=\"fxview-tab-list\"\n        class=\"fxview-tab-list\"\n        data-l10n-id=\"firefoxview-tabs\"\n        role=\"list\"\n        @keydown=${this.handleFocusElementInRow}\n      >\n        ${when(\n          lazy.virtualListEnabledPref,\n          () => html`\n            <virtual-list\n              .activeIndex=${this.activeIndex}\n              .items=${this.tabItems}\n              .template=${this.itemTemplate}\n            ></virtual-list>\n          `,\n          () =>\n            html`${this.tabItems.map((tabItem, i) =>\n              this.itemTemplate(tabItem, i)\n            )}`\n        )}\n      </div>\n      <slot name=\"menu\"></slot>\n    `;\n  }\n\n  emptySearchResultsTemplate() {\n    return html` <fxview-empty-state\n      class=\"search-results\"\n      headerLabel=\"firefoxview-search-results-empty\"\n      .headerArgs=${{ query: this.searchQuery }}\n      isInnerCard\n    >\n    </fxview-empty-state>`;\n  }\n}\ncustomElements.define(\"fxview-tab-list\", FxviewTabListBase);\n\n/**\n * A tab item that displays favicon, title, url, and time of last access\n *\n * @property {boolean} active - Should current item have focus on keydown\n * @property {boolean} compact - Whether to hide the URL and date/time for this tab.\n * @property {string} currentActiveElementId - ID of currently focused element within each tab item\n * @property {string} dateTimeFormat - Expected format for date and/or time\n * @property {string} hasPopup - The aria-haspopup attribute for the secondary action, if required\n * @property {number} closedId - The tab ID for when the tab item was closed.\n * @property {number} sourceClosedId - The closedId of the closed window its from if applicable\n * @property {number} sourceWindowId - The sessionstore id of the window its from if applicable\n * @property {string} favicon - The favicon for the tab item.\n * @property {string} primaryL10nId - The l10n id used for the primary action element\n * @property {string} primaryL10nArgs - The l10n args used for the primary action element\n * @property {string} secondaryL10nId - The l10n id used for the secondary action button\n * @property {string} secondaryL10nArgs - The l10n args used for the secondary action element\n * @property {string} secondaryActionClass - The class used to style the secondary action element\n * @property {string} tertiaryL10nId - The l10n id used for the tertiary action button\n * @property {string} tertiaryL10nArgs - The l10n args used for the tertiary action element\n * @property {string} tertiaryActionClass - The class used to style the tertiary action element\n * @property {object} tabElement - The MozTabbrowserTab element for the tab item.\n * @property {number} time - The timestamp for when the tab was last accessed.\n * @property {string} title - The title for the tab item.\n * @property {string} url - The url for the tab item.\n * @property {number} timeMsPref - The frequency in milliseconds of updates to relative time\n * @property {string} searchQuery - The query string to highlight, if provided.\n */\nexport class FxviewTabRowBase extends MozLitElement {\n  static properties = {\n    active: { type: Boolean },\n    compact: { type: Boolean },\n    currentActiveElementId: { type: String },\n    dateTimeFormat: { type: String },\n    favicon: { type: String },\n    hasPopup: { type: String },\n    primaryL10nId: { type: String },\n    primaryL10nArgs: { type: String },\n    secondaryL10nId: { type: String },\n    secondaryL10nArgs: { type: String },\n    secondaryActionClass: { type: String },\n    tertiaryL10nId: { type: String },\n    tertiaryL10nArgs: { type: String },\n    tertiaryActionClass: { type: String },\n    closedId: { type: Number },\n    sourceClosedId: { type: Number },\n    sourceWindowId: { type: String },\n    tabElement: { type: Object },\n    time: { type: Number },\n    title: { type: String },\n    timeMsPref: { type: Number },\n    url: { type: String },\n    uri: { type: String },\n    searchQuery: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.active = false;\n    this.currentActiveElementId = \"fxview-tab-row-main\";\n  }\n\n  static queries = {\n    mainEl: \"#fxview-tab-row-main\",\n    secondaryButtonEl: \"#fxview-tab-row-secondary-button:not([hidden])\",\n    tertiaryButtonEl: \"#fxview-tab-row-tertiary-button\",\n  };\n\n  get currentFocusable() {\n    let focusItem = this.renderRoot.getElementById(this.currentActiveElementId);\n    if (!focusItem) {\n      focusItem = this.renderRoot.getElementById(\"fxview-tab-row-main\");\n    }\n    return focusItem;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.uri = this.url;\n  }\n\n  focus() {\n    this.currentFocusable.focus();\n  }\n\n  focusSecondaryButton() {\n    let tabList = this.getRootNode().host;\n    this.secondaryButtonEl.focus();\n    tabList.currentActiveElementId = this.secondaryButtonEl.id;\n  }\n\n  focusTertiaryButton() {\n    let tabList = this.getRootNode().host;\n    this.tertiaryButtonEl.focus();\n    tabList.currentActiveElementId = this.tertiaryButtonEl.id;\n  }\n\n  focusLink() {\n    let tabList = this.getRootNode().host;\n    this.mainEl.focus();\n    tabList.currentActiveElementId = this.mainEl.id;\n  }\n\n  moveFocusRight() {\n    if (this.currentActiveElementId === \"fxview-tab-row-main\") {\n      this.focusSecondaryButton();\n    } else if (\n      this.tertiaryButtonEl &&\n      this.currentActiveElementId === \"fxview-tab-row-secondary-button\"\n    ) {\n      this.focusTertiaryButton();\n    }\n  }\n\n  moveFocusLeft() {\n    if (this.currentActiveElementId === \"fxview-tab-row-tertiary-button\") {\n      this.focusSecondaryButton();\n    } else {\n      this.focusLink();\n    }\n  }\n\n  dateFluentArgs(timestamp, dateTimeFormat) {\n    if (dateTimeFormat === \"date\" || dateTimeFormat === \"dateTime\") {\n      return JSON.stringify({ date: timestamp });\n    }\n    return null;\n  }\n\n  dateFluentId(timestamp, dateTimeFormat, _nowThresholdMs = NOW_THRESHOLD_MS) {\n    if (!timestamp) {\n      return null;\n    }\n    if (dateTimeFormat === \"relative\") {\n      const elapsed = Date.now() - timestamp;\n      if (elapsed <= _nowThresholdMs || !lazy.relativeTimeFormat) {\n        // Use a different string for very recent timestamps\n        return \"fxviewtabrow-just-now-timestamp\";\n      }\n      return null;\n    } else if (dateTimeFormat === \"date\" || dateTimeFormat === \"dateTime\") {\n      return \"fxviewtabrow-date\";\n    }\n    return null;\n  }\n\n  relativeTime(timestamp, dateTimeFormat, _nowThresholdMs = NOW_THRESHOLD_MS) {\n    if (dateTimeFormat === \"relative\") {\n      const elapsed = Date.now() - timestamp;\n      if (elapsed > _nowThresholdMs && lazy.relativeTimeFormat) {\n        return lazy.relativeTimeFormat.formatBestUnit(new Date(timestamp));\n      }\n    }\n    return null;\n  }\n\n  timeFluentId(dateTimeFormat) {\n    if (dateTimeFormat === \"time\" || dateTimeFormat === \"dateTime\") {\n      return \"fxviewtabrow-time\";\n    }\n    return null;\n  }\n\n  formatURIForDisplay(uriString) {\n    return !window.IS_STORYBOOK\n      ? lazy.BrowserUtils.formatURIStringForDisplay(uriString)\n      : uriString;\n  }\n\n  getImageUrl(icon, targetURI) {\n    if (window.IS_STORYBOOK) {\n      return `chrome://global/skin/icons/defaultFavicon.svg`;\n    }\n    if (!icon) {\n      if (targetURI?.startsWith(\"moz-extension\")) {\n        return \"chrome://mozapps/skin/extensions/extension.svg\";\n      }\n      return `chrome://global/skin/icons/defaultFavicon.svg`;\n    }\n    // If the icon is not for website (doesn't begin with http), we\n    // display it directly. Otherwise we go through the page-icon\n    // protocol to try to get a cached version. We don't load\n    // favicons directly.\n    if (icon.startsWith(\"http\")) {\n      return `page-icon:${targetURI}`;\n    }\n    return icon;\n  }\n\n  primaryActionHandler(event) {\n    if (\n      (event.type == \"click\" && !event.altKey) ||\n      (event.type == \"keydown\" && event.code == \"Enter\") ||\n      (event.type == \"keydown\" && event.code == \"Space\")\n    ) {\n      event.preventDefault();\n      if (!window.IS_STORYBOOK) {\n        this.dispatchEvent(\n          new CustomEvent(\"fxview-tab-list-primary-action\", {\n            bubbles: true,\n            composed: true,\n            detail: { originalEvent: event, item: this },\n          })\n        );\n      }\n    }\n  }\n\n  secondaryActionHandler(event) {\n    if (\n      (event.type == \"click\" && event.detail && !event.altKey) ||\n      // detail=0 is from keyboard\n      (event.type == \"click\" && !event.detail)\n    ) {\n      event.preventDefault();\n      this.dispatchEvent(\n        new CustomEvent(\"fxview-tab-list-secondary-action\", {\n          bubbles: true,\n          composed: true,\n          detail: { originalEvent: event, item: this },\n        })\n      );\n    }\n  }\n\n  tertiaryActionHandler(event) {\n    if (\n      (event.type == \"click\" && event.detail && !event.altKey) ||\n      // detail=0 is from keyboard\n      (event.type == \"click\" && !event.detail)\n    ) {\n      event.preventDefault();\n      this.dispatchEvent(\n        new CustomEvent(\"fxview-tab-list-tertiary-action\", {\n          bubbles: true,\n          composed: true,\n          detail: { originalEvent: event, item: this },\n        })\n      );\n    }\n  }\n\n  /**\n   * Find all matches of query within the given string, and compute the result\n   * to be rendered.\n   *\n   * @param {string} query\n   * @param {string} string\n   */\n  highlightSearchMatches(query, string) {\n    const fragments = [];\n    const regex = RegExp(escapeRegExp(query), \"dgi\");\n    let prevIndexEnd = 0;\n    let result;\n    while ((result = regex.exec(string)) !== null) {\n      const [indexStart, indexEnd] = result.indices[0];\n      fragments.push(string.substring(prevIndexEnd, indexStart));\n      fragments.push(\n        html`<strong>${string.substring(indexStart, indexEnd)}</strong>`\n      );\n      prevIndexEnd = regex.lastIndex;\n    }\n    fragments.push(string.substring(prevIndexEnd));\n    return fragments;\n  }\n\n  stylesheets() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__fxviewtabrowStyles}\"\n    />`;\n  }\n\n  faviconTemplate() {\n    return html`<span\n      class=\"fxview-tab-row-favicon icon\"\n      id=\"fxview-tab-row-favicon\"\n      style=${styleMap({\n        backgroundImage: `url(${this.getImageUrl(this.favicon, this.url)})`,\n      })}\n    ></span>`;\n  }\n\n  titleTemplate() {\n    const title = this.title;\n    return html`<span\n      class=\"fxview-tab-row-title text-truncated-ellipsis\"\n      id=\"fxview-tab-row-title\"\n      dir=\"auto\"\n    >\n      ${when(\n        this.searchQuery,\n        () => this.highlightSearchMatches(this.searchQuery, title),\n        () => title\n      )}\n    </span>`;\n  }\n\n  urlTemplate() {\n    return html`<span\n      class=\"fxview-tab-row-url text-truncated-ellipsis\"\n      id=\"fxview-tab-row-url\"\n    >\n      ${when(\n        this.searchQuery,\n        () =>\n          this.highlightSearchMatches(\n            this.searchQuery,\n            this.formatURIForDisplay(this.url)\n          ),\n        () => this.formatURIForDisplay(this.url)\n      )}\n    </span>`;\n  }\n\n  dateTemplate() {\n    const relativeString = this.relativeTime(\n      this.time,\n      this.dateTimeFormat,\n      !window.IS_STORYBOOK ? this.timeMsPref : NOW_THRESHOLD_MS\n    );\n    const dateString = this.dateFluentId(\n      this.time,\n      this.dateTimeFormat,\n      !window.IS_STORYBOOK ? this.timeMsPref : NOW_THRESHOLD_MS\n    );\n    const dateArgs = this.dateFluentArgs(this.time, this.dateTimeFormat);\n    return html`<span class=\"fxview-tab-row-date\" id=\"fxview-tab-row-date\">\n      <span\n        ?hidden=${relativeString || !dateString}\n        data-l10n-id=${ifDefined(dateString)}\n        data-l10n-args=${ifDefined(dateArgs)}\n      ></span>\n      <span ?hidden=${!relativeString}>${relativeString}</span>\n    </span>`;\n  }\n\n  timeTemplate() {\n    const timeString = this.timeFluentId(this.dateTimeFormat);\n    const time = this.time;\n    const timeArgs = JSON.stringify({ time });\n    return html`<span\n      class=\"fxview-tab-row-time\"\n      id=\"fxview-tab-row-time\"\n      ?hidden=${!timeString}\n      data-timestamp=${ifDefined(this.time)}\n      data-l10n-id=${ifDefined(timeString)}\n      data-l10n-args=${ifDefined(timeArgs)}\n    >\n    </span>`;\n  }\n\n  getIconSrc(actionClass) {\n    let iconSrc;\n    switch (actionClass) {\n      case \"delete-button\":\n        iconSrc = \"chrome://global/skin/icons/delete.svg\";\n        break;\n      case \"dismiss-button\":\n        iconSrc = \"chrome://global/skin/icons/close.svg\";\n        break;\n      case \"options-button\":\n        iconSrc = \"chrome://global/skin/icons/more.svg\";\n        break;\n      default:\n        iconSrc = null;\n        break;\n    }\n    return iconSrc;\n  }\n\n  secondaryButtonTemplate() {\n    return html`${when(\n      this.secondaryL10nId && this.secondaryActionHandler,\n      () =>\n        html`<moz-button\n          type=\"icon ghost\"\n          class=${classMap({\n            \"fxview-tab-row-button\": true,\n            [this.secondaryActionClass]: this.secondaryActionClass,\n          })}\n          id=\"fxview-tab-row-secondary-button\"\n          data-l10n-id=${this.secondaryL10nId}\n          data-l10n-args=${ifDefined(this.secondaryL10nArgs)}\n          aria-haspopup=${ifDefined(this.hasPopup)}\n          @click=${this.secondaryActionHandler}\n          tabindex=${this.active &&\n          this.currentActiveElementId === \"fxview-tab-row-secondary-button\"\n            ? \"0\"\n            : \"-1\"}\n          iconSrc=${this.getIconSrc(this.secondaryActionClass)}\n        ></moz-button>`\n    )}`;\n  }\n\n  tertiaryButtonTemplate() {\n    return html`${when(\n      this.tertiaryL10nId && this.tertiaryActionHandler,\n      () =>\n        html`<moz-button\n          type=\"icon ghost\"\n          class=${classMap({\n            \"fxview-tab-row-button\": true,\n            [this.tertiaryActionClass]: this.tertiaryActionClass,\n          })}\n          id=\"fxview-tab-row-tertiary-button\"\n          data-l10n-id=${this.tertiaryL10nId}\n          data-l10n-args=${ifDefined(this.tertiaryL10nArgs)}\n          aria-haspopup=${ifDefined(this.hasPopup)}\n          @click=${this.tertiaryActionHandler}\n          tabindex=${this.active &&\n          this.currentActiveElementId === \"fxview-tab-row-tertiary-button\"\n            ? \"0\"\n            : \"-1\"}\n          iconSrc=${this.getIconSrc(this.tertiaryActionClass)}\n        ></moz-button>`\n    )}`;\n  }\n}\n\nexport class FxviewTabRow extends FxviewTabRowBase {\n  render() {\n    return html`\n      ${this.stylesheets()}\n      <a\n        href=${ifDefined(this.url)}\n        class=\"fxview-tab-row-main\"\n        id=\"fxview-tab-row-main\"\n        tabindex=${this.active &&\n        this.currentActiveElementId === \"fxview-tab-row-main\"\n          ? \"0\"\n          : \"-1\"}\n        data-l10n-id=${ifDefined(this.primaryL10nId)}\n        data-l10n-args=${ifDefined(this.primaryL10nArgs)}\n        @click=${this.primaryActionHandler}\n        @keydown=${this.primaryActionHandler}\n        title=${!this.primaryL10nId ? this.url : null}\n      >\n        ${this.faviconTemplate()} ${this.titleTemplate()}\n        ${when(\n          !this.compact,\n          () =>\n            html`${this.urlTemplate()} ${this.dateTemplate()}\n            ${this.timeTemplate()}`\n        )}\n      </a>\n      ${this.secondaryButtonTemplate()} ${this.tertiaryButtonTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"fxview-tab-row\", FxviewTabRow);\n\nexport class VirtualList extends MozLitElement {\n  static properties = {\n    items: { type: Array },\n    template: { type: Function },\n    activeIndex: { type: Number },\n    itemOffset: { type: Number },\n    maxRenderCountEstimate: { type: Number, state: true },\n    itemHeightEstimate: { type: Number, state: true },\n    isAlwaysVisible: { type: Boolean },\n    isVisible: { type: Boolean, state: true },\n    isSubList: { type: Boolean },\n    pinnedTabsIndexOffset: { type: Number },\n  };\n\n  createRenderRoot() {\n    return this;\n  }\n\n  constructor() {\n    super();\n    this.activeIndex = 0;\n    this.itemOffset = 0;\n    this.pinnedTabsIndexOffset = 0;\n    this.items = [];\n    this.subListItems = [];\n    this.itemHeightEstimate = FXVIEW_ROW_HEIGHT_PX;\n    this.maxRenderCountEstimate = Math.max(\n      40,\n      2 * Math.ceil(window.innerHeight / this.itemHeightEstimate)\n    );\n    this.isSubList = false;\n    this.isVisible = false;\n    this.intersectionObserver = new IntersectionObserver(\n      ([entry]) => {\n        this.isVisible = entry.isIntersecting;\n      },\n      { root: this.ownerDocument }\n    );\n    this.selfResizeObserver = new ResizeObserver(() => {\n      // Trigger the intersection observer once the tab rows have rendered\n      this.triggerIntersectionObserver();\n    });\n    this.childResizeObserver = new ResizeObserver(([entry]) => {\n      if (entry.contentRect?.height > 0) {\n        // Update properties on top-level virtual-list\n        this.parentElement.itemHeightEstimate = entry.contentRect.height;\n        this.parentElement.maxRenderCountEstimate = Math.max(\n          40,\n          2 * Math.ceil(window.innerHeight / this.itemHeightEstimate)\n        );\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.intersectionObserver.disconnect();\n    this.childResizeObserver.disconnect();\n    this.selfResizeObserver.disconnect();\n  }\n\n  triggerIntersectionObserver() {\n    this.intersectionObserver.unobserve(this);\n    this.intersectionObserver.observe(this);\n  }\n\n  getSubListForItem(index) {\n    if (this.isSubList) {\n      throw new Error(\"Cannot get sublist for item\");\n    }\n    return this.children[parseInt(index / this.maxRenderCountEstimate, 10)];\n  }\n\n  getItem(index) {\n    if (!this.isSubList) {\n      return this.getSubListForItem(index)?.getItem(\n        index % this.maxRenderCountEstimate\n      );\n    }\n    return this.children[index];\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"items\") && !this.isSubList) {\n      this.subListItems = [];\n      for (let i = 0; i < this.items.length; i += this.maxRenderCountEstimate) {\n        this.subListItems.push(\n          this.items.slice(i, i + this.maxRenderCountEstimate)\n        );\n      }\n    }\n  }\n\n  recalculateAfterWindowResize() {\n    this.maxRenderCountEstimate = Math.max(\n      40,\n      2 * Math.ceil(window.innerHeight / this.itemHeightEstimate)\n    );\n  }\n\n  firstUpdated() {\n    this.intersectionObserver.observe(this);\n    this.selfResizeObserver.observe(this);\n    if (this.isSubList && this.children[0]) {\n      this.childResizeObserver.observe(this.children[0]);\n    }\n  }\n\n  updated(changedProperties) {\n    this.updateListHeight(changedProperties);\n    if (changedProperties.has(\"items\") && !this.isSubList) {\n      this.triggerIntersectionObserver();\n    }\n  }\n\n  updateListHeight(changedProperties) {\n    if (\n      changedProperties.has(\"isAlwaysVisible\") ||\n      changedProperties.has(\"isVisible\")\n    ) {\n      this.style.height =\n        this.isAlwaysVisible || this.isVisible\n          ? \"auto\"\n          : `${this.items.length * this.itemHeightEstimate}px`;\n    }\n  }\n\n  get renderItems() {\n    return this.isSubList ? this.items : this.subListItems;\n  }\n\n  subListTemplate = (data, i) => {\n    return html`<virtual-list\n      .template=${this.template}\n      .items=${data}\n      .itemHeightEstimate=${this.itemHeightEstimate}\n      .itemOffset=${i * this.maxRenderCountEstimate +\n      this.pinnedTabsIndexOffset}\n      .isAlwaysVisible=${i ==\n      parseInt(this.activeIndex / this.maxRenderCountEstimate, 10)}\n      isSubList\n    ></virtual-list>`;\n  };\n\n  itemTemplate = (data, i) =>\n    this.template(data, this.itemOffset + i + this.pinnedTabsIndexOffset);\n\n  render() {\n    if (this.isAlwaysVisible || this.isVisible) {\n      return html`\n        ${repeat(\n          this.renderItems,\n          (data, i) => i,\n          this.isSubList ? this.itemTemplate : this.subListTemplate\n        )}\n      `;\n    }\n    return \"\";\n  }\n}\ncustomElements.define(\"virtual-list\", VirtualList);\n"],"names":[],"sourceRoot":""}