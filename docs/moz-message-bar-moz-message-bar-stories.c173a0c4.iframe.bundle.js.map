{"version":3,"file":"moz-message-bar-moz-message-bar-stories.c173a0c4.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChpLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAQA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://browser-storybook/../../../toolkit/content/widgets/moz-button/moz-button.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-message-bar/moz-message-bar.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-message-bar/moz-message-bar.stories.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-support-link/moz-support-link.mjs"],"sourcesContent":["import __chrome_styles_loader__mozbuttonStyles from \"toolkit/content/widgets/moz-button/moz-button.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n/**\n * A button with multiple types and two sizes.\n *\n * @tagname moz-button\n * @property {string} label - The button's label, will be overridden by slotted content.\n * @property {string} type - The button type.\n *   Options: default, primary, destructive, icon, icon ghost, ghost.\n * @property {string} size - The button size.\n *   Options: default, small.\n * @property {boolean} disabled - The disabled state.\n * @property {string} title - The button's title attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} titleAttribute - Internal, map title attribute to the title JS property.\n * @property {string} tooltipText - Set the title property, the title attribute will be used first.\n * @property {string} ariaLabel - The button's arial-label attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} iconSrc - Path to the icon that should be displayed in the button.\n * @property {string} ariaLabelAttribute - Internal, map aria-label attribute to the ariaLabel JS property.\n * @property {string} hasVisibleLabel - Internal, tracks whether or not the button has a visible label.\n * @property {HTMLButtonElement} buttonEl - The internal button element in the shadow DOM.\n * @property {HTMLButtonElement} slotEl - The internal slot element in the shadow DOM.\n * @slot default - The button's content, overrides label property.\n * @fires click - The click event.\n */\nexport default class MozButton extends MozLitElement {\n  static shadowRootOptions = {\n    ...MozLitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  static properties = {\n    label: { type: String, reflect: true },\n    type: { type: String, reflect: true },\n    size: { type: String, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    title: { type: String, state: true },\n    titleAttribute: { type: String, attribute: \"title\", reflect: true },\n    tooltipText: { type: String },\n    ariaLabelAttribute: {\n      type: String,\n      attribute: \"aria-label\",\n      reflect: true,\n    },\n    ariaLabel: { type: String, state: true },\n    iconSrc: { type: String },\n    hasVisibleLabel: { type: Boolean, state: true },\n  };\n\n  static queries = {\n    buttonEl: \"button\",\n    slotEl: \"slot\",\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.size = \"default\";\n    this.disabled = false;\n    this.hasVisibleLabel = !!this.label;\n  }\n\n  willUpdate(changes) {\n    if (changes.has(\"titleAttribute\")) {\n      this.title = this.titleAttribute;\n      this.titleAttribute = null;\n    }\n    if (changes.has(\"ariaLabelAttribute\")) {\n      this.ariaLabel = this.ariaLabelAttribute;\n      this.ariaLabelAttribute = null;\n    }\n  }\n\n  // Delegate clicks on host to the button element.\n  click() {\n    this.buttonEl.click();\n  }\n\n  handleSlotchange() {\n    if (this.slotEl?.assignedNodes()?.length) {\n      this.hasVisibleLabel = true;\n    }\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttonStyles}\"\n      />\n      <button\n        type=${this.type}\n        size=${this.size}\n        ?disabled=${this.disabled}\n        title=${ifDefined(this.title || this.tooltipText)}\n        aria-label=${ifDefined(this.ariaLabel)}\n        part=\"button\"\n        class=${classMap({ labelled: this.label || this.hasVisibleLabel })}\n      >\n        ${this.iconSrc\n          ? html`<img src=${this.iconSrc} role=\"presentation\" />`\n          : \"\"}\n        <slot @slotchange=${this.handleSlotchange}>${this.label}</slot>\n      </button>\n    `;\n  }\n}\ncustomElements.define(\"moz-button\", MozButton);\n","import __chrome_styles_loader__mozmessagebarStyles from \"toolkit/content/widgets/moz-message-bar/moz-message-bar.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-button.mjs\";\n\nconst messageTypeToIconData = {\n  info: {\n    iconSrc: \"chrome://global/skin/icons/info-filled.svg\",\n    l10nId: \"moz-message-bar-icon-info\",\n  },\n  warning: {\n    iconSrc: \"chrome://global/skin/icons/warning.svg\",\n    l10nId: \"moz-message-bar-icon-warning\",\n  },\n  success: {\n    iconSrc: \"chrome://global/skin/icons/check-filled.svg\",\n    l10nId: \"moz-message-bar-icon-success\",\n  },\n  error: {\n    iconSrc: \"chrome://global/skin/icons/error.svg\",\n    l10nId: \"moz-message-bar-icon-error\",\n  },\n  critical: {\n    iconSrc: \"chrome://global/skin/icons/error.svg\",\n    l10nId: \"moz-message-bar-icon-error\",\n  },\n};\n\n/**\n * A simple message bar element that can be used to display\n * important information to users.\n *\n * @tagname moz-message-bar\n * @property {string} type - The type of the displayed message.\n * @property {string} heading - The heading of the message.\n * @property {string} message - The message text.\n * @property {boolean} dismissable - Whether or not the element is dismissable.\n * @property {string} messageL10nId - l10n ID for the message.\n * @property {string} messageL10nArgs - Any args needed for the message l10n ID.\n * @fires message-bar:close\n *  Custom event indicating that message bar was closed.\n * @fires message-bar:user-dismissed\n *  Custom event indicating that message bar was dismissed by the user.\n */\n\nexport default class MozMessageBar extends MozLitElement {\n  static queries = {\n    actionsSlot: \"slot[name=actions]\",\n    actionsEl: \".actions\",\n    closeButton: \"moz-button.close\",\n    supportLinkSlot: \"slot[name=support-link]\",\n  };\n\n  static properties = {\n    type: { type: String },\n    heading: { type: String },\n    message: { type: String },\n    dismissable: { type: Boolean },\n    messageL10nId: { type: String },\n    messageL10nArgs: { type: String },\n  };\n\n  constructor() {\n    super();\n    window.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozMessageBar.ftl\");\n    this.type = \"info\";\n    this.dismissable = false;\n  }\n\n  onSlotchange() {\n    let actions = this.actionsSlot.assignedNodes();\n    this.actionsEl.classList.toggle(\"active\", actions.length);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"alert\");\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.dispatchEvent(new CustomEvent(\"message-bar:close\"));\n  }\n\n  get supportLinkEls() {\n    return this.supportLinkSlot.assignedElements();\n  }\n\n  iconTemplate() {\n    let iconData = messageTypeToIconData[this.type];\n    if (iconData) {\n      let { iconSrc, l10nId } = iconData;\n      return html`\n        <div class=\"icon-container\">\n          <img\n            class=\"icon\"\n            src=${iconSrc}\n            data-l10n-id=${l10nId}\n            data-l10n-attrs=\"alt\"\n          />\n        </div>\n      `;\n    }\n    return \"\";\n  }\n\n  headingTemplate() {\n    if (this.heading) {\n      return html`<strong class=\"heading\">${this.heading}</strong>`;\n    }\n    return \"\";\n  }\n\n  closeButtonTemplate({ size } = {}) {\n    if (this.dismissable) {\n      return html`\n        <moz-button\n          type=\"icon ghost\"\n          class=\"close\"\n          size=${ifDefined(size)}\n          data-l10n-id=\"moz-message-bar-close-button\"\n          @click=${this.dismiss}\n        ></moz-button>\n      `;\n    }\n    return \"\";\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozmessagebarStyles}\"\n      />\n      <div class=\"container\">\n        <div class=\"content\">\n          <div class=\"text-container\">\n            ${this.iconTemplate()}\n            <div class=\"text-content\">\n              ${this.headingTemplate()}\n              <div>\n                <span\n                  class=\"message\"\n                  data-l10n-id=${ifDefined(this.messageL10nId)}\n                  data-l10n-args=${ifDefined(\n                    JSON.stringify(this.messageL10nArgs)\n                  )}\n                >\n                  ${this.message}\n                </span>\n                <span class=\"link\">\n                  <slot name=\"support-link\"></slot>\n                </span>\n              </div>\n            </div>\n          </div>\n          <span class=\"actions\">\n            <slot name=\"actions\" @slotchange=${this.onSlotchange}></slot>\n          </span>\n        </div>\n        ${this.closeButtonTemplate()}\n      </div>\n    `;\n  }\n\n  dismiss() {\n    this.dispatchEvent(new CustomEvent(\"message-bar:user-dismissed\"));\n    this.close();\n  }\n\n  close() {\n    this.remove();\n  }\n}\n\ncustomElements.define(\"moz-message-bar\", MozMessageBar);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* eslint-disable import/no-unassigned-import */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport \"./moz-message-bar.mjs\";\nimport \"../moz-support-link/moz-support-link.mjs\";\n\nconst fluentStrings = [\n  \"moz-message-bar-message\",\n  \"moz-message-bar-message-heading\",\n  \"moz-message-bar-message-heading-long\",\n];\n\nexport default {\n  title: \"UI Widgets/Message Bar\",\n  component: \"moz-message-bar\",\n  argTypes: {\n    type: {\n      options: [\"info\", \"warning\", \"success\", \"error\"],\n      control: { type: \"select\" },\n    },\n    l10nId: {\n      options: fluentStrings,\n      control: { type: \"select\" },\n    },\n    heading: {\n      table: {\n        disable: true,\n      },\n    },\n    message: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n  parameters: {\n    status: \"stable\",\n    fluent: `\nmoz-message-bar-message =\n  .message = For your information message\nmoz-message-bar-message-heading =\n  .heading = Heading\n  .message = For your information message\nmoz-message-bar-message-heading-long =\n  .heading = A longer heading to check text wrapping in the message bar\n  .message = Some message that we use to check text wrapping. Some message that we use to check text wrapping.\nmoz-message-bar-button = Click me!\n    `,\n  },\n};\n\nconst Template = ({\n  type,\n  heading,\n  message,\n  l10nId,\n  dismissable,\n  hasSupportLink,\n  hasActionButton,\n}) => html`\n  <moz-message-bar\n    type=${type}\n    heading=${ifDefined(heading)}\n    message=${ifDefined(message)}\n    data-l10n-id=${ifDefined(l10nId)}\n    data-l10n-attrs=\"heading, message\"\n    ?dismissable=${dismissable}\n  >\n    ${hasSupportLink\n      ? html`\n          <a\n            is=\"moz-support-link\"\n            support-page=\"addons\"\n            slot=\"support-link\"\n          ></a>\n        `\n      : \"\"}\n    ${hasActionButton\n      ? html`\n          <button data-l10n-id=\"moz-message-bar-button\" slot=\"actions\"></button>\n        `\n      : \"\"}\n  </moz-message-bar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  type: \"info\",\n  l10nId: \"moz-message-bar-message\",\n  dismissable: false,\n  hasSupportLink: false,\n  hasActionButton: false,\n};\n\nexport const Dismissable = Template.bind({});\nDismissable.args = {\n  type: \"info\",\n  l10nId: \"moz-message-bar-message\",\n  dismissable: true,\n  hasSupportLink: false,\n  hasActionButton: false,\n};\n\nexport const WithActionButton = Template.bind({});\nWithActionButton.args = {\n  type: \"info\",\n  l10nId: \"moz-message-bar-message\",\n  dismissable: false,\n  hasSupportLink: false,\n  hasActionButton: true,\n};\n\nexport const WithSupportLink = Template.bind({});\nWithSupportLink.args = {\n  type: \"info\",\n  l10nId: \"moz-message-bar-message\",\n  dismissable: false,\n  hasSupportLink: true,\n  hasActionButton: false,\n};\n\nexport const WithHeading = Template.bind({});\nWithHeading.args = {\n  ...Default.args,\n  l10nId: \"moz-message-bar-message-heading\",\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozSupportLink.ftl\");\n\n/**\n * An extension of the anchor element that helps create links to Mozilla's\n * support documentation. This should be used for SUMO links only - other \"Learn\n * more\" links can use the regular anchor element.\n *\n * @tagname moz-support-link\n * @attribute {string} support-page - Short-hand string from SUMO to the specific support page.\n * @attribute {string} utm-content - UTM parameter for a URL, if it is an AMO URL.\n * @attribute {string} data-l10n-id - Fluent ID used to generate the text content.\n */\nexport default class MozSupportLink extends HTMLAnchorElement {\n  static SUPPORT_URL = \"https://www.mozilla.org/\";\n  static get observedAttributes() {\n    return [\"support-page\", \"utm-content\"];\n  }\n\n  /**\n   * Handles setting up the SUPPORT_URL preference getter.\n   * Without this, the tests for this component may not behave\n   * as expected.\n   * @private\n   * @memberof MozSupportLink\n   */\n  #register() {\n    if (window.document.nodePrincipal?.isSystemPrincipal) {\n      // eslint-disable-next-line no-shadow\n      let { XPCOMUtils } = window.XPCOMUtils\n        ? window\n        : ChromeUtils.importESModule(\n            \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n          );\n      XPCOMUtils.defineLazyPreferenceGetter(\n        MozSupportLink,\n        \"SUPPORT_URL\",\n        \"app.support.baseURL\",\n        \"\",\n        null,\n        val => Services.urlFormatter.formatURL(val)\n      );\n    } else if (!window.IS_STORYBOOK) {\n      MozSupportLink.SUPPORT_URL = window.RPMGetFormatURLPref(\n        \"app.support.baseURL\"\n      );\n    }\n  }\n\n  connectedCallback() {\n    this.#register();\n    this.#setHref();\n    this.setAttribute(\"target\", \"_blank\");\n    this.addEventListener(\"click\", this);\n    if (\n      !this.getAttribute(\"data-l10n-id\") &&\n      !this.getAttribute(\"data-l10n-name\") &&\n      !this.childElementCount\n    ) {\n      document.l10n.setAttributes(this, \"moz-support-link-text\");\n    }\n    document.l10n.translateFragment(this);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"click\", this);\n  }\n\n  handleEvent(e) {\n    if (e.type == \"click\") {\n      if (window.openTrustedLinkIn) {\n        let where = whereToOpenLink(e, false, true);\n        if (where == \"current\") {\n          where = \"tab\";\n        }\n        e.preventDefault();\n        openTrustedLinkIn(this.href, where);\n      }\n    }\n  }\n\n  attributeChangedCallback(attrName) {\n    if (attrName === \"support-page\" || attrName === \"utm-content\") {\n      this.#setHref();\n    }\n  }\n\n  #setHref() {\n    let supportPage = this.getAttribute(\"support-page\") ?? \"\";\n    let base = MozSupportLink.SUPPORT_URL + supportPage;\n    this.href = this.hasAttribute(\"utm-content\")\n      ? formatUTMParams(this.getAttribute(\"utm-content\"), base)\n      : base;\n  }\n}\ncustomElements.define(\"moz-support-link\", MozSupportLink, { extends: \"a\" });\n\n/**\n * Adds UTM parameters to a given URL, if it is an AMO URL.\n *\n * @param {string} contentAttribute\n *        Identifies the part of the UI with which the link is associated.\n * @param {string} url\n * @returns {string}\n *          The url with UTM parameters if it is an AMO URL.\n *          Otherwise the url in unmodified form.\n */\nexport function formatUTMParams(contentAttribute, url) {\n  if (!contentAttribute) {\n    return url;\n  }\n  let parsedUrl = new URL(url);\n  let domain = `.${parsedUrl.hostname}`;\n  if (\n    !domain.endsWith(\".mozilla.org\") &&\n    // For testing: addons-dev.allizom.org and addons.allizom.org\n    !domain.endsWith(\".allizom.org\")\n  ) {\n    return url;\n  }\n\n  parsedUrl.searchParams.set(\"utm_source\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_medium\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_content\", contentAttribute);\n  return parsedUrl.href;\n}\n"],"names":[],"sourceRoot":""}