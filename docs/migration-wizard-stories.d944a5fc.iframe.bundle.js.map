{"version":3,"file":"migration-wizard-stories.d944a5fc.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA8BA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjnBA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC52BA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1ZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACliDA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./stories/migration-wizard.stories.mjs","webpack:///../../../toolkit/content/widgets/panel-list/panel-list.js","webpack:///../../../toolkit/content/widgets/named-deck.js","webpack:///../migration/content/migration-wizard-constants.mjs","webpack:///../migration/content/migration-wizard.mjs","webpack:///../../../toolkit/content/widgets/moz-button-group/moz-button-group.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// Imported for side-effects.\nimport { html } from \"lit.all.mjs\";\nimport \"chrome://global/content/elements/panel-list.js\";\nimport \"browser/components/migration/content/migration-wizard.mjs\";\nimport { MigrationWizardConstants } from \"chrome://browser/content/migration/migration-wizard-constants.mjs\";\n\n// Imported for side-effects.\nimport \"toolkit-widgets/named-deck.js\";\n\nwindow.MozXULElement.insertFTLIfNeeded(\n  \"locales-preview/migrationWizardChromeWindows.ftl\"\n);\n\nexport default {\n  title: \"Domain-specific UI Widgets/Migration Wizard\",\n  component: \"migration-wizard\",\n};\n\nconst FAKE_MIGRATOR_LIST = [\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"chrome\",\n    displayName: \"Chrome\",\n    resourceTypes: [\n      \"HISTORY\",\n      \"FORMDATA\",\n      \"PASSWORDS\",\n      \"BOOKMARKS\",\n      \"PAYMENT_METHODS\",\n      \"EXTENSIONS\",\n    ],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://browser/content/migration/brands/chrome.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"chrome\",\n    displayName: \"Chrome\",\n    resourceTypes: [\n      \"HISTORY\",\n      \"FORMDATA\",\n      \"PASSWORDS\",\n      \"BOOKMARKS\",\n      \"PAYMENT_METHODS\",\n      \"EXTENSIONS\",\n    ],\n    profile: { id: \"person-2\", name: \"Person 2\" },\n    brandImage: \"chrome://browser/content/migration/brands/chrome.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"ie\",\n    displayName: \"Microsoft Internet Explorer\",\n    resourceTypes: [\"HISTORY\", \"BOOKMARKS\"],\n    profile: null,\n    brandImage: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"edge\",\n    displayName: \"Microsoft Edge Legacy\",\n    resourceTypes: [\"HISTORY\", \"FORMDATA\", \"PASSWORDS\", \"BOOKMARKS\"],\n    profile: null,\n    brandImage: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"chromium-edge\",\n    displayName: \"Microsoft Edge\",\n    resourceTypes: [\n      \"HISTORY\",\n      \"FORMDATA\",\n      \"PASSWORDS\",\n      \"BOOKMARKS\",\n      \"PAYMENT_METHODS\",\n    ],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://browser/content/migration/brands/edge.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"brave\",\n    displayName: \"Brave\",\n    resourceTypes: [\n      \"HISTORY\",\n      \"FORMDATA\",\n      \"PASSWORDS\",\n      \"BOOKMARKS\",\n      \"PAYMENT_METHODS\",\n    ],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://browser/content/migration/brands/brave.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"internal-testing\",\n    displayName: \"Internal Testing Migrator\",\n    resourceTypes: [\"HISTORY\", \"PASSWORDS\", \"BOOKMARKS\"],\n    profile: null,\n    brandImage: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"safari\",\n    displayName: \"Safari\",\n    resourceTypes: [\"HISTORY\", \"PASSWORDS\", \"BOOKMARKS\"],\n    profile: null,\n    brandImage: \"chrome://browser/content/migration/brands/safari.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"opera\",\n    displayName: \"Opera\",\n    resourceTypes: [\"HISTORY\", \"FORMDATA\", \"PASSWORDS\", \"BOOKMARKS\"],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://browser/content/migration/brands/opera.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"opera-gx\",\n    displayName: \"Opera GX\",\n    resourceTypes: [\"HISTORY\", \"FORMDATA\", \"PASSWORDS\", \"BOOKMARKS\"],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://browser/content/migration/brands/operagx.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"vivaldi\",\n    displayName: \"Vivaldi\",\n    resourceTypes: [\"HISTORY\"],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://browser/content/migration/brands/vivaldi.png\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n    key: \"no-resources-browser\",\n    displayName: \"Browser with no resources\",\n    resourceTypes: [],\n    profile: { id: \"Default\", name: \"Default\" },\n    brandImage: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.FILE,\n    key: \"file-password-csv\",\n    displayName: \"Passwords from CSV file\",\n    brandImage: \"chrome://branding/content/document.ico\",\n    resourceTypes: [],\n    hasPermissions: true,\n  },\n  {\n    type: MigrationWizardConstants.MIGRATOR_TYPES.FILE,\n    key: \"file-bookmarks\",\n    displayName: \"Bookmarks from file\",\n    brandImage: \"chrome://branding/content/document.ico\",\n    resourceTypes: [],\n    hasPermissions: true,\n  },\n];\n\nconst Template = ({\n  state,\n  dialogMode,\n  forceShowImportAll,\n  hideOptionExpanderSubtitle,\n  optionExpanderTitleString,\n  hideSelectAll,\n  importButtonString,\n  checkboxMarginInline,\n  checkboxMarginBlock,\n  importButtonClass,\n  selectionHeaderString,\n  selectionSubheaderString,\n  dataImportCompleteSuccessString,\n  headerFontSize,\n  headerMarginBlock,\n  headerFontWeight,\n  subheaderFontSize,\n  subheaderMarginBlock,\n  subheaderFontWeight,\n}) => html`\n  <style>\n    @media (prefers-reduced-motion: no-preference) {\n      migration-wizard::part(progress-spinner) {\n        mask: url(./migration/progress-mask.svg);\n      }\n    }\n  </style>\n\n  <div class=\"card card-no-hover\" style=\"width: fit-content\">\n    <migration-wizard\n      ?dialog-mode=${dialogMode}\n      ?force-show-import-all=${forceShowImportAll}\n      ?hide-option-expander-subtitle=${hideOptionExpanderSubtitle}\n      option-expander-title-string=${optionExpanderTitleString}\n      ?hide-select-all=${hideSelectAll}\n      import-button-string=${importButtonString}\n      import-button-class=${importButtonClass}\n      checkbox-margin-inline=${checkboxMarginInline}\n      checkbox-margin-block=${checkboxMarginBlock}\n      selection-header-string=${selectionHeaderString}\n      selection-subheader-string=${selectionSubheaderString}\n      data-import-complete-success-string=${dataImportCompleteSuccessString}\n      header-font-size=${headerFontSize}\n      header-margin-block=${headerMarginBlock}\n      header-font-weight=${headerFontWeight}\n      subheader-font-size=${subheaderFontSize}\n      subheader-margin-block=${subheaderMarginBlock}\n      subheader-font-weight=${subheaderFontWeight}\n      .state=${state}\n    ></migration-wizard>\n  </div>\n`;\n\nexport const LoadingSkeleton = Template.bind({});\nLoadingSkeleton.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.LOADING,\n  },\n};\n\nexport const MainSelectorVariant1 = Template.bind({});\nMainSelectorVariant1.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SELECTION,\n    migrators: FAKE_MIGRATOR_LIST,\n    showImportAll: false,\n  },\n};\n\nexport const MainSelectorVariant2 = Template.bind({});\nMainSelectorVariant2.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SELECTION,\n    migrators: FAKE_MIGRATOR_LIST,\n    showImportAll: true,\n  },\n};\n\nexport const CustomizedSelectionPage = Template.bind({});\nCustomizedSelectionPage.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SELECTION,\n    migrators: FAKE_MIGRATOR_LIST,\n    showImportAll: true,\n  },\n  forceShowImportAll: false,\n  hideOptionExpanderSubtitle: false,\n  hideSelectAll: false,\n  importButtonString: \"Custom Button String\",\n  checkboxMarginInline: \"5px\",\n  checkboxMarginBlock: \"10px\",\n  importButtonClass: \"test-class\",\n  optionExpanderTitleString: \"Options\",\n  selectionHeaderString: \"Custom Header\",\n  selectionSubheaderString: \"Custom Subheader\",\n  dataImportCompleteSuccessString: \"Custom Data Import Success\",\n  headerFontSize: \"24px\",\n  headerMarginBlock: \"0 4px\",\n  headerFontWeight: \"590\",\n  subheaderFontSize: \"13px\",\n  subheaderMarginBlock: \"0 28px\",\n  subheaderFontWeight: \"400\",\n};\n\nexport const NoPermissionMessage = Template.bind({});\nNoPermissionMessage.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SELECTION,\n    migrators: [\n      {\n        type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n        key: \"chromium\",\n        displayName: \"Chromium\",\n        resourceTypes: [],\n        profile: null,\n        brandImage: \"chrome://browser/content/migration/brands/chromium.png\",\n        hasPermissions: false,\n        permissionsPath: \"/home/user/snap/chromium/common/chromium\",\n      },\n      {\n        type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n        key: \"safari\",\n        displayName: \"Safari\",\n        resourceTypes: [\"HISTORY\", \"PASSWORDS\", \"BOOKMARKS\"],\n        profile: null,\n        brandImage: \"chrome://browser/content/migration/brands/safari.png\",\n        hasPermissions: false,\n        permissionsPath: \"/Users/user/Library/Safari\",\n      },\n      {\n        type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n        key: \"vivaldi\",\n        displayName: \"Vivaldi\",\n        resourceTypes: [\"HISTORY\"],\n        profile: { id: \"Default\", name: \"Default\" },\n        brandImage: \"chrome://browser/content/migration/brands/vivaldi.png\",\n        hasPermissions: true,\n      },\n      {\n        type: MigrationWizardConstants.MIGRATOR_TYPES.FILE,\n        key: \"file-password-csv\",\n        displayName: \"Passwords from CSV file\",\n        brandImage: \"chrome://branding/content/document.ico\",\n        resourceTypes: [],\n        hasPermissions: true,\n      },\n      {\n        type: MigrationWizardConstants.MIGRATOR_TYPES.FILE,\n        key: \"file-bookmarks\",\n        displayName: \"Bookmarks from file\",\n        brandImage: \"chrome://branding/content/document.ico\",\n        resourceTypes: [],\n        hasPermissions: true,\n      },\n    ],\n    showImportAll: false,\n  },\n};\n\nexport const Progress = Template.bind({});\nProgress.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.PROGRESS,\n    key: \"chrome\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n    },\n  },\n};\n\nexport const PartialProgress = Template.bind({});\nPartialProgress.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.PROGRESS,\n    key: \"chrome\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 logins and passwords\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"10 extensions\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"Addresses, credit cards, form history\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"6 payment methods\",\n      },\n    },\n  },\n};\n\nexport const Success = Template.bind({});\nSuccess.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.PROGRESS,\n    key: \"chrome\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 bookmarks\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 logins and passwords\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"From the last 180 days\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"1 extension\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"Addresses, credit cards, form history\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"6 payment methods\",\n      },\n    },\n  },\n};\n\nexport const SuccessWithWarnings = Template.bind({});\nSuccessWithWarnings.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.PROGRESS,\n    key: \"chrome\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 bookmarks\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.WARNING,\n        message: \"Something didn't work correctly.\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"From the last 180 days\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"1 extension\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"Addresses, credit cards, form history\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"6 payment methods\",\n      },\n    },\n  },\n};\n\nexport const ExtensionsPartialSuccess = Template.bind({});\nExtensionsPartialSuccess.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.PROGRESS,\n    key: \"chrome\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 bookmarks\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 logins and passwords\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"From the last 180 days\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.INFO,\n        message: \"5 of 10 extensions\",\n        linkText: \"Learn how Firefox matches extensions\",\n        linkURL:\n          \"https://support.mozilla.org/kb/import-data-another-browser#w_import-extensions-from-chrome/\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"Addresses, credit cards, form history\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"6 payment methods\",\n      },\n    },\n  },\n};\n\nexport const ExtensionsImportFailure = Template.bind({});\nExtensionsImportFailure.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.PROGRESS,\n    key: \"chrome\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 bookmarks\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 logins and passwords\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"From the last 180 days\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.WARNING,\n        message: \"No matching extensions\",\n        linkText: \"Browse extensions for Firefox\",\n        linkURL: \"https://addons.mozilla.org/\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"Addresses, credit cards, form history\",\n      },\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"6 payment methods\",\n      },\n    },\n  },\n};\n\nexport const FileImportProgress = Template.bind({});\nFileImportProgress.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.FILE_IMPORT_PROGRESS,\n    title: \"Importing passwords\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_FILE_RESOURCE_TYPES\n        .PASSWORDS_FROM_FILE]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.LOADING,\n      },\n    },\n  },\n};\n\nexport const FileImportSuccess = Template.bind({});\nFileImportSuccess.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.FILE_IMPORT_PROGRESS,\n    title: \"Passwords imported successfully\",\n    progress: {\n      [MigrationWizardConstants.DISPLAYED_FILE_RESOURCE_TYPES.PASSWORDS_NEW]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"2 added\",\n      },\n      [MigrationWizardConstants.DISPLAYED_FILE_RESOURCE_TYPES\n        .PASSWORDS_UPDATED]: {\n        value: MigrationWizardConstants.PROGRESS_VALUE.SUCCESS,\n        message: \"14 updated\",\n      },\n    },\n  },\n};\n\nexport const SafariPermissions = Template.bind({});\nSafariPermissions.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SAFARI_PERMISSION,\n  },\n};\n\nexport const SafariPasswordPermissions = Template.bind({});\nSafariPasswordPermissions.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SAFARI_PASSWORD_PERMISSION,\n  },\n};\n\nexport const ChromeWindowsPasswordPermissions = Template.bind({});\nChromeWindowsPasswordPermissions.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.CHROME_WINDOWS_PASSWORD_PERMISSION,\n  },\n};\n\nexport const NoBrowsersFound = Template.bind({});\nNoBrowsersFound.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.NO_BROWSERS_FOUND,\n    hasFileMigrators: true,\n  },\n};\n\nexport const FileImportError = Template.bind({});\nFileImportError.args = {\n  dialogMode: true,\n  state: {\n    page: MigrationWizardConstants.PAGES.SELECTION,\n    migrators: FAKE_MIGRATOR_LIST,\n    showImportAll: false,\n    migratorKey: \"file-password-csv\",\n    fileImportErrorMessage: \"Some file import error message\",\n  },\n};\n","import __chrome_styles_loader__panelitemStyles from \"toolkit/content/widgets/panel-list/panel-item.css\";\nimport __chrome_styles_loader__panellistStyles from \"toolkit/content/widgets/panel-list/panel-list.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\"use strict\";\n\n{\n  class PanelList extends HTMLElement {\n    static get observedAttributes() {\n      return [\"open\"];\n    }\n\n    static get fragment() {\n      if (!this._template) {\n        let parser = new DOMParser();\n        let cssPath = __chrome_styles_loader__panellistStyles;\n        let doc = parser.parseFromString(\n          `\n          <template>\n            <link rel=\"stylesheet\" href=${cssPath}>\n            <div class=\"arrow top\" role=\"presentation\"></div>\n            <div class=\"list\" role=\"presentation\">\n              <slot></slot>\n            </div>\n            <div class=\"arrow bottom\" role=\"presentation\"></div>\n          </template>\n        `,\n          \"text/html\"\n        );\n        this._template = document.importNode(\n          doc.querySelector(\"template\"),\n          true\n        );\n      }\n      return this._template.content.cloneNode(true);\n    }\n\n    constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n      this.shadowRoot.appendChild(this.constructor.fragment);\n    }\n\n    connectedCallback() {\n      this.setAttribute(\"role\", \"menu\");\n    }\n\n    attributeChangedCallback(name, oldVal, newVal) {\n      if (name == \"open\" && newVal != oldVal) {\n        if (this.open) {\n          this.onShow();\n        } else {\n          this.onHide();\n        }\n      }\n    }\n\n    get open() {\n      return this.hasAttribute(\"open\");\n    }\n\n    set open(val) {\n      this.toggleAttribute(\"open\", val);\n    }\n\n    get stayOpen() {\n      return this.hasAttribute(\"stay-open\");\n    }\n\n    set stayOpen(val) {\n      this.toggleAttribute(\"stay-open\", val);\n    }\n\n    getTargetForEvent(event) {\n      if (!event) {\n        return null;\n      }\n      if (event._savedComposedTarget) {\n        return event._savedComposedTarget;\n      }\n      if (event.composed) {\n        event._savedComposedTarget =\n          event.composedTarget || event.composedPath()[0];\n      }\n      return event._savedComposedTarget || event.target;\n    }\n\n    show(triggeringEvent, target) {\n      this.triggeringEvent = triggeringEvent;\n      this.lastAnchorNode =\n        target || this.getTargetForEvent(this.triggeringEvent);\n\n      this.wasOpenedByKeyboard =\n        triggeringEvent &&\n        (triggeringEvent.inputSource == MouseEvent.MOZ_SOURCE_KEYBOARD ||\n          triggeringEvent.inputSource == MouseEvent.MOZ_SOURCE_UNKNOWN ||\n          triggeringEvent.code == \"ArrowRight\" ||\n          triggeringEvent.code == \"ArrowLeft\");\n      this.open = true;\n\n      if (this.parentIsXULPanel()) {\n        this.toggleAttribute(\"inxulpanel\", true);\n        let panel = this.parentElement;\n        panel.hidden = false;\n        // Bug 1842070 - There appears to be a race here where panel-lists\n        // embedded in XUL panels won't appear during the first call to show()\n        // without waiting for a mix of rAF and another tick of the event\n        // loop.\n        requestAnimationFrame(() => {\n          setTimeout(() => {\n            panel.openPopup(\n              this.lastAnchorNode,\n              \"after_start\",\n              0,\n              0,\n              false,\n              false,\n              this.triggeringEvent\n            );\n          }, 0);\n        });\n      } else {\n        this.toggleAttribute(\"inxulpanel\", false);\n      }\n    }\n\n    hide(triggeringEvent, { force = false } = {}, eventTarget) {\n      // It's possible this is being used in an unprivileged context, in which\n      // case it won't have access to Services / Services will be undeclared.\n      const autohideDisabled = this.hasServices()\n        ? Services.prefs.getBoolPref(\"ui.popup.disable_autohide\", false)\n        : false;\n\n      if (autohideDisabled && !force) {\n        // Don't hide if this wasn't \"forced\" (using escape or click in menu).\n        return;\n      }\n      let openingEvent = this.triggeringEvent;\n      this.triggeringEvent = triggeringEvent;\n      this.open = false;\n\n      if (this.parentIsXULPanel()) {\n        // It's possible that we're being programattically hidden, in which\n        // case, we need to hide the XUL panel we're embedded in. If, however,\n        // we're being hidden because the XUL panel is being hidden, calling\n        // hidePopup again on it is a no-op.\n        let panel = this.parentElement;\n        panel.hidePopup();\n      }\n\n      let target = eventTarget || this.getTargetForEvent(openingEvent);\n      // Refocus the button that opened the menu if we have one.\n      if (target && this.wasOpenedByKeyboard) {\n        target.focus();\n      }\n    }\n\n    toggle(triggeringEvent, target = null) {\n      if (this.open) {\n        this.hide(triggeringEvent, { force: true }, target);\n      } else {\n        this.show(triggeringEvent, target);\n      }\n    }\n\n    hasServices() {\n      // Safely check for Services without throwing a ReferenceError.\n      return typeof Services !== \"undefined\";\n    }\n\n    isDocumentRTL() {\n      if (this.hasServices()) {\n        return Services.locale.isAppLocaleRTL;\n      }\n      return document.dir === \"rtl\";\n    }\n\n    parentIsXULPanel() {\n      const XUL_NS =\n        \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\";\n      return (\n        this.parentElement?.namespaceURI == XUL_NS &&\n        this.parentElement?.localName == \"panel\"\n      );\n    }\n\n    async setAlign() {\n      const hostElement = this.parentElement || this.getRootNode().host;\n\n      if (!hostElement) {\n        // This could get called before we're added to the DOM.\n        // Nothing to do in that case.\n        return;\n      }\n\n      // Set the showing attribute to hide the panel until its alignment is set.\n      this.setAttribute(\"showing\", \"true\");\n      // Tell the host element to hide any overflow in case the panel extends off\n      // the page before the alignment is set.\n      hostElement.style.overflow = \"hidden\";\n\n      // Wait for a layout flush, then find the bounds.\n      let {\n        anchorBottom, // distance from the bottom of the anchor el to top of viewport.\n        anchorLeft,\n        anchorTop,\n        anchorWidth,\n        panelHeight,\n        panelWidth,\n        winHeight,\n        winScrollY,\n        winScrollX,\n        clientWidth,\n      } = await new Promise(resolve => {\n        this.style.left = 0;\n        this.style.top = 0;\n\n        requestAnimationFrame(() =>\n          setTimeout(() => {\n            let target =\n              this.lastAnchorNode ||\n              this.getTargetForEvent(this.triggeringEvent);\n            let anchorElement = target || hostElement;\n            // It's possible this is being used in a context where windowUtils is\n            // not available. In that case, fallback to using the element.\n            let getBounds = el =>\n              window.windowUtils\n                ? window.windowUtils.getBoundsWithoutFlushing(el)\n                : el.getBoundingClientRect();\n            // Use y since top is reserved.\n            let anchorBounds = getBounds(anchorElement);\n            let panelBounds = getBounds(this);\n            let clientWidth = document.scrollingElement.clientWidth;\n            let panelHeight =\n              this.scrollHeight > panelBounds.height\n                ? this.scrollHeight\n                : panelBounds.height;\n\n            resolve({\n              anchorBottom: anchorBounds.bottom,\n              anchorHeight: anchorBounds.height,\n              anchorLeft: anchorBounds.left,\n              anchorTop: anchorBounds.top,\n              anchorWidth: anchorBounds.width,\n              panelHeight,\n              panelWidth: panelBounds.width,\n              winHeight: innerHeight,\n              winScrollX: scrollX,\n              winScrollY: scrollY,\n              clientWidth,\n            });\n          }, 0)\n        );\n      });\n\n      // If we're embedded in a XUL panel, let it handle alignment.\n      if (!this.parentIsXULPanel()) {\n        // Calculate the left/right alignment.\n        let align;\n        let leftOffset;\n        let leftAlignX = anchorLeft;\n        let rightAlignX = anchorLeft + anchorWidth - panelWidth;\n\n        if (this.isDocumentRTL()) {\n          // Prefer aligning on the right.\n          align = rightAlignX < 0 ? \"left\" : \"right\";\n        } else {\n          // Prefer aligning on the left.\n          align = leftAlignX + panelWidth > clientWidth ? \"right\" : \"left\";\n        }\n        leftOffset = align === \"left\" ? leftAlignX : rightAlignX;\n\n        let bottomSpaceY = winHeight - anchorBottom;\n\n        let valign;\n        let topOffset;\n        const VIEWPORT_PANEL_MIN_MARGIN = 10; // 10px ensures that the panel is not flush with the viewport.\n\n        // Only want to valign top when there's more space between the bottom of the anchor element and the top of the viewport.\n        // If there's more space between the bottom of the anchor element and the bottom of the viewport, we valign bottom.\n        if (\n          anchorBottom > bottomSpaceY &&\n          anchorBottom + panelHeight + VIEWPORT_PANEL_MIN_MARGIN > winHeight\n        ) {\n          // Never want to have a negative value for topOffset, so ensure it's at least 10px.\n          topOffset = Math.max(\n            anchorTop - panelHeight,\n            VIEWPORT_PANEL_MIN_MARGIN\n          );\n          // Provide a max-height for larger elements which will provide scrolling as needed.\n          this.style.maxHeight = `${anchorTop + VIEWPORT_PANEL_MIN_MARGIN}px`;\n          valign = \"top\";\n        } else {\n          topOffset = anchorBottom;\n          this.style.maxHeight = `${\n            bottomSpaceY - VIEWPORT_PANEL_MIN_MARGIN\n          }px`;\n          valign = \"bottom\";\n        }\n\n        // Set the alignments and show the panel.\n        this.setAttribute(\"align\", align);\n        this.setAttribute(\"valign\", valign);\n        hostElement.style.overflow = \"\";\n        // Decide positioning based on where this panel will be rendered\n        const offsetParentIsBody =\n          this.offsetParent === document?.body || !this.offsetParent;\n        if (offsetParentIsBody) {\n          // viewport-based\n          this.style.left = `${leftOffset + winScrollX}px`;\n          this.style.top = `${topOffset + winScrollY}px`;\n        } else {\n          // container-relative\n          const offsetParentRect = this.offsetParent.getBoundingClientRect();\n          this.style.left = `${leftOffset - offsetParentRect.left}px`;\n          this.style.top = `${topOffset - offsetParentRect.top}px`;\n        }\n      }\n\n      this.style.minWidth = this.hasAttribute(\"min-width-from-anchor\")\n        ? `${anchorWidth}px`\n        : \"\";\n\n      this.removeAttribute(\"showing\");\n    }\n\n    addHideListeners() {\n      if (this.hasAttribute(\"stay-open\") && !this.lastAnchorNode?.hasSubmenu) {\n        // This is intended for inspection in Storybook.\n        return;\n      }\n      // Hide when a panel-item is clicked in the list.\n      this.addEventListener(\"click\", this);\n      // Allows submenus to stopPropagation when focus is already in the menu\n      this.addEventListener(\"keydown\", this);\n      // We need Escape/Tab/ArrowDown to work when opened with the mouse.\n      document.addEventListener(\"keydown\", this);\n      // Hide when a click is initiated outside the panel.\n      document.addEventListener(\"mousedown\", this);\n      // Hide if focus changes and the panel isn't in focus.\n      document.addEventListener(\"focusin\", this);\n      // Reset or focus tracking, we treat the first focusin differently.\n      this.focusHasChanged = false;\n      // Hide on resize, scroll or losing window focus.\n      window.addEventListener(\"resize\", this);\n      window.addEventListener(\"scroll\", this, { capture: true });\n      window.addEventListener(\"blur\", this);\n      if (this.parentIsXULPanel()) {\n        this.parentElement.addEventListener(\"popuphidden\", this);\n      }\n    }\n\n    removeHideListeners() {\n      this.removeEventListener(\"click\", this);\n      this.removeEventListener(\"keydown\", this);\n      document.removeEventListener(\"keydown\", this);\n      document.removeEventListener(\"mousedown\", this);\n      document.removeEventListener(\"focusin\", this);\n      window.removeEventListener(\"resize\", this);\n      window.removeEventListener(\"scroll\", this, { capture: true });\n      window.removeEventListener(\"blur\", this);\n      if (this.parentIsXULPanel()) {\n        this.parentElement.removeEventListener(\"popuphidden\", this);\n      }\n    }\n\n    handleEvent(e) {\n      // Ignore the event if it caused the panel to open.\n      if (e == this.triggeringEvent) {\n        return;\n      }\n\n      let target = this.getTargetForEvent(e);\n      let inPanelList = e.composed\n        ? e.composedPath().some(el => el == this)\n        : e.target.closest && e.target.closest(\"panel-list\") == this;\n\n      switch (e.type) {\n        case \"resize\":\n        case \"scroll\":\n          if (inPanelList) {\n            break;\n          }\n        // Intentional fall-through\n        case \"blur\":\n        case \"popuphidden\":\n          this.hide();\n          break;\n        case \"click\":\n          if (inPanelList) {\n            this.hide(undefined, { force: true });\n          } else {\n            // Avoid falling through to the default click handler of the parent.\n            e.stopPropagation();\n          }\n          break;\n        case \"mousedown\":\n          // Close if there's a click started outside the panel.\n          if (!inPanelList) {\n            this.hide();\n          }\n          break;\n        case \"keydown\":\n          if (e.key === \"ArrowDown\" || e.key === \"ArrowUp\" || e.key === \"Tab\") {\n            // Ignore tabbing with a modifer other than shift.\n            if (e.key === \"Tab\" && (e.altKey || e.ctrlKey || e.metaKey)) {\n              return;\n            }\n\n            // Don't scroll the page or let the regular tab order take effect.\n            e.preventDefault();\n\n            // Prevents the host panel list from responding to these events while\n            // the submenu is active.\n            e.stopPropagation();\n\n            // Keep moving to the next/previous element sibling until we find a\n            // panel-item that isn't hidden.\n            let moveForward =\n              e.key === \"ArrowDown\" || (e.key === \"Tab\" && !e.shiftKey);\n\n            let nextItem = moveForward\n              ? this.focusWalker.nextNode()\n              : this.focusWalker.previousNode();\n\n            // If the next item wasn't found, try looping to the top/bottom.\n            if (!nextItem) {\n              this.focusWalker.currentNode = this;\n              if (moveForward) {\n                nextItem = this.focusWalker.firstChild();\n              } else {\n                nextItem = this.focusWalker.lastChild();\n              }\n            }\n            break;\n          } else if (e.key === \"Escape\") {\n            this.hide(undefined, { force: true });\n          } else if (!e.metaKey && !e.ctrlKey && !e.shiftKey && !e.altKey) {\n            // Check if any of the children have an accesskey for this letter.\n            let item = this.querySelector(\n              `[accesskey=\"${e.key.toLowerCase()}\"],\n              [accesskey=\"${e.key.toUpperCase()}\"]`\n            );\n            if (item) {\n              item.click();\n            }\n          }\n          break;\n        case \"focusin\":\n          if (\n            this.triggeringEvent &&\n            target == this.getTargetForEvent(this.triggeringEvent) &&\n            !this.focusHasChanged\n          ) {\n            // There will be a focusin after the mousedown that opens the panel\n            // using the mouse. Ignore the first focusin event if it's on the\n            // triggering target.\n            this.focusHasChanged = true;\n          } else {\n            // Just record that there was a focusin event.\n            this.focusHasChanged = true;\n          }\n          break;\n      }\n    }\n\n    /**\n     * A TreeWalker that can be used to focus elements. The returned element will\n     * be the element that has gained focus based on the requested movement\n     * through the tree.\n     *\n     * Example:\n     *\n     *   this.focusWalker.currentNode = this;\n     *   // Focus and get the first focusable child.\n     *   let focused = this.focusWalker.nextNode();\n     *   // Focus the second focusable child.\n     *   this.focusWalker.nextNode();\n     */\n    get focusWalker() {\n      if (!this._focusWalker) {\n        this._focusWalker = document.createTreeWalker(\n          this,\n          NodeFilter.SHOW_ELEMENT,\n          {\n            acceptNode: node => {\n              // No need to look at hidden nodes.\n              if (node.hidden) {\n                return NodeFilter.FILTER_REJECT;\n              }\n\n              // Focus the node, if it worked then this is the node we want.\n              node.focus();\n              if (node === node.getRootNode().activeElement) {\n                return NodeFilter.FILTER_ACCEPT;\n              }\n\n              // Continue into child nodes if the parent couldn't be focused.\n              return NodeFilter.FILTER_SKIP;\n            },\n          }\n        );\n      }\n      return this._focusWalker;\n    }\n    async setSubmenuAlign() {\n      const hostElement =\n        this.lastAnchorNode.parentElement || this.getRootNode().host;\n      // The showing attribute allows layout of the panel while remaining hidden\n      // from the user until alignment is set.\n      this.setAttribute(\"showing\", \"true\");\n\n      // Wait for a layout flush, then find the bounds.\n      let {\n        anchorLeft,\n        anchorWidth,\n        anchorTop,\n        parentPanelTop,\n        panelWidth,\n        clientWidth,\n      } = await new Promise(resolve => {\n        requestAnimationFrame(() => {\n          // It's possible this is being used in a context where windowUtils is\n          // not available. In that case, fallback to using the element.\n          let getBounds = el =>\n            window.windowUtils\n              ? window.windowUtils.getBoundsWithoutFlushing(el)\n              : el.getBoundingClientRect();\n          // submenu item in the parent panel list\n          let anchorBounds = getBounds(this.lastAnchorNode);\n          let parentPanelBounds = getBounds(hostElement);\n          let panelBounds = getBounds(this);\n          let clientWidth = document.scrollingElement.clientWidth;\n\n          resolve({\n            anchorLeft: anchorBounds.left,\n            anchorWidth: anchorBounds.width,\n            anchorTop: anchorBounds.top,\n            parentPanelTop: parentPanelBounds.top,\n            panelWidth: panelBounds.width,\n            clientWidth,\n          });\n        });\n      });\n\n      let align = hostElement.getAttribute(\"align\");\n\n      // we use document.scrollingElement.clientWidth to exclude the width\n      // of vertical scrollbars, because its inclusion can cause the submenu\n      // to open to the wrong side and be overlapped by the scrollbar.\n      if (\n        align == \"left\" &&\n        anchorLeft + anchorWidth + panelWidth < clientWidth\n      ) {\n        this.style.left = `${anchorWidth}px`;\n        this.style.right = \"\";\n      } else {\n        this.style.right = `${anchorWidth}px`;\n        this.style.left = \"\";\n      }\n\n      let topOffset =\n        anchorTop -\n        parentPanelTop -\n        (parseFloat(window.getComputedStyle(this)?.paddingTop) || 0);\n      this.style.top = `${topOffset}px`;\n\n      this.removeAttribute(\"showing\");\n    }\n\n    async onShow() {\n      this.sendEvent(\"showing\");\n      this.addHideListeners();\n\n      if (this.lastAnchorNode?.hasSubmenu) {\n        await this.setSubmenuAlign();\n      } else {\n        await this.setAlign();\n      }\n\n      // Always reset this regardless of how the panel list is opened\n      // so the first child will be focusable.\n      this.focusWalker.currentNode = this;\n\n      // Wait until the next paint for the alignment to be set and panel to be\n      // visible.\n      requestAnimationFrame(() => {\n        if (this.wasOpenedByKeyboard) {\n          // Focus the first focusable panel-item if opened by keyboard.\n          this.focusWalker.nextNode();\n        }\n\n        this.lastAnchorNode?.setAttribute(\"aria-expanded\", \"true\");\n\n        this.sendEvent(\"shown\");\n      });\n    }\n\n    onHide() {\n      requestAnimationFrame(() => {\n        this.sendEvent(\"hidden\");\n        this.lastAnchorNode?.setAttribute(\"aria-expanded\", \"false\");\n      });\n      this.removeHideListeners();\n    }\n\n    sendEvent(name, detail) {\n      this.dispatchEvent(\n        new CustomEvent(name, { detail, bubbles: true, composed: true })\n      );\n    }\n  }\n  customElements.define(\"panel-list\", PanelList);\n\n  class PanelItem extends HTMLElement {\n    #initialized = false;\n    #defaultSlot;\n\n    static get observedAttributes() {\n      return [\"accesskey\", \"type\", \"disabled\"];\n    }\n\n    constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n\n      let style = document.createElement(\"link\");\n      style.rel = \"stylesheet\";\n      style.href = __chrome_styles_loader__panelitemStyles;\n\n      this.button = document.createElement(\"button\");\n      this.#setButtonAttributes();\n\n      this.button.setAttribute(\"part\", \"button\");\n      // Use a XUL label element if possible to show the accesskey.\n      this.label = document.createXULElement\n        ? document.createXULElement(\"label\")\n        : document.createElement(\"span\");\n\n      this.button.appendChild(this.label);\n\n      let supportLinkSlot = document.createElement(\"slot\");\n      supportLinkSlot.name = \"support-link\";\n\n      this.#defaultSlot = document.createElement(\"slot\");\n      this.#defaultSlot.style.display = \"none\";\n\n      this.shadowRoot.append(\n        style,\n        this.button,\n        supportLinkSlot,\n        this.#defaultSlot\n      );\n    }\n\n    connectedCallback() {\n      if (!this._l10nRootConnected && document.l10n) {\n        document.l10n.connectRoot(this.shadowRoot);\n        this._l10nRootConnected = true;\n      }\n\n      this.panel =\n        this.getRootNode()?.host?.closest(\"panel-list\") ||\n        this.closest(\"panel-list\");\n\n      if (!this.#initialized) {\n        this.#initialized = true;\n        // When click listeners are added to the panel-item it creates a node in\n        // the a11y tree for this element. This breaks the association between the\n        // menu and the button[role=\"menuitem\"] in this shadow DOM and causes\n        // announcement issues with screen readers. (bug 995064)\n        this.setAttribute(\"role\", \"presentation\");\n\n        this.#setLabelContents();\n\n        // When our content changes, move the text into the label. It doesn't work\n        // with a <slot>, unfortunately.\n        new MutationObserver(() => this.#setLabelContents()).observe(this, {\n          characterData: true,\n          childList: true,\n          subtree: true,\n        });\n\n        if (this.hasSubmenu) {\n          this.panel.setAttribute(\"has-submenu\", \"\");\n          this.icon = document.createElement(\"div\");\n          this.icon.setAttribute(\"class\", \"submenu-icon\");\n          this.label.setAttribute(\"class\", \"submenu-label\");\n\n          this.button.setAttribute(\"class\", \"submenu-container\");\n          this.button.appendChild(this.icon);\n\n          this.submenuSlot = document.createElement(\"slot\");\n          this.submenuSlot.name = \"submenu\";\n\n          this.shadowRoot.append(this.submenuSlot);\n\n          this.setSubmenuContents();\n        }\n      }\n\n      if (this.panel) {\n        this.panel.addEventListener(\"hidden\", this);\n        this.panel.addEventListener(\"shown\", this);\n      }\n\n      if (this.hasSubmenu) {\n        this.addEventListener(\"mouseenter\", this);\n        this.addEventListener(\"mouseleave\", this);\n        this.addEventListener(\"keydown\", this);\n      }\n    }\n\n    disconnectedCallback() {\n      if (this._l10nRootConnected) {\n        document.l10n.disconnectRoot(this.shadowRoot);\n        this._l10nRootConnected = false;\n      }\n\n      if (this.panel) {\n        this.panel.removeEventListener(\"hidden\", this);\n        this.panel.removeEventListener(\"shown\", this);\n        this.panel = null;\n      }\n\n      if (this.hasSubmenu) {\n        this.removeEventListener(\"mouseenter\", this);\n        this.removeEventListener(\"mouseleave\", this);\n        this.removeEventListener(\"keydown\", this);\n      }\n    }\n\n    get hasSubmenu() {\n      return this.hasAttribute(\"submenu\");\n    }\n\n    attributeChangedCallback(name, oldVal, newVal) {\n      if (name === \"accesskey\") {\n        // Bug 1037709 - Accesskey doesn't work in shadow DOM.\n        // Ideally we'd have the accesskey set in shadow DOM, and on\n        // attributeChangedCallback we'd just update the shadow DOM accesskey.\n\n        // Skip this change event if we caused it.\n        if (this._modifyingAccessKey) {\n          this._modifyingAccessKey = false;\n          return;\n        }\n\n        this.label.accessKey = newVal || \"\";\n\n        // Bug 1588156 - Accesskey is not ignored for hidden non-input elements.\n        // Since the accesskey won't be ignored, we need to remove it ourselves\n        // when the panel is closed, and move it back when it opens.\n        if (!this.panel || !this.panel.open) {\n          // When the panel isn't open, just store the key for later.\n          this._accessKey = newVal || null;\n          this._modifyingAccessKey = true;\n          this.accessKey = \"\";\n        } else {\n          this._accessKey = null;\n        }\n      } else if (name === \"type\" || name === \"disabled\") {\n        this.#setButtonAttributes();\n      }\n    }\n\n    #setButtonAttributes() {\n      if (this.type == \"checkbox\") {\n        this.button.setAttribute(\"role\", \"menuitemcheckbox\");\n        this.button.setAttribute(\"aria-checked\", this.checked);\n      } else {\n        this.button.setAttribute(\"role\", \"menuitem\");\n        this.button.removeAttribute(\"aria-checked\");\n      }\n      this.button.toggleAttribute(\"disabled\", this.disabled);\n    }\n\n    #setLabelContents() {\n      this.label.textContent = this.#defaultSlot\n        .assignedNodes()\n        .map(node => node.textContent)\n        .join(\"\");\n    }\n\n    setSubmenuContents() {\n      this.submenuPanel = this.submenuSlot.assignedNodes()[0];\n      if (this.submenuPanel) {\n        this.shadowRoot.append(this.submenuPanel);\n      }\n    }\n\n    get disabled() {\n      return this.hasAttribute(\"disabled\");\n    }\n\n    set disabled(val) {\n      this.toggleAttribute(\"disabled\", val);\n    }\n\n    get checked() {\n      if (this.type !== \"checkbox\") {\n        return false;\n      }\n      return this.hasAttribute(\"checked\");\n    }\n\n    set checked(val) {\n      if (this.type == \"checkbox\") {\n        this.toggleAttribute(\"checked\", val);\n        this.button.setAttribute(\"aria-checked\", !!val);\n      }\n    }\n\n    get type() {\n      return this.getAttribute(\"type\") || \"button\";\n    }\n\n    set type(val) {\n      this.setAttribute(\"type\", val);\n    }\n\n    focus() {\n      this.button.focus();\n    }\n\n    setArrowKeyRTL() {\n      let arrowOpenKey = \"ArrowRight\";\n      let arrowCloseKey = \"ArrowLeft\";\n\n      if (this.submenuPanel.isDocumentRTL()) {\n        arrowOpenKey = \"ArrowLeft\";\n        arrowCloseKey = \"ArrowRight\";\n      }\n      return [arrowOpenKey, arrowCloseKey];\n    }\n\n    handleEvent(e) {\n      // Bug 1588156 - Accesskey is not ignored for hidden non-input elements.\n      // Since the accesskey won't be ignored, we need to remove it ourselves\n      // when the panel is closed, and move it back when it opens.\n      switch (e.type) {\n        case \"shown\":\n          if (this._accessKey) {\n            this.accessKey = this._accessKey;\n            this._accessKey = null;\n          }\n          break;\n        case \"hidden\":\n          if (this.accessKey) {\n            this._accessKey = this.accessKey;\n            this._modifyingAccessKey = true;\n            this.accessKey = \"\";\n          }\n          break;\n        case \"mouseenter\":\n        case \"mouseleave\":\n          this.submenuPanel.toggle(e);\n          break;\n        case \"keydown\": {\n          let [arrowOpenKey, arrowCloseKey] = this.setArrowKeyRTL();\n          if (e.key === arrowOpenKey) {\n            this.submenuPanel.show(e, e.target);\n            e.stopPropagation();\n          }\n          if (e.key === arrowCloseKey) {\n            this.submenuPanel.hide(e, { force: true }, e.target);\n            e.stopPropagation();\n          }\n          break;\n        }\n      }\n    }\n  }\n  customElements.define(\"panel-item\", PanelItem);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\"use strict\";\n\n// This is loaded into chrome windows with the subscript loader. Wrap in\n// a block to prevent accidentally leaking globals onto `window`.\n{\n  /**\n   * This element is for use with the <named-deck> element. Set the target\n   * <named-deck>'s ID in the \"deck\" attribute and the button's selected state\n   * will reflect the deck's state. When the button is clicked, it will set the\n   * view in the <named-deck> to the button's \"name\" attribute.\n   *\n   * The \"tab\" role will be added unless a different role is provided. Wrapping\n   * a set of these buttons in a <button-group> element will add the key handling\n   * for a tablist.\n   *\n   * NOTE: This does not observe changes to the \"deck\" or \"name\" attributes, so\n   * changing them likely won't work properly.\n   *\n   * <button is=\"named-deck-button\" deck=\"pet-deck\" name=\"dogs\">Dogs</button>\n   * <named-deck id=\"pet-deck\">\n   *   <p name=\"cats\">I like cats.</p>\n   *   <p name=\"dogs\">I like dogs.</p>\n   * </named-deck>\n   *\n   * let btn = document.querySelector('button[name=\"dogs\"]');\n   * let deck = document.querySelector(\"named-deck\");\n   * deck.selectedViewName == \"cats\";\n   * btn.selected == false; // Selected was pulled from the related deck.\n   * btn.click();\n   * deck.selectedViewName == \"dogs\";\n   * btn.selected == true; // Selected updated when view changed.\n   */\n  class NamedDeckButton extends HTMLButtonElement {\n    connectedCallback() {\n      this._rootNode = this.getRootNode();\n      this.id = `${this.deckId}-button-${this.name}`;\n      if (!this.hasAttribute(\"role\")) {\n        this.setAttribute(\"role\", \"tab\");\n      }\n      this.setSelectedFromDeck();\n      this.addEventListener(\"click\", this);\n      this._rootNode.addEventListener(\"view-changed\", this, {\n        capture: true,\n      });\n    }\n\n    disconnectedCallback() {\n      this.removeEventListener(\"click\", this);\n      this._rootNode.removeEventListener(\"view-changed\", this, {\n        capture: true,\n      });\n      this._rootNode = null;\n    }\n\n    attributeChangedCallback(name, oldVal, newVal) {\n      if (name == \"selected\") {\n        this.selected = newVal;\n      }\n    }\n\n    get deckId() {\n      return this.getAttribute(\"deck\");\n    }\n\n    set deckId(val) {\n      this.setAttribute(\"deck\", val);\n    }\n\n    get deck() {\n      return this._rootNode.querySelector(`#${this.deckId}`);\n    }\n\n    handleEvent(e) {\n      if (e.type == \"view-changed\" && e.target.id == this.deckId) {\n        this.setSelectedFromDeck();\n      } else if (e.type == \"click\") {\n        let { deck } = this;\n        if (deck) {\n          deck.selectedViewName = this.name;\n        }\n      }\n    }\n\n    get name() {\n      return this.getAttribute(\"name\");\n    }\n\n    get selected() {\n      return this.hasAttribute(\"selected\");\n    }\n\n    set selected(val) {\n      if (this.selected != val) {\n        this.toggleAttribute(\"selected\", val);\n      }\n      this.setAttribute(\"aria-selected\", !!val);\n    }\n\n    setSelectedFromDeck() {\n      let { deck } = this;\n      this.selected = deck && deck.selectedViewName == this.name;\n      if (this.selected) {\n        this.dispatchEvent(\n          new CustomEvent(\"button-group:selected\", { bubbles: true })\n        );\n      }\n    }\n  }\n  customElements.define(\"named-deck-button\", NamedDeckButton, {\n    extends: \"button\",\n  });\n\n  class ButtonGroup extends HTMLElement {\n    static get observedAttributes() {\n      return [\"orientation\"];\n    }\n\n    connectedCallback() {\n      this._rootNode = this.getRootNode();\n      this.setAttribute(\"role\", \"tablist\");\n\n      if (!this.observer) {\n        this.observer = new MutationObserver(changes => {\n          for (let change of changes) {\n            this.setChildAttributes(change.addedNodes);\n            for (let node of change.removedNodes) {\n              if (this.activeChild == node) {\n                // Ensure there's still an active child.\n                this.activeChild = this.firstElementChild;\n              }\n            }\n            for (let node of change.addedNodes) {\n              if (!this.activeChild) {\n                this.activeChild = node;\n              }\n            }\n          }\n        });\n      }\n      this.observer.observe(this, { childList: true });\n\n      // Set the role and tabindex for the current children.\n      this.setChildAttributes(this.children);\n\n      // Try assigning the active child again, this will run through the checks\n      // to ensure it's still valid.\n      this.activeChild = this._activeChild;\n\n      this.addEventListener(\"button-group:selected\", this);\n      this.addEventListener(\"keydown\", this);\n      this.addEventListener(\"mousedown\", this);\n      this._rootNode.addEventListener(\"keypress\", this);\n    }\n\n    disconnectedCallback() {\n      this.observer.disconnect();\n      this.removeEventListener(\"button-group:selected\", this);\n      this.removeEventListener(\"keydown\", this);\n      this.removeEventListener(\"mousedown\", this);\n      this._rootNode.removeEventListener(\"keypress\", this);\n      this._rootNode = null;\n    }\n\n    attributeChangedCallback(name) {\n      if (name == \"orientation\") {\n        if (this.isVertical) {\n          this.setAttribute(\"aria-orientation\", this.orientation);\n        } else {\n          this.removeAttribute(\"aria-orientation\");\n        }\n      }\n    }\n\n    setChildAttributes(nodes) {\n      for (let node of nodes) {\n        if (node.nodeType == Node.ELEMENT_NODE && node != this.activeChild) {\n          node.setAttribute(\"tabindex\", \"-1\");\n        }\n      }\n    }\n\n    // The activeChild is the child that can be focused with tab.\n    get activeChild() {\n      return this._activeChild;\n    }\n\n    set activeChild(node) {\n      let prevActiveChild = this._activeChild;\n      let newActiveChild;\n\n      if (node && this.contains(node)) {\n        newActiveChild = node;\n      } else {\n        newActiveChild = this.firstElementChild;\n      }\n\n      if (!(newActiveChild instanceof Element)) {\n        return;\n      }\n\n      this._activeChild = newActiveChild;\n\n      if (newActiveChild) {\n        newActiveChild.setAttribute(\"tabindex\", \"0\");\n      }\n\n      if (prevActiveChild && prevActiveChild != newActiveChild) {\n        prevActiveChild.setAttribute(\"tabindex\", \"-1\");\n      }\n    }\n\n    get isVertical() {\n      return this.orientation == \"vertical\";\n    }\n\n    get orientation() {\n      return this.getAttribute(\"orientation\") == \"vertical\"\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    set orientation(val) {\n      if (val == \"vertical\") {\n        this.setAttribute(\"orientation\", val);\n      } else {\n        this.removeAttribute(\"orientation\");\n      }\n    }\n\n    _navigationKeys() {\n      if (this.isVertical) {\n        return {\n          previousKey: \"ArrowUp\",\n          nextKey: \"ArrowDown\",\n        };\n      }\n      if (document.dir == \"rtl\") {\n        return {\n          previousKey: \"ArrowRight\",\n          nextKey: \"ArrowLeft\",\n        };\n      }\n      return {\n        previousKey: \"ArrowLeft\",\n        nextKey: \"ArrowRight\",\n      };\n    }\n\n    handleEvent(e) {\n      let { previousKey, nextKey } = this._navigationKeys();\n      if (e.type == \"keydown\" && (e.key == previousKey || e.key == nextKey)) {\n        this.setAttribute(\"last-input-type\", \"keyboard\");\n        e.preventDefault();\n        let oldFocus = this.activeChild;\n        this.walker.currentNode = oldFocus;\n        let newFocus;\n        if (e.key == previousKey) {\n          newFocus = this.walker.previousNode();\n        } else {\n          newFocus = this.walker.nextNode();\n        }\n        if (newFocus) {\n          this.activeChild = newFocus;\n          this.dispatchEvent(new CustomEvent(\"button-group:key-selected\"));\n        }\n      } else if (e.type == \"button-group:selected\") {\n        this.activeChild = e.target;\n      } else if (e.type == \"mousedown\") {\n        this.setAttribute(\"last-input-type\", \"mouse\");\n      } else if (e.type == \"keypress\" && e.key == \"Tab\") {\n        this.setAttribute(\"last-input-type\", \"keyboard\");\n      }\n    }\n\n    get walker() {\n      if (!this._walker) {\n        this._walker = document.createTreeWalker(\n          this,\n          NodeFilter.SHOW_ELEMENT,\n          {\n            acceptNode: node => {\n              if (node.hidden || node.disabled) {\n                return NodeFilter.FILTER_REJECT;\n              }\n              node.focus();\n              return this._rootNode.activeElement == node\n                ? NodeFilter.FILTER_ACCEPT\n                : NodeFilter.FILTER_REJECT;\n            },\n          }\n        );\n      }\n      return this._walker;\n    }\n  }\n  customElements.define(\"button-group\", ButtonGroup);\n\n  /**\n   * A deck that is indexed by the \"name\" attribute of its children. The\n   * <named-deck-button> element is a companion element that can update its state\n   * and change the view of a <named-deck>.\n   *\n   * When the deck is connected it will set the first child as the selected view\n   * if a view is not already selected.\n   *\n   * The deck is implemented using a named slot. Setting a slot directly on a\n   * child element of the deck is not supported.\n   *\n   * You can get or set the selected view by name with the `selectedViewName`\n   * property or by setting the \"selected-view\" attribute.\n   *\n   * <named-deck>\n   *   <section name=\"cats\">Some info about cats.</section>\n   *   <section name=\"dogs\">Some dog stuff.</section>\n   * </named-deck>\n   *\n   * let deck = document.querySelector(\"named-deck\");\n   * deck.selectedViewName == \"cats\"; // Cat info is shown.\n   * deck.selectedViewName = \"dogs\";\n   * deck.selectedViewName == \"dogs\"; // Dog stuff is shown.\n   * deck.setAttribute(\"selected-view\", \"cats\");\n   * deck.selectedViewName == \"cats\"; // Cat info is shown.\n   *\n   * Add the is-tabbed attribute to <named-deck> if you want\n   * each of its children to have a tabpanel role and aria-labelledby\n   * referencing the NamedDeckButton component.\n   */\n  class NamedDeck extends HTMLElement {\n    static get observedAttributes() {\n      return [\"selected-view\"];\n    }\n\n    constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n\n      // Create a slot for the visible content.\n      let selectedSlot = document.createElement(\"slot\");\n      selectedSlot.setAttribute(\"name\", \"selected\");\n      this.shadowRoot.appendChild(selectedSlot);\n\n      this.observer = new MutationObserver(() => {\n        this._setSelectedViewAttributes();\n      });\n    }\n\n    connectedCallback() {\n      if (this.selectedViewName) {\n        // Make sure the selected view is shown.\n        this._setSelectedViewAttributes();\n      } else {\n        // If there's no selected view, default to the first.\n        let firstView = this.firstElementChild;\n        if (firstView) {\n          // This will trigger showing the first view.\n          this.selectedViewName = firstView.getAttribute(\"name\");\n        }\n      }\n      this.observer.observe(this, { childList: true });\n    }\n\n    disconnectedCallback() {\n      this.observer.disconnect();\n    }\n\n    attributeChangedCallback(attr, oldVal, newVal) {\n      if (attr == \"selected-view\" && oldVal != newVal) {\n        // Update the slot attribute on the views.\n        this._setSelectedViewAttributes();\n\n        // Notify that the selected view changed.\n        this.dispatchEvent(new CustomEvent(\"view-changed\"));\n      }\n    }\n\n    get selectedViewName() {\n      return this.getAttribute(\"selected-view\");\n    }\n\n    set selectedViewName(name) {\n      this.setAttribute(\"selected-view\", name);\n    }\n\n    /**\n     * Set the slot attribute on all of the views to ensure only the selected view\n     * is shown.\n     */\n    _setSelectedViewAttributes() {\n      let { selectedViewName } = this;\n      for (let view of this.children) {\n        let name = view.getAttribute(\"name\");\n\n        if (this.hasAttribute(\"is-tabbed\")) {\n          view.setAttribute(\"aria-labelledby\", `${this.id}-button-${name}`);\n          view.setAttribute(\"role\", \"tabpanel\");\n        }\n\n        if (name === selectedViewName) {\n          view.slot = \"selected\";\n        } else {\n          view.slot = \"\";\n        }\n      }\n    }\n  }\n  customElements.define(\"named-deck\", NamedDeck);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nexport const MigrationWizardConstants = Object.freeze({\n  MIGRATOR_TYPES: Object.freeze({\n    BROWSER: \"browser\",\n    FILE: \"file\",\n  }),\n\n  /**\n   * A mapping of a page identification string to the IDs used by the\n   * various wizard pages. These are used by MigrationWizard.setState\n   * to set the current page.\n   */\n  PAGES: Object.freeze({\n    LOADING: \"loading\",\n    SELECTION: \"selection\",\n    PROGRESS: \"progress\",\n    FILE_IMPORT_PROGRESS: \"file-import-progress\",\n    SAFARI_PERMISSION: \"safari-permission\",\n    SAFARI_PASSWORD_PERMISSION: \"safari-password-permission\",\n    CHROME_WINDOWS_PASSWORD_PERMISSION: \"chrome-windows-password-permission\",\n    NO_BROWSERS_FOUND: \"no-browsers-found\",\n  }),\n\n  /**\n   * A mapping of a progress value string. These are used by\n   * MigrationWizard.#onShowingProgress to update the UI accordingly.\n   */\n  PROGRESS_VALUE: Object.freeze({\n    LOADING: 1,\n    SUCCESS: 2,\n    WARNING: 3,\n    INFO: 4,\n  }),\n\n  /**\n   * Returns a mapping of a resource type to a string used to identify\n   * the associated resource group in the wizard via a data-resource-type\n   * attribute. The keys are used to set which items should be shown and\n   * in what state in #onShowingProgress.\n   */\n  DISPLAYED_RESOURCE_TYPES: Object.freeze({\n    // The DISPLAYED_RESOURCE_TYPES should have their keys match those\n    // in MigrationUtils.resourceTypes.\n\n    // This is a little silly, but JavaScript doesn't have a notion of\n    // enums. The advantage of this set-up is that these constants values\n    // can be used to access the MigrationUtils.resourceTypes constants,\n    // are reasonably readable as DOM attributes, and easily serialize /\n    // deserialize.\n    HISTORY: \"HISTORY\",\n    FORMDATA: \"FORMDATA\",\n    PASSWORDS: \"PASSWORDS\",\n    BOOKMARKS: \"BOOKMARKS\",\n    PAYMENT_METHODS: \"PAYMENT_METHODS\",\n    EXTENSIONS: \"EXTENSIONS\",\n\n    COOKIES: \"COOKIES\",\n    SESSION: \"SESSION\",\n    OTHERDATA: \"OTHERDATA\",\n  }),\n\n  DISPLAYED_FILE_RESOURCE_TYPES: Object.freeze({\n    // When migrating passwords from a file, we first show the progress\n    // for a single PASSWORDS_FROM_FILE resource type, and then upon\n    // completion, show two different resource types - one for new\n    // passwords imported from the file, and one for existing passwords\n    // that were updated from the file.\n    PASSWORDS_FROM_FILE: \"PASSWORDS_FROM_FILE\",\n    PASSWORDS_NEW: \"PASSWORDS_NEW\",\n    PASSWORDS_UPDATED: \"PASSWORDS_UPDATED\",\n    BOOKMARKS_FROM_FILE: \"BOOKMARKS_FROM_FILE\",\n  }),\n\n  /**\n   * Returns a mapping of a resource type to a string used to identify\n   * the associated resource group in the wizard via a data-resource-type\n   * attribute. The keys are for resource types that are only ever shown\n   * for profile resets.\n   */\n  PROFILE_RESET_ONLY_RESOURCE_TYPES: Object.freeze({\n    COOKIES: \"COOKIES\",\n    SESSION: \"SESSION\",\n    OTHERDATA: \"OTHERDATA\",\n  }),\n\n  /**\n   * The set of keys that maps to migrators that use the term \"favorites\"\n   * in the place of \"bookmarks\". This tends to be browsers from Microsoft.\n   */\n  USES_FAVORITES: Object.freeze([\n    \"chromium-edge\",\n    \"chromium-edge-beta\",\n    \"edge\",\n    \"ie\",\n  ]),\n\n  /**\n   * The values that are set on the extension extra key for the\n   * migration_finished telemetry event. The definition of that event\n   * defines it as:\n   *\n   * \"3\" if all extensions were matched after import. \"2\" if only some\n   * extensions were matched. \"1\" if none were matched, and \"0\" if extensions\n   * weren't selected for import.\n   */\n  EXTENSIONS_IMPORT_RESULT: Object.freeze({\n    NOT_IMPORTED: \"0\",\n    NONE_MATCHED: \"1\",\n    PARTIAL_MATCH: \"2\",\n    ALL_MATCHED: \"3\",\n  }),\n});\n","import __chrome_styles_loader__migrationwizardStyles from \"browser/themes/shared/migration/migration-wizard.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-button-group.mjs\";\nimport { MigrationWizardConstants } from \"chrome://browser/content/migration/migration-wizard-constants.mjs\";\n\n/**\n * This component contains the UI that steps users through migrating their\n * data from other browsers to this one. This component only contains very\n * basic logic and structure for the UI, and most of the state management\n * occurs in the MigrationWizardChild JSWindowActor.\n */\nexport class MigrationWizard extends HTMLElement {\n  static #template = null;\n\n  #deck = null;\n  #browserProfileSelector = null;\n  #browserProfileSelectorList = null;\n  #resourceTypeList = null;\n  #shadowRoot = null;\n  #importButton = null;\n  #importFromFileButton = null;\n  #chooseImportFromFile = null;\n  #getPermissionsButton = null;\n  #safariPermissionButton = null;\n  #selectAllCheckbox = null;\n  #resourceSummary = null;\n  #expandedDetails = false;\n  #extensionsSuccessLink = null;\n  #supportTextLinks = null;\n\n  static get markup() {\n    return `\n      <template>\n        <link rel=\"stylesheet\" href=\"${__chrome_styles_loader__migrationwizardStyles}\">\n        <named-deck id=\"wizard-deck\" selected-view=\"page-loading\" aria-busy=\"true\" part=\"deck\">\n          <div name=\"page-loading\">\n            <h1 class=\"migration-wizard-header\" data-l10n-id=\"migration-wizard-selection-header\" part=\"header\"></h1>\n            <div class=\"loading-block large\"></div>\n            <div class=\"loading-block small\"></div>\n            <div class=\"loading-block small\"></div>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <!-- If possible, use the same button labels as the SELECTION page with the same strings.\n                   That'll prevent flicker when the load state exits if we then enter the SELECTION page. -->\n              <button class=\"cancel-close\" data-l10n-id=\"migration-cancel-button-label\" disabled></button>\n              <button class=\"migration-import-button\" data-l10n-id=\"migration-import-button-label\" disabled></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-selection\">\n            <h1 class=\"migration-wizard-header\" data-l10n-id=\"migration-wizard-selection-header\" part=\"header\"></h1>\n            <p class=\"migration-wizard-subheader\" part=\"subheader\" hidden=\"\"></p>\n            <button id=\"browser-profile-selector\" aria-haspopup=\"menu\" aria-labelledby=\"migrator-name profile-name\">\n              <span class=\"migrator-icon\" role=\"presentation\"></span>\n              <div class=\"migrator-description\" role=\"presentation\">\n                <div id=\"migrator-name\">&nbsp;</div>\n                <div id=\"profile-name\" class=\"text-deemphasized\"></div>\n              </div>\n              <span class=\"dropdown-icon\" role=\"presentation\"></span>\n            </button>\n            <div class=\"no-resources-found error-message\">\n              <span class=\"error-icon\" role=\"img\"></span>\n              <div data-l10n-id=\"migration-wizard-import-browser-no-resources\"></div>\n            </div>\n\n            <div class=\"no-permissions-message\">\n              <p data-l10n-id=\"migration-no-permissions-message\">\n              </p>\n              <p data-l10n-id=\"migration-no-permissions-instructions\">\n              </p>\n              <ol>\n                <li data-l10n-id=\"migration-no-permissions-instructions-step1\"></li>\n                <li class=\"migration-no-permissions-instructions-step2\" data-l10n-id=\"migration-no-permissions-instructions-step2\" data-l10n-args='{\"permissionsPath\": \"\" }'>\n                  <code></code>\n                </li>\n              </ol>\n            </div>\n\n            <div data-l10n-id=\"migration-wizard-selection-list\" class=\"resource-selection-preamble text-deemphasized hide-on-error\"></div>\n            <details class=\"resource-selection-details hide-on-error\">\n              <summary id=\"resource-selection-summary\">\n                <div class=\"selected-data-header\" data-l10n-id=\"migration-all-available-data-label\"></div>\n                <div class=\"selected-data text-deemphasized\">&nbsp;</div>\n                <span class=\"expand-collapse-icon\" role=\"img\"></span>\n              </summary>\n              <fieldset id=\"resource-type-list\">\n                <label id=\"select-all\">\n                  <input type=\"checkbox\" class=\"select-all-checkbox\"/><span data-l10n-id=\"migration-select-all-option-label\"></span>\n                </label>\n                <label id=\"bookmarks\" class=\"resource-type-label\" data-resource-type=\"BOOKMARKS\"/>\n                  <input type=\"checkbox\"/><span default-data-l10n-id=\"migration-bookmarks-option-label\" ie-edge-data-l10n-id=\"migration-favorites-option-label\"></span>\n                </label>\n                <label id=\"logins-and-passwords\" class=\"resource-type-label\" data-resource-type=\"PASSWORDS\">\n                  <input type=\"checkbox\"/><span data-l10n-id=\"migration-passwords-option-label\"></span>\n                </label>\n                <label id=\"history\" class=\"resource-type-label\" data-resource-type=\"HISTORY\">\n                  <input type=\"checkbox\"/><span data-l10n-id=\"migration-history-option-label\"></span>\n                </label>\n                <label id=\"extensions\" class=\"resource-type-label\" data-resource-type=\"EXTENSIONS\">\n                  <input type=\"checkbox\"/><span data-l10n-id=\"migration-extensions-option-label\"></span>\n                </label>\n                <label id=\"form-autofill\" class=\"resource-type-label\" data-resource-type=\"FORMDATA\">\n                  <input type=\"checkbox\"/><span data-l10n-id=\"migration-form-autofill-option-label\"></span>\n                </label>\n                <label id=\"payment-methods\" class=\"resource-type-label\" data-resource-type=\"PAYMENT_METHODS\">\n                  <input type=\"checkbox\"/><span data-l10n-id=\"migration-payment-methods-option-label\"></span>\n                </label>\n              </fieldset>\n            </details>\n\n            <div class=\"file-import-error error-message\">\n              <span class=\"error-icon\" role=\"img\"></span>\n              <div id=\"file-import-error-message\"></div>\n            </div>\n\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"cancel-close\" data-l10n-id=\"migration-cancel-button-label\"></button>\n              <button id=\"import-from-file\" class=\"primary\" data-l10n-id=\"migration-import-from-file-button-label\"></button>\n              <button id=\"import\" class=\"primary migration-import-button\" data-l10n-id=\"migration-import-button-label\"></button>\n              <button id=\"get-permissions\" class=\"primary\" data-l10n-id=\"migration-continue-button-label\"></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-progress\">\n            <h1 id=\"progress-header\" data-l10n-id=\"migration-wizard-progress-header\" part=\"header\"></h1>\n            <div class=\"resource-progress\">\n              <div data-resource-type=\"BOOKMARKS\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span default-data-l10n-id=\"migration-bookmarks-option-label\" ie-edge-data-l10n-id=\"migration-favorites-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"PASSWORDS\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-passwords-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"HISTORY\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-history-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"EXTENSIONS\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-extensions-option-label\"></span>\n                <a id=\"extensions-success-link\" href=\"about:addons\" class=\"message-text text-deemphasized\"></a>\n                <span class=\"message-text text-deemphasized\"></span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"FORMDATA\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-form-autofill-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"PAYMENT_METHODS\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-payment-methods-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"COOKIES\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-cookies-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"SESSION\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-session-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n\n              <div data-resource-type=\"OTHERDATA\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-otherdata-option-label\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n                <a class=\"support-text text-deemphasized\"></a>\n              </div>\n            </div>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"cancel-close\" data-l10n-id=\"migration-cancel-button-label\" disabled></button>\n              <button class=\"primary finish-button done-button\" data-l10n-id=\"migration-done-button-label\"></button>\n              <button class=\"primary finish-button continue-button\" data-l10n-id=\"migration-continue-button-label\"></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-file-import-progress\">\n            <h1 id=\"file-import-progress-header\"part=\"header\"></h1>\n            <div class=\"resource-progress\">\n              <div data-resource-type=\"PASSWORDS_FROM_FILE\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-passwords-from-file\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n              </div>\n\n              <div data-resource-type=\"PASSWORDS_NEW\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-passwords-new\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n              </div>\n\n              <div data-resource-type=\"PASSWORDS_UPDATED\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-passwords-updated\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n              </div>\n\n              <div data-resource-type=\"BOOKMARKS_FROM_FILE\" class=\"resource-progress-group\">\n                <span class=\"progress-icon-parent\"><span class=\"progress-icon\" role=\"img\"></span></span>\n                <span data-l10n-id=\"migration-bookmarks-from-file\"></span>\n                <span class=\"message-text text-deemphasized\">&nbsp;</span>\n              </div>\n            </div>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"cancel-close\" data-l10n-id=\"migration-cancel-button-label\" disabled></button>\n              <button class=\"primary finish-button done-button\" data-l10n-id=\"migration-done-button-label\"></button>\n              <button class=\"primary finish-button continue-button\" data-l10n-id=\"migration-continue-button-label\"></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-safari-password-permission\">\n            <h1 data-l10n-id=\"migration-safari-password-import-header\" part=\"header\"></h1>\n            <span data-l10n-id=\"migration-safari-password-import-steps-header\"></span>\n            <ol>\n              <li data-l10n-id=\"migration-safari-password-import-step1\"></li>\n              <li data-l10n-id=\"migration-safari-password-import-step2\"><img class=\"safari-icon-3dots\" data-l10n-name=\"safari-icon-3dots\"/></li>\n              <li data-l10n-id=\"migration-safari-password-import-step3\"></li>\n              <li class=\"safari-icons-group\">\n                <span data-l10n-id=\"migration-safari-password-import-step4\"></span>\n                <span class=\"page-portrait-icon\"></span>\n              </li>\n            </ol>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"manual-password-import-skip\" data-l10n-id=\"migration-manual-password-import-skip-button\"></button>\n              <button class=\"manual-password-import-select primary\" data-l10n-id=\"migration-manual-password-import-select-button\"></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-chrome-windows-password-permission\">\n            <h1 data-l10n-id=\"migration-chrome-windows-password-import-header\" part=\"header\"></h1>\n            <span data-l10n-id=\"migration-chrome-windows-password-import-steps-header\"></span>\n            <ol>\n              <li data-l10n-id=\"migration-chrome-windows-password-import-step1\"><img class=\"chrome-icon-3dots\" data-l10n-name=\"chrome-icon-3dots\"/></li>\n              <li data-l10n-id=\"migration-chrome-windows-password-import-step2\"></li>\n              <li data-l10n-id=\"migration-chrome-windows-password-import-step3\"></li>\n            </ol>\n            <p>\n              <span data-l10n-id=\"migration-chrome-windows-password-import-step4\"></span>\n            </p>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"manual-password-import-skip\" data-l10n-id=\"migration-manual-password-import-skip-button\"></button>\n              <button class=\"manual-password-import-select primary\" data-l10n-id=\"migration-manual-password-import-select-button\"></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-safari-permission\">\n            <h1 data-l10n-id=\"migration-wizard-selection-header\" part=\"header\"></h1>\n            <div data-l10n-id=\"migration-wizard-safari-permissions-sub-header\"></div>\n            <ol>\n              <li data-l10n-id=\"migration-wizard-safari-instructions-continue\"></li>\n              <li data-l10n-id=\"migration-wizard-safari-instructions-folder\"></li>\n            </ol>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"cancel-close\" data-l10n-id=\"migration-cancel-button-label\"></button>\n              <button id=\"safari-request-permissions\" class=\"primary\" data-l10n-id=\"migration-continue-button-label\"></button>\n            </moz-button-group>\n          </div>\n\n          <div name=\"page-no-browsers-found\">\n            <h1 data-l10n-id=\"migration-wizard-selection-header\" part=\"header\"></h1>\n            <div class=\"no-browsers-found error-message\">\n              <span class=\"error-icon\" role=\"img\"></span>\n              <div class=\"no-browsers-found-message\" data-l10n-id=\"migration-wizard-import-browser-no-browsers\"></div>\n            </div>\n            <moz-button-group class=\"buttons\" part=\"buttons\">\n              <button class=\"cancel-close\" data-l10n-id=\"migration-cancel-button-label\"></button>\n              <button id=\"choose-import-from-file\" class=\"primary\" data-l10n-id=\"migration-choose-to-import-from-file-button-label\"></button>\n            </moz-button-group>\n          </div>\n        </named-deck>\n        <slot></slot>\n      </template>\n    `;\n  }\n\n  static get fragment() {\n    if (!MigrationWizard.#template) {\n      let parser = new DOMParser();\n      let doc = parser.parseFromString(MigrationWizard.markup, \"text/html\");\n      MigrationWizard.#template = document.importNode(\n        doc.querySelector(\"template\"),\n        true\n      );\n    }\n    return MigrationWizard.#template.content.cloneNode(true);\n  }\n\n  constructor() {\n    super();\n    const shadow = this.attachShadow({ mode: \"open\" });\n\n    if (window.MozXULElement) {\n      window.MozXULElement.insertFTLIfNeeded(\"branding/brand.ftl\");\n      window.MozXULElement.insertFTLIfNeeded(\"browser/migrationWizard.ftl\");\n    }\n    document.l10n.connectRoot(shadow);\n\n    shadow.appendChild(MigrationWizard.fragment);\n\n    this.#deck = shadow.querySelector(\"#wizard-deck\");\n    this.#browserProfileSelector = shadow.querySelector(\n      \"#browser-profile-selector\"\n    );\n    this.#resourceSummary = shadow.querySelector(\"#resource-selection-summary\");\n    this.#resourceSummary.addEventListener(\"click\", this);\n\n    let cancelCloseButtons = shadow.querySelectorAll(\".cancel-close\");\n    for (let button of cancelCloseButtons) {\n      button.addEventListener(\"click\", this);\n    }\n\n    let finishButtons = shadow.querySelectorAll(\".finish-button\");\n    for (let button of finishButtons) {\n      button.addEventListener(\"click\", this);\n    }\n\n    this.#importButton = shadow.querySelector(\"#import\");\n    this.#importButton.addEventListener(\"click\", this);\n    this.#importFromFileButton = shadow.querySelector(\"#import-from-file\");\n    this.#importFromFileButton.addEventListener(\"click\", this);\n    this.#chooseImportFromFile = shadow.querySelector(\n      \"#choose-import-from-file\"\n    );\n    this.#chooseImportFromFile.addEventListener(\"click\", this);\n    this.#getPermissionsButton = shadow.querySelector(\"#get-permissions\");\n    this.#getPermissionsButton.addEventListener(\"click\", this);\n\n    this.#browserProfileSelector.addEventListener(\"click\", this);\n    this.#browserProfileSelector.addEventListener(\"mousedown\", this);\n    this.#resourceTypeList = shadow.querySelector(\"#resource-type-list\");\n    this.#resourceTypeList.addEventListener(\"change\", this);\n\n    this.#safariPermissionButton = shadow.querySelector(\n      \"#safari-request-permissions\"\n    );\n    this.#safariPermissionButton.addEventListener(\"click\", this);\n\n    this.#selectAllCheckbox = shadow.querySelector(\"#select-all\").control;\n\n    let manualPasswordImportSkipButtons = shadow.querySelectorAll(\n      \".manual-password-import-skip\"\n    );\n    for (let button of manualPasswordImportSkipButtons) {\n      button.addEventListener(\"click\", this);\n    }\n\n    let manualPasswordImportSelectButtons = shadow.querySelectorAll(\n      \".manual-password-import-select\"\n    );\n    for (let button of manualPasswordImportSelectButtons) {\n      button.addEventListener(\"click\", this);\n    }\n\n    this.#extensionsSuccessLink = shadow.querySelector(\n      \"#extensions-success-link\"\n    );\n    this.#extensionsSuccessLink.addEventListener(\"click\", this);\n\n    this.#supportTextLinks = shadow.querySelectorAll(\".support-text\");\n    this.#supportTextLinks.forEach(link =>\n      link.addEventListener(\"click\", this)\n    );\n\n    this.#shadowRoot = shadow;\n  }\n\n  connectedCallback() {\n    if (this.hasAttribute(\"auto-request-state\")) {\n      this.requestState();\n    }\n  }\n\n  requestState() {\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:RequestState\", { bubbles: true })\n    );\n  }\n\n  /**\n   * This setter can be used in the event that the MigrationWizard is being\n   * inserted via Lit, and the caller wants to set state declaratively using\n   * a property expression.\n   *\n   * @param {object} state\n   *   The state object to pass to setState.\n   * @see MigrationWizard.setState.\n   */\n  set state(state) {\n    this.setState(state);\n  }\n\n  /**\n   * This is the main entrypoint for updating the state and appearance of\n   * the wizard.\n   *\n   * @param {object} state The state to be represented by the component.\n   * @param {string} state.page The page of the wizard to display. This should\n   *   be one of the MigrationWizardConstants.PAGES constants.\n   */\n  setState(state) {\n    switch (state.page) {\n      case MigrationWizardConstants.PAGES.SELECTION: {\n        this.#onShowingSelection(state);\n        break;\n      }\n      case MigrationWizardConstants.PAGES.PROGRESS: {\n        this.#onShowingProgress(state);\n        break;\n      }\n      case MigrationWizardConstants.PAGES.FILE_IMPORT_PROGRESS: {\n        this.#onShowingFileImportProgress(state);\n        break;\n      }\n      case MigrationWizardConstants.PAGES.NO_BROWSERS_FOUND: {\n        this.#onShowingNoBrowsersFound(state);\n        break;\n      }\n    }\n\n    this.#deck.toggleAttribute(\n      \"aria-busy\",\n      state.page == MigrationWizardConstants.PAGES.LOADING\n    );\n    this.#deck.setAttribute(\"selected-view\", `page-${state.page}`);\n\n    if (window.IS_STORYBOOK) {\n      this.#updateForStorybook();\n    }\n  }\n\n  get #dialogMode() {\n    return this.hasAttribute(\"dialog-mode\");\n  }\n\n  #ensureSelectionDropdown() {\n    if (this.#browserProfileSelectorList) {\n      return;\n    }\n    this.#browserProfileSelectorList = document.createElement(\"panel-list\");\n    this.#browserProfileSelectorList.toggleAttribute(\n      \"min-width-from-anchor\",\n      true\n    );\n    this.#browserProfileSelectorList.addEventListener(\"click\", this);\n\n    if (document.createXULElement) {\n      let panel = document.createXULElement(\"panel\");\n      panel.appendChild(this.#browserProfileSelectorList);\n      this.#shadowRoot.appendChild(panel);\n    } else {\n      this.#shadowRoot.appendChild(this.#browserProfileSelectorList);\n    }\n  }\n\n  /**\n   * Reacts to changes to the browser / profile selector dropdown. This\n   * should update the list of resource types to match what's supported\n   * by the selected migrator and profile.\n   *\n   *  @param {Element} panelItem the selected <panel-item>\n   */\n  #onBrowserProfileSelectionChanged(panelItem) {\n    this.#browserProfileSelector.selectedPanelItem = panelItem;\n    this.#browserProfileSelector.querySelector(\"#migrator-name\").textContent =\n      panelItem.displayName;\n    this.#browserProfileSelector.querySelector(\"#profile-name\").textContent =\n      panelItem.profile?.name || \"\";\n\n    if (panelItem.brandImage) {\n      this.#browserProfileSelector.querySelector(\n        \".migrator-icon\"\n      ).style.content = `url(${panelItem.brandImage})`;\n    } else {\n      this.#browserProfileSelector.querySelector(\n        \".migrator-icon\"\n      ).style.content = \"url(chrome://global/skin/icons/defaultFavicon.svg)\";\n    }\n\n    let key = panelItem.getAttribute(\"key\");\n    let resourceTypes = panelItem.resourceTypes;\n\n    for (let child of this.#resourceTypeList.querySelectorAll(\n      \"label[data-resource-type]\"\n    )) {\n      child.hidden = true;\n      child.control.checked = false;\n    }\n\n    for (let resourceType of resourceTypes) {\n      let resourceLabel = this.#resourceTypeList.querySelector(\n        `label[data-resource-type=\"${resourceType}\"]`\n      );\n      if (resourceLabel) {\n        resourceLabel.hidden = false;\n        resourceLabel.control.checked = true;\n\n        let labelSpan = resourceLabel.querySelector(\n          \"span[default-data-l10n-id]\"\n        );\n        if (labelSpan) {\n          if (MigrationWizardConstants.USES_FAVORITES.includes(key)) {\n            document.l10n.setAttributes(\n              labelSpan,\n              labelSpan.getAttribute(\"ie-edge-data-l10n-id\")\n            );\n          } else {\n            document.l10n.setAttributes(\n              labelSpan,\n              labelSpan.getAttribute(\"default-data-l10n-id\")\n            );\n          }\n        }\n      }\n    }\n    let selectAll = this.#shadowRoot.querySelector(\"#select-all\").control;\n    selectAll.checked = true;\n\n    this.#displaySelectedResources();\n    this.#browserProfileSelector.selectedPanelItem = panelItem;\n\n    let selectionPage = this.#shadowRoot.querySelector(\n      \"div[name='page-selection']\"\n    );\n    selectionPage.setAttribute(\"migrator-type\", panelItem.getAttribute(\"type\"));\n\n    // Safari currently has a special flow for requesting permissions that\n    // occurs _after_ resource selection, so we don't show this message\n    // for that migrator.\n    let showNoPermissionsMessage =\n      panelItem.getAttribute(\"type\") ==\n        MigrationWizardConstants.MIGRATOR_TYPES.BROWSER &&\n      !panelItem.hasPermissions &&\n      panelItem.getAttribute(\"key\") != \"safari\";\n\n    selectionPage.toggleAttribute(\"no-permissions\", showNoPermissionsMessage);\n    if (showNoPermissionsMessage) {\n      let step2 = selectionPage.querySelector(\n        \".migration-no-permissions-instructions-step2\"\n      );\n      step2.setAttribute(\n        \"data-l10n-args\",\n        JSON.stringify({ permissionsPath: panelItem.permissionsPath })\n      );\n\n      this.dispatchEvent(\n        new CustomEvent(\"MigrationWizard:PermissionsNeeded\", {\n          bubbles: true,\n          detail: {\n            key,\n          },\n        })\n      );\n    }\n\n    selectionPage.toggleAttribute(\n      \"no-resources\",\n      panelItem.getAttribute(\"type\") ==\n        MigrationWizardConstants.MIGRATOR_TYPES.BROWSER &&\n        !resourceTypes.length &&\n        panelItem.hasPermissions\n    );\n  }\n\n  /**\n   * Called when showing the browser/profile selection page of the wizard.\n   *\n   * @param {object} state\n   *   The state object passed into setState. The following properties are\n   *   used:\n   * @param {string[]} state.migrators\n   *   An array of source browser names that can be migrated from.\n   * @param {string} [state.migratorKey=null]\n   *   The key for a migrator to automatically select in the migrators array.\n   *   If not defined, the first item in the array will be selected.\n   * @param {string} [state.fileImportErrorMessage=null]\n   *   An error message to display in the event that an attempt at doing a\n   *   file import failed. File import failures are special in that they send\n   *   the wizard back to the selection page with an error message. If not\n   *   defined, it is presumed that a file import error has not occurred.\n   */\n  #onShowingSelection(state) {\n    this.#ensureSelectionDropdown();\n    this.#browserProfileSelectorList.textContent = \"\";\n\n    let selectionPage = this.#shadowRoot.querySelector(\n      \"div[name='page-selection']\"\n    );\n\n    let header = selectionPage.querySelector(\".migration-wizard-header\");\n    let selectionHeaderString = this.getAttribute(\"selection-header-string\");\n\n    if (this.hasAttribute(\"selection-header-string\")) {\n      header.textContent = selectionHeaderString;\n      header.toggleAttribute(\"hidden\", !selectionHeaderString);\n    } else {\n      header.removeAttribute(\"hidden\");\n    }\n\n    let selectionSubheaderString = this.getAttribute(\n      \"selection-subheader-string\"\n    );\n    let subheader = selectionPage.querySelector(\".migration-wizard-subheader\");\n    subheader.textContent = selectionSubheaderString;\n    subheader.toggleAttribute(\"hidden\", !selectionSubheaderString);\n\n    let details = this.#shadowRoot.querySelector(\"details\");\n\n    if (this.hasAttribute(\"force-show-import-all\")) {\n      let forceShowImportAll =\n        this.getAttribute(\"force-show-import-all\") == \"true\";\n      selectionPage.toggleAttribute(\"show-import-all\", forceShowImportAll);\n      details.open = !forceShowImportAll;\n    } else {\n      selectionPage.toggleAttribute(\"show-import-all\", state.showImportAll);\n      details.open = !state.showImportAll;\n    }\n\n    this.#expandedDetails = false;\n\n    this.#applyContentCustomizations();\n\n    for (let migrator of state.migrators) {\n      let opt = document.createElement(\"panel-item\");\n      opt.setAttribute(\"key\", migrator.key);\n      opt.setAttribute(\"type\", migrator.type);\n      opt.profile = migrator.profile;\n      opt.displayName = migrator.displayName;\n      opt.resourceTypes = migrator.resourceTypes;\n      opt.hasPermissions = migrator.hasPermissions;\n      opt.permissionsPath = migrator.permissionsPath;\n      opt.brandImage = migrator.brandImage;\n\n      let button = opt.shadowRoot.querySelector(\"button\");\n      if (migrator.brandImage) {\n        button.style.backgroundImage = `url(${migrator.brandImage})`;\n      }\n\n      if (migrator.profile) {\n        document.l10n.setAttributes(\n          opt,\n          \"migration-wizard-selection-option-with-profile\",\n          {\n            sourceBrowser: migrator.displayName,\n            profileName: migrator.profile.name,\n          }\n        );\n      } else {\n        document.l10n.setAttributes(\n          opt,\n          \"migration-wizard-selection-option-without-profile\",\n          {\n            sourceBrowser: migrator.displayName,\n          }\n        );\n      }\n\n      this.#browserProfileSelectorList.appendChild(opt);\n    }\n\n    if (state.migrators.length) {\n      this.#onBrowserProfileSelectionChanged(\n        this.#browserProfileSelectorList.firstElementChild\n      );\n    }\n\n    if (state.migratorKey) {\n      let panelItem = this.#browserProfileSelectorList.querySelector(\n        `panel-item[key=\"${state.migratorKey}\"]`\n      );\n      this.#onBrowserProfileSelectionChanged(panelItem);\n    }\n\n    let fileImportErrorMessageEl = selectionPage.querySelector(\n      \"#file-import-error-message\"\n    );\n\n    if (state.fileImportErrorMessage) {\n      fileImportErrorMessageEl.textContent = state.fileImportErrorMessage;\n      selectionPage.toggleAttribute(\"file-import-error\", true);\n    } else {\n      fileImportErrorMessageEl.textContent = \"\";\n      selectionPage.toggleAttribute(\"file-import-error\", false);\n    }\n\n    // Since this is called before the named-deck actually switches to\n    // show the selection page, we cannot focus this button immediately.\n    // Instead, we use a rAF to queue this up for focusing before the\n    // next paint.\n    requestAnimationFrame(() => {\n      this.#browserProfileSelector.focus({ focusVisible: false });\n    });\n  }\n\n  /**\n   * @typedef {object} ProgressState\n   *  The migration progress state for a resource.\n   * @property {number} value\n   *  One of the values from MigrationWizardConstants.PROGRESS_VALUE.\n   * @property {string} [message=undefined]\n   *  An optional message to display underneath the resource in\n   *  the progress dialog. This message is only shown when value\n   *  is not LOADING.\n   * @property {string} [linkURL=undefined]\n   *  The URL for an optional link to appear after the status message.\n   *  This will only be shown if linkText is also not-empty.\n   * @property {string} [linkText=undefined]\n   *  The text for an optional link to appear after the status message.\n   *  This will only be shown if linkURL is also not-empty.\n   */\n\n  /**\n   * @typedef {\n   *   keyof typeof MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES\n   * } DISPLAYED_RESOURCE_TYPES_KEYS\n   */\n\n  /**\n   * Called when showing the progress / success page of the wizard.\n   *\n   * @param {object} state\n   *   The state object passed into setState. The following properties are\n   *   used:\n   * @param {string} state.key\n   *   The key of the migrator being used.\n   * @param {Record<DISPLAYED_RESOURCE_TYPES_KEYS, ProgressState>} state.progress\n   *   An object whose keys match one of DISPLAYED_RESOURCE_TYPES.\n   *\n   *   Any resource type not included in state.progress will be hidden.\n   */\n  #onShowingProgress(state) {\n    // Any resource progress group not included in state.progress is hidden.\n    let progressPage = this.#shadowRoot.querySelector(\n      \"div[name='page-progress']\"\n    );\n    let resourceGroups = progressPage.querySelectorAll(\n      \".resource-progress-group\"\n    );\n    this.#extensionsSuccessLink.textContent = \"\";\n\n    let totalProgressGroups = Object.keys(state.progress).length;\n    let remainingProgressGroups = totalProgressGroups;\n    let totalWarnings = 0;\n\n    for (let group of resourceGroups) {\n      let resourceType = group.dataset.resourceType;\n      if (!state.progress.hasOwnProperty(resourceType)) {\n        group.hidden = true;\n        continue;\n      }\n      group.hidden = false;\n\n      let progressIcon = group.querySelector(\".progress-icon\");\n      let messageText = group.querySelector(\"span.message-text\");\n      let supportLink = group.querySelector(\".support-text\");\n\n      let labelSpan = group.querySelector(\"span[default-data-l10n-id]\");\n      if (labelSpan) {\n        if (MigrationWizardConstants.USES_FAVORITES.includes(state.key)) {\n          document.l10n.setAttributes(\n            labelSpan,\n            labelSpan.getAttribute(\"ie-edge-data-l10n-id\")\n          );\n        } else {\n          document.l10n.setAttributes(\n            labelSpan,\n            labelSpan.getAttribute(\"default-data-l10n-id\")\n          );\n        }\n      }\n      messageText.textContent = \"\";\n\n      if (supportLink) {\n        supportLink.textContent = \"\";\n        supportLink.removeAttribute(\"href\");\n      }\n      let progressValue = state.progress[resourceType].value;\n      switch (progressValue) {\n        case MigrationWizardConstants.PROGRESS_VALUE.LOADING: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-in-progress\"\n          );\n          progressIcon.setAttribute(\"state\", \"loading\");\n          messageText.textContent = \"\";\n          supportLink.textContent = \"\";\n          supportLink.removeAttribute(\"href\");\n          // With no status text, we re-insert the &nbsp; so that the status\n          // text area does not fully collapse.\n          messageText.appendChild(document.createTextNode(\"\\u00A0\"));\n          break;\n        }\n        case MigrationWizardConstants.PROGRESS_VALUE.SUCCESS: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-completed\"\n          );\n          progressIcon.setAttribute(\"state\", \"success\");\n          messageText.textContent = state.progress[resourceType].message;\n          if (\n            resourceType ==\n            MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS\n          ) {\n            messageText.textContent = \"\";\n            this.#extensionsSuccessLink.target = \"_blank\";\n            this.#extensionsSuccessLink.textContent =\n              state.progress[resourceType].message;\n          }\n          remainingProgressGroups--;\n          break;\n        }\n        case MigrationWizardConstants.PROGRESS_VALUE.WARNING: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-completed\"\n          );\n          progressIcon.setAttribute(\"state\", \"warning\");\n          messageText.textContent = state.progress[resourceType].message;\n          supportLink.textContent = state.progress[resourceType].linkText;\n          supportLink.href = state.progress[resourceType].linkURL;\n          supportLink.target = \"_blank\";\n          remainingProgressGroups--;\n          totalWarnings++;\n          break;\n        }\n        case MigrationWizardConstants.PROGRESS_VALUE.INFO: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-completed\"\n          );\n          progressIcon.setAttribute(\"state\", \"info\");\n          messageText.textContent = state.progress[resourceType].message;\n          supportLink.textContent = state.progress[resourceType].linkText;\n          supportLink.href = state.progress[resourceType].linkURL;\n          supportLink.target = \"_blank\";\n          if (\n            resourceType ==\n            MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS\n          ) {\n            messageText.textContent = \"\";\n            this.#extensionsSuccessLink.target = \"_blank\";\n            this.#extensionsSuccessLink.textContent =\n              state.progress[resourceType].message;\n          }\n          remainingProgressGroups--;\n          break;\n        }\n      }\n    }\n\n    let migrationDone = remainingProgressGroups == 0;\n    let headerL10nID = \"migration-wizard-progress-header\";\n    let header = this.#shadowRoot.getElementById(\"progress-header\");\n\n    if (migrationDone) {\n      if (totalWarnings) {\n        headerL10nID = \"migration-wizard-progress-done-with-warnings-header\";\n      } else if (this.getAttribute(\"data-import-complete-success-string\")) {\n        header.textContent = this.getAttribute(\n          \"data-import-complete-success-string\"\n        );\n      } else {\n        headerL10nID = \"migration-wizard-progress-done-header\";\n      }\n    }\n\n    document.l10n.setAttributes(header, headerL10nID);\n\n    let finishButtons = progressPage.querySelectorAll(\".finish-button\");\n    let cancelButton = progressPage.querySelector(\".cancel-close\");\n\n    for (let finishButton of finishButtons) {\n      finishButton.hidden = !migrationDone;\n    }\n\n    cancelButton.hidden = migrationDone;\n\n    if (migrationDone) {\n      // Since this might be called before the named-deck actually switches to\n      // show the progress page, we cannot focus this button immediately.\n      // Instead, we use a rAF to queue this up for focusing before the\n      // next paint.\n      requestAnimationFrame(() => {\n        let button = this.#dialogMode\n          ? progressPage.querySelector(\".done-button\")\n          : progressPage.querySelector(\".continue-button\");\n        button.focus({ focusVisible: false });\n      });\n    }\n  }\n\n  /**\n   * @typedef {\n   *   keyof typeof MigrationWizardConstants.DISPLAYED_FILE_RESOURCE_TYPES\n   * } DISPLAYED_FILE_RESOURCE_TYPES_KEYS\n   */\n\n  /**\n   * Called when showing the progress / success page of the wizard for\n   * files.\n   *\n   * @param {object} state\n   *   The state object passed into setState. The following properties are\n   *   used:\n   * @param {string} state.title\n   *   The string to display in the header.\n   * @param {Record<DISPLAYED_FILE_RESOURCE_TYPES_KEYS, ProgressState>} state.progress\n   *   An object whose keys match one of DISPLAYED_FILE_RESOURCE_TYPES.\n   *\n   *   Any resource type not included in state.progress will be hidden.\n   */\n  #onShowingFileImportProgress(state) {\n    // Any resource progress group not included in state.progress is hidden.\n    let progressPage = this.#shadowRoot.querySelector(\n      \"div[name='page-file-import-progress']\"\n    );\n    let resourceGroups = progressPage.querySelectorAll(\n      \".resource-progress-group\"\n    );\n    let totalProgressGroups = Object.keys(state.progress).length;\n    let remainingProgressGroups = totalProgressGroups;\n\n    for (let group of resourceGroups) {\n      let resourceType = group.dataset.resourceType;\n      if (!state.progress.hasOwnProperty(resourceType)) {\n        group.hidden = true;\n        continue;\n      }\n      group.hidden = false;\n\n      let progressIcon = group.querySelector(\".progress-icon\");\n      let messageText = group.querySelector(\".message-text\");\n\n      let progressValue = state.progress[resourceType].value;\n      switch (progressValue) {\n        case MigrationWizardConstants.PROGRESS_VALUE.LOADING: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-in-progress\"\n          );\n          progressIcon.setAttribute(\"state\", \"loading\");\n          messageText.textContent = \"\";\n          // With no status text, we re-insert the &nbsp; so that the status\n          // text area does not fully collapse.\n          messageText.appendChild(document.createTextNode(\"\\u00A0\"));\n          break;\n        }\n        case MigrationWizardConstants.PROGRESS_VALUE.SUCCESS: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-completed\"\n          );\n          progressIcon.setAttribute(\"state\", \"success\");\n          messageText.textContent = state.progress[resourceType].message;\n          remainingProgressGroups--;\n          break;\n        }\n        case MigrationWizardConstants.PROGRESS_VALUE.WARNING: {\n          document.l10n.setAttributes(\n            progressIcon,\n            \"migration-wizard-progress-icon-completed\"\n          );\n          progressIcon.setAttribute(\"state\", \"warning\");\n          messageText.textContent = state.progress[resourceType].message;\n          remainingProgressGroups--;\n          break;\n        }\n        default: {\n          console.error(\n            \"Unrecognized state for file migration: \",\n            progressValue\n          );\n        }\n      }\n    }\n\n    let migrationDone = remainingProgressGroups == 0;\n    let header = this.#shadowRoot.getElementById(\"file-import-progress-header\");\n    header.textContent = state.title;\n\n    let doneButton = progressPage.querySelector(\".primary\");\n    let cancelButton = progressPage.querySelector(\".cancel-close\");\n    doneButton.hidden = !migrationDone;\n    cancelButton.hidden = migrationDone;\n\n    if (migrationDone) {\n      // Since this might be called before the named-deck actually switches to\n      // show the progress page, we cannot focus this button immediately.\n      // Instead, we use a rAF to queue this up for focusing before the\n      // next paint.\n      requestAnimationFrame(() => {\n        doneButton.focus({ focusVisible: false });\n      });\n    }\n  }\n\n  /**\n   * Called when showing the \"no browsers found\" page of the wizard.\n   *\n   * @param {object} state\n   *   The state object passed into setState. The following properties are\n   *   used:\n   * @param {string} state.hasFileMigrators\n   *   True if at least one FileMigrator is available for use.\n   */\n  #onShowingNoBrowsersFound(state) {\n    this.#chooseImportFromFile.hidden = !state.hasFileMigrators;\n  }\n\n  /**\n   * Certain parts of the MigrationWizard need to be modified slightly\n   * in order to work properly with Storybook. This method should be called\n   * to apply those changes after changing state.\n   */\n  #updateForStorybook() {\n    // The CSS mask used for the progress spinner cannot be loaded via\n    // chrome:// URIs in Storybook. We work around this by exposing the\n    // progress elements as custom parts that the MigrationWizard story\n    // can style on its own.\n    this.#shadowRoot.querySelectorAll(\".progress-icon\").forEach(progressEl => {\n      if (progressEl.getAttribute(\"state\") == \"loading\") {\n        progressEl.setAttribute(\"part\", \"progress-spinner\");\n      } else {\n        progressEl.removeAttribute(\"part\");\n      }\n    });\n  }\n\n  /**\n   * A public method for starting a migration without the user needing\n   * to choose a browser, profile or resource types. This is typically\n   * done only for doing a profile reset.\n   *\n   * @param {string} migratorKey\n   *   The key associated with the migrator to use.\n   * @param {object|null} profile\n   *   A representation of a browser profile. When not null, this is an\n   *   object with a string \"id\" property, and a string \"name\" property.\n   * @param {string[]} resourceTypes\n   *   An array of resource types that import should occur for. These\n   *   strings should be from MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.\n   */\n  doAutoImport(migratorKey, profile, resourceTypes) {\n    let migrationEventDetail = this.#gatherMigrationEventDetails({\n      migratorKey,\n      profile,\n      resourceTypes,\n    });\n\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:BeginMigration\", {\n        bubbles: true,\n        detail: migrationEventDetail,\n      })\n    );\n  }\n\n  /**\n   * Takes the current state of the selections page and bundles them\n   * up into a MigrationWizard:BeginMigration event that can be handled\n   * externally to perform the actual migration.\n   */\n  #doImport() {\n    let migrationEventDetail = this.#gatherMigrationEventDetails();\n\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:BeginMigration\", {\n        bubbles: true,\n        detail: migrationEventDetail,\n      })\n    );\n  }\n\n  /**\n   * @typedef {object} MigrationDetails\n   * @property {string} key\n   *   The key for a MigratorBase subclass.\n   * @property {object|null} profile\n   *   A representation of a browser profile. This is serialized and originally\n   *   sent down from the parent via the GetAvailableMigrators message.\n   * @property {string[]} resourceTypes\n   *   An array of resource types that the user is attempted to import. These\n   *   strings should be from MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.\n   * @property {boolean} hasPermissions\n   *   True if this MigrationWizardChild told us that the associated\n   *   MigratorBase subclass for the key has enough permission to read\n   *   the requested resources.\n   * @property {boolean} expandedDetails\n   *   True if the user clicked on the <summary> element to expand the resource\n   *   type list.\n   * @property {boolean} autoMigration\n   *   True if the migration is occurring automatically, without the user\n   *   having selected any items explicitly from the wizard.\n   * @property {string} [manualPasswordFilePath=null]\n   *   An optional string argument that points to the path of a passwords\n   *   export file from another browser. This file will have password imported\n   *   from if supplied. This argument is ignored if the key is not for the\n   *   Safari browser or the Chrome browser on Windows.\n   */\n\n  /**\n   * Pulls information from the DOM state of the MigrationWizard and constructs\n   * and returns an object that can be used to begin migration via and event\n   * sent to the MigrationWizardChild. If autoMigrationDetails is provided,\n   * this information is used to construct the object instead of the DOM state.\n   *\n   * @param {object} [autoMigrationDetails=null]\n   *   Provided iff an automatic migration is being invoked. In that case, the\n   *   details are constructed from this object rather than the wizard DOM state.\n   * @param {string} autoMigrationDetails.migratorKey\n   *   The key of the migrator to do automatic migration from.\n   * @param {object|null} autoMigrationDetails.profile\n   *   A representation of a browser profile. When not null, this is an\n   *   object with a string \"id\" property, and a string \"name\" property.\n   * @param {string[]} autoMigrationDetails.resourceTypes\n   *   An array of resource types that import should occur for. These\n   *   strings should be from MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.\n   * @returns {MigrationDetails} details\n   */\n  #gatherMigrationEventDetails(autoMigrationDetails) {\n    if (autoMigrationDetails?.migratorKey) {\n      let { migratorKey, profile, resourceTypes } = autoMigrationDetails;\n\n      return {\n        key: migratorKey,\n        type: MigrationWizardConstants.MIGRATOR_TYPES.BROWSER,\n        profile,\n        resourceTypes,\n        hasPermissions: true,\n        expandedDetails: this.#expandedDetails,\n        autoMigration: true,\n      };\n    }\n\n    let panelItem = this.#browserProfileSelector.selectedPanelItem;\n    let key = panelItem.getAttribute(\"key\");\n    let type = panelItem.getAttribute(\"type\");\n    let profile = panelItem.profile;\n    let hasPermissions = panelItem.hasPermissions;\n\n    let resourceTypeFields = this.#resourceTypeList.querySelectorAll(\n      \"label[data-resource-type]\"\n    );\n    let resourceTypes = [];\n    for (let resourceTypeField of resourceTypeFields) {\n      if (resourceTypeField.control.checked) {\n        resourceTypes.push(resourceTypeField.dataset.resourceType);\n      }\n    }\n\n    return {\n      key,\n      type,\n      profile,\n      resourceTypes,\n      hasPermissions,\n      expandedDetails: this.#expandedDetails,\n      autoMigration: false,\n    };\n  }\n\n  /**\n   * Sends a request to gain read access to the Safari profile folder on\n   * macOS, and upon gaining access, performs a migration using the current\n   * settings as gathered by #gatherMigrationEventDetails\n   */\n  #requestSafariPermissions() {\n    let migrationEventDetail = this.#gatherMigrationEventDetails();\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:RequestSafariPermissions\", {\n        bubbles: true,\n        detail: migrationEventDetail,\n      })\n    );\n  }\n\n  /**\n   * Sends a request to get a string path for a passwords file exported\n   * from another browser (like Safari on macOS, or Chrome on Windows)\n   * where we cannot currently import automatically.\n   */\n  #selectManualPasswordFile() {\n    let migrationEventDetail = this.#gatherMigrationEventDetails();\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:SelectManualPasswordFile\", {\n        bubbles: true,\n        detail: migrationEventDetail,\n      })\n    );\n  }\n\n  /**\n   * Sends a request to get read permissions for the data associated\n   * with the selected browser.\n   */\n  #getPermissions() {\n    let migrationEventDetail = this.#gatherMigrationEventDetails();\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:GetPermissions\", {\n        bubbles: true,\n        detail: migrationEventDetail,\n      })\n    );\n  }\n\n  /**\n   * Changes selected-data-header text and selected-data text based on\n   * how many resources are checked\n   */\n  async #displaySelectedResources() {\n    let resourceTypeLabels = this.#resourceTypeList.querySelectorAll(\n      \"label:not([hidden])[data-resource-type]\"\n    );\n    let panelItem = this.#browserProfileSelector.selectedPanelItem;\n    let key = panelItem.getAttribute(\"key\");\n\n    let totalResources = resourceTypeLabels.length;\n    let checkedResources = 0;\n\n    let selectedData = this.#shadowRoot.querySelector(\".selected-data\");\n    let selectedDataArray = [];\n    let resourceTypeToLabelIDs = {\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS]:\n        \"migration-list-bookmark-label\",\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS]:\n        \"migration-list-password-label\",\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.HISTORY]:\n        \"migration-list-history-label\",\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.EXTENSIONS]:\n        \"migration-list-extensions-label\",\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.FORMDATA]:\n        \"migration-list-autofill-label\",\n      [MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PAYMENT_METHODS]:\n        \"migration-list-payment-methods-label\",\n    };\n\n    if (MigrationWizardConstants.USES_FAVORITES.includes(key)) {\n      resourceTypeToLabelIDs[\n        MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.BOOKMARKS\n      ] = \"migration-list-favorites-label\";\n    }\n\n    let resourceTypes = Object.keys(resourceTypeToLabelIDs);\n    let labelIds = Object.values(resourceTypeToLabelIDs).map(id => {\n      return { id };\n    });\n    let labels = await document.l10n.formatValues(labelIds);\n    let resourceTypeLabelMapping = new Map();\n    for (let i = 0; i < resourceTypes.length; ++i) {\n      let resourceType = resourceTypes[i];\n      resourceTypeLabelMapping.set(resourceType, labels[i]);\n    }\n    let formatter = new Intl.ListFormat(undefined, {\n      style: \"long\",\n      type: \"conjunction\",\n    });\n    for (let resourceTypeLabel of resourceTypeLabels) {\n      if (resourceTypeLabel.control.checked) {\n        selectedDataArray.push(\n          resourceTypeLabelMapping.get(resourceTypeLabel.dataset.resourceType)\n        );\n        checkedResources++;\n      }\n    }\n    if (selectedDataArray.length) {\n      selectedDataArray[0] =\n        selectedDataArray[0].charAt(0).toLocaleUpperCase() +\n        selectedDataArray[0].slice(1);\n      selectedData.textContent = formatter.format(selectedDataArray);\n    } else {\n      selectedData.textContent = \"\\u00A0\";\n    }\n\n    let selectedDataHeader = this.#shadowRoot.querySelector(\n      \".selected-data-header\"\n    );\n\n    let importButton = this.#shadowRoot.querySelector(\"#import\");\n    importButton.disabled = checkedResources == 0;\n\n    if (this.hasAttribute(\"option-expander-title-string\")) {\n      let optionString = this.getAttribute(\"option-expander-title-string\");\n      selectedDataHeader.textContent = optionString;\n    } else if (checkedResources == 0) {\n      document.l10n.setAttributes(\n        selectedDataHeader,\n        \"migration-no-selected-data-label\"\n      );\n    } else if (checkedResources < totalResources) {\n      document.l10n.setAttributes(\n        selectedDataHeader,\n        \"migration-selected-data-label\"\n      );\n    } else {\n      document.l10n.setAttributes(\n        selectedDataHeader,\n        \"migration-all-available-data-label\"\n      );\n    }\n\n    let selectionPage = this.#shadowRoot.querySelector(\n      \"div[name='page-selection']\"\n    );\n    selectionPage.toggleAttribute(\"single-item\", totalResources == 1);\n\n    this.dispatchEvent(\n      new CustomEvent(\"MigrationWizard:ResourcesUpdated\", { bubbles: true })\n    );\n  }\n\n  /**\n   * Updates content and layout to apply changes that are\n   * informed through element attributes\n   */\n  #applyContentCustomizations() {\n    let selectionPage = this.#shadowRoot.querySelector(\n      \"div[name='page-selection']\"\n    );\n    if (this.hasAttribute(\"hide-select-all\")) {\n      let hideSelectAll = this.getAttribute(\"hide-select-all\");\n\n      selectionPage.toggleAttribute(\"hide-select-all\", hideSelectAll);\n    } else {\n      selectionPage.removeAttribute(\"hide-select-all\");\n    }\n\n    if (this.hasAttribute(\"import-button-string\")) {\n      if (this.getAttribute(\"import-button-string\")) {\n        this.#importButton.textContent = this.getAttribute(\n          \"import-button-string\"\n        );\n      }\n    }\n\n    if (this.hasAttribute(\"checkbox-margin-inline\")) {\n      let inlineMargin = this.getAttribute(\"checkbox-margin-inline\");\n      this.style.setProperty(\n        \"--resource-type-label-margin-inline\",\n        inlineMargin\n      );\n    }\n\n    if (this.hasAttribute(\"checkbox-margin-block\")) {\n      let blockMargin = this.getAttribute(\"checkbox-margin-block\");\n      this.style.setProperty(\"--resource-type-label-margin-block\", blockMargin);\n    }\n\n    if (this.hasAttribute(\"import-button-class\")) {\n      let importButtonClass = this.getAttribute(\"import-button-class\");\n      if (importButtonClass) {\n        this.#importButton.classList.add(importButtonClass);\n      }\n    }\n\n    if (this.hasAttribute(\"header-font-size\")) {\n      let headerFontSize = this.getAttribute(\"header-font-size\");\n      if (headerFontSize) {\n        this.style.setProperty(\n          \"--embedded-wizard-header-font-size\",\n          headerFontSize\n        );\n      }\n    }\n\n    if (this.hasAttribute(\"header-font-weight\")) {\n      let headerFontWeight = this.getAttribute(\"header-font-weight\");\n      if (headerFontWeight) {\n        this.style.setProperty(\n          \"--embedded-wizard-header-font-weight\",\n          headerFontWeight\n        );\n      }\n    }\n\n    if (this.hasAttribute(\"header-margin-block\")) {\n      let headerMarginBlock = this.getAttribute(\"header-margin-block\");\n      if (headerMarginBlock) {\n        this.style.setProperty(\n          \"--embedded-wizard-header-margin-block\",\n          headerMarginBlock\n        );\n      }\n    }\n\n    if (this.hasAttribute(\"subheader-font-size\")) {\n      let subheaderFontSize = this.getAttribute(\"subheader-font-size\");\n      if (subheaderFontSize) {\n        this.style.setProperty(\n          \"--embedded-wizard-subheader-font-size\",\n          subheaderFontSize\n        );\n      }\n    }\n\n    if (this.hasAttribute(\"subheader-font-weight\")) {\n      let subheaderFontWeight = this.getAttribute(\"subheader-font-weight\");\n      if (subheaderFontWeight) {\n        this.style.setProperty(\n          \"--embedded-wizard-subheader-font-weight\",\n          subheaderFontWeight\n        );\n      }\n    }\n\n    if (this.hasAttribute(\"subheader-margin-block\")) {\n      let subheaderMarginBlock = this.getAttribute(\"subheader-margin-block\");\n      if (subheaderMarginBlock) {\n        this.style.setProperty(\n          \"--embedded-wizard-subheader-margin-block\",\n          subheaderMarginBlock\n        );\n      }\n    }\n  }\n\n  #handleClickEvent(event) {\n    if (\n      event.target == this.#importButton ||\n      event.target == this.#importFromFileButton\n    ) {\n      this.#doImport();\n    } else if (\n      event.target.classList.contains(\"cancel-close\") ||\n      event.target.classList.contains(\"finish-button\")\n    ) {\n      this.dispatchEvent(\n        new CustomEvent(\"MigrationWizard:Close\", { bubbles: true })\n      );\n    } else if (\n      event.currentTarget == this.#browserProfileSelectorList &&\n      event.target != this.#browserProfileSelectorList\n    ) {\n      this.#onBrowserProfileSelectionChanged(event.target);\n      // If the user selected a file migration type from the selector, we'll\n      // help the user out by immediately starting the file migration flow,\n      // rather than waiting for them to click the \"Select File\".\n      if (\n        event.target.getAttribute(\"type\") ==\n        MigrationWizardConstants.MIGRATOR_TYPES.FILE\n      ) {\n        this.#doImport();\n      }\n    } else if (event.target == this.#safariPermissionButton) {\n      this.#requestSafariPermissions();\n    } else if (event.currentTarget == this.#resourceSummary) {\n      this.#expandedDetails = true;\n    } else if (event.target == this.#chooseImportFromFile) {\n      this.dispatchEvent(\n        new CustomEvent(\"MigrationWizard:RequestState\", {\n          bubbles: true,\n          detail: {\n            allowOnlyFileMigrators: true,\n          },\n        })\n      );\n    } else if (event.target.classList.contains(\"manual-password-import-skip\")) {\n      // If the user chose to skip importing passwords manually from a CSV, we\n      // programmatically uncheck the PASSWORDS resource type and re-request\n      // import.\n      let checkbox = this.#shadowRoot.querySelector(\n        `label[data-resource-type=\"${MigrationWizardConstants.DISPLAYED_RESOURCE_TYPES.PASSWORDS}\"]`\n      ).control;\n      checkbox.checked = false;\n\n      // If there are no other checked checkboxes, go back to the selection\n      // screen.\n      let checked = this.#shadowRoot.querySelectorAll(\n        `label[data-resource-type] > input:checked`\n      ).length;\n\n      if (!checked) {\n        this.requestState();\n      } else {\n        this.#doImport();\n      }\n    } else if (\n      event.target.classList.contains(\"manual-password-import-select\")\n    ) {\n      this.#selectManualPasswordFile();\n    } else if (event.target == this.#extensionsSuccessLink) {\n      this.dispatchEvent(\n        new CustomEvent(\"MigrationWizard:OpenAboutAddons\", {\n          bubbles: true,\n        })\n      );\n      event.preventDefault();\n    } else if (\n      [...this.#supportTextLinks].includes(event.target) &&\n      this.hasAttribute(\"in-aboutwelcome-bundle\")\n    ) {\n      // When we're running in the context of a spotlight\n      // the click events for standard anchors are being gobbled up by spotlight,\n      // so we're also firing a custom event to handle those clicks when in that context\n      this.dispatchEvent(\n        new CustomEvent(\"MigrationWizard:OpenURL\", {\n          bubbles: true,\n          detail: {\n            url: event.target.href,\n            where: \"tabshifted\",\n          },\n        })\n      );\n      event.preventDefault();\n    } else if (event.target == this.#getPermissionsButton) {\n      this.#getPermissions();\n    }\n  }\n\n  #handleChangeEvent(event) {\n    if (event.target == this.#browserProfileSelector) {\n      this.#onBrowserProfileSelectionChanged();\n    } else if (event.target == this.#selectAllCheckbox) {\n      let checkboxes = this.#shadowRoot.querySelectorAll(\n        'label[data-resource-type]:not([hidden]) > input[type=\"checkbox\"]'\n      );\n      for (let checkbox of checkboxes) {\n        checkbox.checked = this.#selectAllCheckbox.checked;\n      }\n      this.#displaySelectedResources();\n    } else {\n      let checkboxes = this.#shadowRoot.querySelectorAll(\n        'label[data-resource-type]:not([hidden]) > input[type=\"checkbox\"]'\n      );\n\n      let allVisibleChecked = Array.from(checkboxes).every(checkbox => {\n        return checkbox.checked;\n      });\n\n      this.#selectAllCheckbox.checked = allVisibleChecked;\n      this.#displaySelectedResources();\n    }\n  }\n\n  handleEvent(event) {\n    if (\n      event.target == this.#browserProfileSelector &&\n      (event.type == \"mousedown\" ||\n        (event.type == \"click\" &&\n          event.mozInputSource == MouseEvent.MOZ_SOURCE_KEYBOARD))\n    ) {\n      this.#browserProfileSelectorList.toggle(event);\n      return;\n    }\n    switch (event.type) {\n      case \"click\": {\n        this.#handleClickEvent(event);\n        break;\n      }\n      case \"change\": {\n        this.#handleChangeEvent(event);\n        break;\n      }\n    }\n  }\n}\n\nif (globalThis.customElements) {\n  customElements.define(\"migration-wizard\", MigrationWizard);\n}\n","import __chrome_styles_loader__mozbuttongroupStyles from \"toolkit/content/widgets/moz-button-group/moz-button-group.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nexport const PLATFORM_LINUX = \"linux\";\nexport const PLATFORM_MACOS = \"macosx\";\nexport const PLATFORM_WINDOWS = \"win\";\n\n/**\n * A grouping of buttons. Primary button order will be set automatically based\n * on class=\"primary\", type=\"submit\" or autofocus attribute. Set slot=\"primary\"\n * on a primary button that does not have primary styling to set its position.\n *\n * @tagname moz-button-group\n * @property {string} platform - The detected platform, set automatically.\n */\nexport default class MozButtonGroup extends MozLitElement {\n  static queries = {\n    defaultSlotEl: \"slot:not([name])\",\n    primarySlotEl: \"slot[name=primary]\",\n  };\n\n  static properties = {\n    platform: { state: true },\n  };\n\n  constructor() {\n    super();\n    this.#detectPlatform();\n  }\n\n  #detectPlatform() {\n    if (typeof AppConstants !== \"undefined\") {\n      this.platform = AppConstants.platform;\n    } else if (navigator.platform.includes(\"Linux\")) {\n      this.platform = PLATFORM_LINUX;\n    } else if (navigator.platform.includes(\"Mac\")) {\n      this.platform = PLATFORM_MACOS;\n    } else {\n      this.platform = PLATFORM_WINDOWS;\n    }\n  }\n\n  onSlotchange() {\n    for (let child of this.defaultSlotEl.assignedNodes()) {\n      if (!(child instanceof Element)) {\n        // Text nodes won't support classList or getAttribute.\n        continue;\n      }\n      switch (child.localName) {\n        case \"button\":\n          if (\n            child.classList.contains(\"primary\") ||\n            child.getAttribute(\"type\") == \"submit\" ||\n            child.hasAttribute(\"autofocus\") ||\n            child.hasAttribute(\"default\")\n          ) {\n            child.slot = \"primary\";\n          }\n          break;\n        case \"moz-button\":\n          if (child.type == \"primary\" || child.type == \"destructive\") {\n            child.slot = \"primary\";\n          }\n          break;\n      }\n    }\n    this.#reorderLightDom();\n  }\n\n  #reorderLightDom() {\n    let primarySlottedChildren = [...this.primarySlotEl.assignedNodes()];\n    if (this.platform == PLATFORM_WINDOWS) {\n      primarySlottedChildren.reverse();\n      for (let child of primarySlottedChildren) {\n        child.parentElement.prepend(child);\n      }\n    } else {\n      for (let child of primarySlottedChildren) {\n        // Ensure the primary buttons are at the end of the light DOM.\n        child.parentElement.append(child);\n      }\n    }\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has(\"platform\")) {\n      this.#reorderLightDom();\n    }\n  }\n\n  render() {\n    let slots = [\n      html` <slot @slotchange=${this.onSlotchange}></slot> `,\n      html` <slot name=\"primary\"></slot> `,\n    ];\n    if (this.platform == PLATFORM_WINDOWS) {\n      slots = [slots[1], slots[0]];\n    }\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttongroupStyles}\"\n      />\n      ${slots}\n    `;\n  }\n}\ncustomElements.define(\"moz-button-group\", MozButtonGroup);\n"],"names":[],"sourceRoot":""}