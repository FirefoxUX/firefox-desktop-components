{"version":3,"file":"9965.46743561.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/panel-list/panel-list.js"],"sourcesContent":["import __chrome_styles_loader__panelitemStyles from \"toolkit/content/widgets/panel-list/panel-item.css\";\nimport __chrome_styles_loader__panellistStyles from \"toolkit/content/widgets/panel-list/panel-list.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\"use strict\";\n\n{\n  class PanelList extends HTMLElement {\n    static get observedAttributes() {\n      return [\"open\"];\n    }\n\n    static get fragment() {\n      if (!this._template) {\n        let parser = new DOMParser();\n        let cssPath = __chrome_styles_loader__panellistStyles;\n        let doc = parser.parseFromString(\n          `\n          <template>\n            <link rel=\"stylesheet\" href=${cssPath}>\n            <div class=\"arrow top\" role=\"presentation\"></div>\n            <div class=\"list\" role=\"presentation\">\n              <slot></slot>\n            </div>\n            <div class=\"arrow bottom\" role=\"presentation\"></div>\n          </template>\n        `,\n          \"text/html\"\n        );\n        this._template = document.importNode(\n          doc.querySelector(\"template\"),\n          true\n        );\n      }\n      return this._template.content.cloneNode(true);\n    }\n\n    constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n      this.shadowRoot.appendChild(this.constructor.fragment);\n    }\n\n    connectedCallback() {\n      this.setAttribute(\"role\", \"menu\");\n    }\n\n    attributeChangedCallback(name, oldVal, newVal) {\n      if (name == \"open\" && newVal != oldVal) {\n        if (this.open) {\n          this.onShow();\n        } else {\n          this.onHide();\n        }\n      }\n    }\n\n    get open() {\n      return this.hasAttribute(\"open\");\n    }\n\n    set open(val) {\n      this.toggleAttribute(\"open\", val);\n    }\n\n    get stayOpen() {\n      return this.hasAttribute(\"stay-open\");\n    }\n\n    set stayOpen(val) {\n      this.toggleAttribute(\"stay-open\", val);\n    }\n\n    getTargetForEvent(event) {\n      if (!event) {\n        return null;\n      }\n      if (event._savedComposedTarget) {\n        return event._savedComposedTarget;\n      }\n      if (event.composed) {\n        event._savedComposedTarget =\n          event.composedTarget || event.composedPath()[0];\n      }\n      return event._savedComposedTarget || event.target;\n    }\n\n    show(triggeringEvent, target) {\n      this.triggeringEvent = triggeringEvent;\n      this.lastAnchorNode =\n        target || this.getTargetForEvent(this.triggeringEvent);\n\n      this.wasOpenedByKeyboard =\n        triggeringEvent &&\n        (triggeringEvent.inputSource == MouseEvent.MOZ_SOURCE_KEYBOARD ||\n          triggeringEvent.inputSource == MouseEvent.MOZ_SOURCE_UNKNOWN ||\n          triggeringEvent.code == \"ArrowRight\" ||\n          triggeringEvent.code == \"ArrowLeft\");\n      this.open = true;\n\n      if (this.parentIsXULPanel()) {\n        this.toggleAttribute(\"inxulpanel\", true);\n        let panel = this.parentElement;\n        panel.hidden = false;\n        // Bug 1842070 - There appears to be a race here where panel-lists\n        // embedded in XUL panels won't appear during the first call to show()\n        // without waiting for a mix of rAF and another tick of the event\n        // loop.\n        requestAnimationFrame(() => {\n          setTimeout(() => {\n            panel.openPopup(\n              this.lastAnchorNode,\n              \"after_start\",\n              0,\n              0,\n              false,\n              false,\n              this.triggeringEvent\n            );\n          }, 0);\n        });\n      } else {\n        this.toggleAttribute(\"inxulpanel\", false);\n      }\n    }\n\n    hide(triggeringEvent, { force = false } = {}, eventTarget) {\n      // It's possible this is being used in an unprivileged context, in which\n      // case it won't have access to Services / Services will be undeclared.\n      const autohideDisabled = this.hasServices()\n        ? Services.prefs.getBoolPref(\"ui.popup.disable_autohide\", false)\n        : false;\n\n      if (autohideDisabled && !force) {\n        // Don't hide if this wasn't \"forced\" (using escape or click in menu).\n        return;\n      }\n      let openingEvent = this.triggeringEvent;\n      this.triggeringEvent = triggeringEvent;\n      this.open = false;\n\n      if (this.parentIsXULPanel()) {\n        // It's possible that we're being programattically hidden, in which\n        // case, we need to hide the XUL panel we're embedded in. If, however,\n        // we're being hidden because the XUL panel is being hidden, calling\n        // hidePopup again on it is a no-op.\n        let panel = this.parentElement;\n        panel.hidePopup();\n      }\n\n      let target = eventTarget || this.getTargetForEvent(openingEvent);\n      // Refocus the button that opened the menu if we have one.\n      if (target && this.wasOpenedByKeyboard) {\n        target.focus();\n      }\n    }\n\n    toggle(triggeringEvent, target = null) {\n      if (this.open) {\n        this.hide(triggeringEvent, { force: true }, target);\n      } else {\n        this.show(triggeringEvent, target);\n      }\n    }\n\n    hasServices() {\n      // Safely check for Services without throwing a ReferenceError.\n      return typeof Services !== \"undefined\";\n    }\n\n    isDocumentRTL() {\n      if (this.hasServices()) {\n        return Services.locale.isAppLocaleRTL;\n      }\n      return document.dir === \"rtl\";\n    }\n\n    parentIsXULPanel() {\n      const XUL_NS =\n        \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\";\n      return (\n        this.parentElement?.namespaceURI == XUL_NS &&\n        this.parentElement?.localName == \"panel\"\n      );\n    }\n\n    async setAlign() {\n      const hostElement = this.parentElement || this.getRootNode().host;\n\n      if (!hostElement) {\n        // This could get called before we're added to the DOM.\n        // Nothing to do in that case.\n        return;\n      }\n\n      // Set the showing attribute to hide the panel until its alignment is set.\n      this.setAttribute(\"showing\", \"true\");\n      // Tell the host element to hide any overflow in case the panel extends off\n      // the page before the alignment is set.\n      hostElement.style.overflow = \"hidden\";\n\n      // Wait for a layout flush, then find the bounds.\n      let {\n        anchorBottom, // distance from the bottom of the anchor el to top of viewport.\n        anchorLeft,\n        anchorTop,\n        anchorWidth,\n        panelHeight,\n        panelWidth,\n        winHeight,\n        winScrollY,\n        winScrollX,\n        clientWidth,\n      } = await new Promise(resolve => {\n        this.style.left = 0;\n        this.style.top = 0;\n\n        requestAnimationFrame(() =>\n          setTimeout(() => {\n            let target =\n              this.lastAnchorNode ||\n              this.getTargetForEvent(this.triggeringEvent);\n            let anchorElement = target || hostElement;\n            // It's possible this is being used in a context where windowUtils is\n            // not available. In that case, fallback to using the element.\n            let getBounds = el =>\n              window.windowUtils\n                ? window.windowUtils.getBoundsWithoutFlushing(el)\n                : el.getBoundingClientRect();\n            // Use y since top is reserved.\n            let anchorBounds = getBounds(anchorElement);\n            let panelBounds = getBounds(this);\n            let clientWidth = document.scrollingElement.clientWidth;\n            let panelHeight =\n              this.scrollHeight > panelBounds.height\n                ? this.scrollHeight\n                : panelBounds.height;\n\n            resolve({\n              anchorBottom: anchorBounds.bottom,\n              anchorHeight: anchorBounds.height,\n              anchorLeft: anchorBounds.left,\n              anchorTop: anchorBounds.top,\n              anchorWidth: anchorBounds.width,\n              panelHeight,\n              panelWidth: panelBounds.width,\n              winHeight: innerHeight,\n              winScrollX: scrollX,\n              winScrollY: scrollY,\n              clientWidth,\n            });\n          }, 0)\n        );\n      });\n\n      // If we're embedded in a XUL panel, let it handle alignment.\n      if (!this.parentIsXULPanel()) {\n        // Calculate the left/right alignment.\n        let align;\n        let leftOffset;\n        let leftAlignX = anchorLeft;\n        let rightAlignX = anchorLeft + anchorWidth - panelWidth;\n\n        if (this.isDocumentRTL()) {\n          // Prefer aligning on the right.\n          align = rightAlignX < 0 ? \"left\" : \"right\";\n        } else {\n          // Prefer aligning on the left.\n          align = leftAlignX + panelWidth > clientWidth ? \"right\" : \"left\";\n        }\n        leftOffset = align === \"left\" ? leftAlignX : rightAlignX;\n\n        let bottomSpaceY = winHeight - anchorBottom;\n\n        let valign;\n        let topOffset;\n        const VIEWPORT_PANEL_MIN_MARGIN = 10; // 10px ensures that the panel is not flush with the viewport.\n\n        // Only want to valign top when there's more space between the bottom of the anchor element and the top of the viewport.\n        // If there's more space between the bottom of the anchor element and the bottom of the viewport, we valign bottom.\n        if (\n          anchorBottom > bottomSpaceY &&\n          anchorBottom + panelHeight + VIEWPORT_PANEL_MIN_MARGIN > winHeight\n        ) {\n          // Never want to have a negative value for topOffset, so ensure it's at least 10px.\n          topOffset = Math.max(\n            anchorTop - panelHeight,\n            VIEWPORT_PANEL_MIN_MARGIN\n          );\n          // Provide a max-height for larger elements which will provide scrolling as needed.\n          this.style.maxHeight = `${anchorTop + VIEWPORT_PANEL_MIN_MARGIN}px`;\n          valign = \"top\";\n        } else {\n          topOffset = anchorBottom;\n          this.style.maxHeight = `${\n            bottomSpaceY - VIEWPORT_PANEL_MIN_MARGIN\n          }px`;\n          valign = \"bottom\";\n        }\n\n        // Set the alignments and show the panel.\n        this.setAttribute(\"align\", align);\n        this.setAttribute(\"valign\", valign);\n        hostElement.style.overflow = \"\";\n        // Decide positioning based on where this panel will be rendered\n        const offsetParentIsBody =\n          this.offsetParent === document?.body || !this.offsetParent;\n        if (offsetParentIsBody) {\n          // viewport-based\n          this.style.left = `${leftOffset + winScrollX}px`;\n          this.style.top = `${topOffset + winScrollY}px`;\n        } else {\n          // container-relative\n          const offsetParentRect = this.offsetParent.getBoundingClientRect();\n          this.style.left = `${leftOffset - offsetParentRect.left}px`;\n          this.style.top = `${topOffset - offsetParentRect.top}px`;\n        }\n      }\n\n      this.style.minWidth = this.hasAttribute(\"min-width-from-anchor\")\n        ? `${anchorWidth}px`\n        : \"\";\n\n      this.removeAttribute(\"showing\");\n    }\n\n    addHideListeners() {\n      if (this.hasAttribute(\"stay-open\") && !this.lastAnchorNode?.hasSubmenu) {\n        // This is intended for inspection in Storybook.\n        return;\n      }\n      // Hide when a panel-item is clicked in the list.\n      this.addEventListener(\"click\", this);\n      // Allows submenus to stopPropagation when focus is already in the menu\n      this.addEventListener(\"keydown\", this);\n      // We need Escape/Tab/ArrowDown to work when opened with the mouse.\n      document.addEventListener(\"keydown\", this);\n      // Hide when a click is initiated outside the panel.\n      document.addEventListener(\"mousedown\", this);\n      // Hide if focus changes and the panel isn't in focus.\n      document.addEventListener(\"focusin\", this);\n      // Reset or focus tracking, we treat the first focusin differently.\n      this.focusHasChanged = false;\n      // Hide on resize, scroll or losing window focus.\n      window.addEventListener(\"resize\", this);\n      window.addEventListener(\"scroll\", this, { capture: true });\n      window.addEventListener(\"blur\", this);\n      if (this.parentIsXULPanel()) {\n        this.parentElement.addEventListener(\"popuphidden\", this);\n      }\n    }\n\n    removeHideListeners() {\n      this.removeEventListener(\"click\", this);\n      this.removeEventListener(\"keydown\", this);\n      document.removeEventListener(\"keydown\", this);\n      document.removeEventListener(\"mousedown\", this);\n      document.removeEventListener(\"focusin\", this);\n      window.removeEventListener(\"resize\", this);\n      window.removeEventListener(\"scroll\", this, { capture: true });\n      window.removeEventListener(\"blur\", this);\n      if (this.parentIsXULPanel()) {\n        this.parentElement.removeEventListener(\"popuphidden\", this);\n      }\n    }\n\n    handleEvent(e) {\n      // Ignore the event if it caused the panel to open.\n      if (e == this.triggeringEvent) {\n        return;\n      }\n\n      let target = this.getTargetForEvent(e);\n      let inPanelList = e.composed\n        ? e.composedPath().some(el => el == this)\n        : e.target.closest && e.target.closest(\"panel-list\") == this;\n\n      switch (e.type) {\n        case \"resize\":\n        case \"scroll\":\n          if (inPanelList) {\n            break;\n          }\n        // Intentional fall-through\n        case \"blur\":\n        case \"popuphidden\":\n          this.hide();\n          break;\n        case \"click\":\n          if (inPanelList) {\n            this.hide(undefined, { force: true });\n          } else {\n            // Avoid falling through to the default click handler of the parent.\n            e.stopPropagation();\n          }\n          break;\n        case \"mousedown\":\n          // Close if there's a click started outside the panel.\n          if (!inPanelList) {\n            this.hide();\n          }\n          break;\n        case \"keydown\":\n          if (e.key === \"ArrowDown\" || e.key === \"ArrowUp\" || e.key === \"Tab\") {\n            // Ignore tabbing with a modifer other than shift.\n            if (e.key === \"Tab\" && (e.altKey || e.ctrlKey || e.metaKey)) {\n              return;\n            }\n\n            // Don't scroll the page or let the regular tab order take effect.\n            e.preventDefault();\n\n            // Prevents the host panel list from responding to these events while\n            // the submenu is active.\n            e.stopPropagation();\n\n            // Keep moving to the next/previous element sibling until we find a\n            // panel-item that isn't hidden.\n            let moveForward =\n              e.key === \"ArrowDown\" || (e.key === \"Tab\" && !e.shiftKey);\n\n            let nextItem = moveForward\n              ? this.focusWalker.nextNode()\n              : this.focusWalker.previousNode();\n\n            // If the next item wasn't found, try looping to the top/bottom.\n            if (!nextItem) {\n              this.focusWalker.currentNode = this;\n              if (moveForward) {\n                nextItem = this.focusWalker.firstChild();\n              } else {\n                nextItem = this.focusWalker.lastChild();\n              }\n            }\n            break;\n          } else if (e.key === \"Escape\") {\n            this.hide(undefined, { force: true });\n          } else if (!e.metaKey && !e.ctrlKey && !e.shiftKey && !e.altKey) {\n            // Check if any of the children have an accesskey for this letter.\n            let item = this.querySelector(\n              `[accesskey=\"${e.key.toLowerCase()}\"],\n              [accesskey=\"${e.key.toUpperCase()}\"]`\n            );\n            if (item) {\n              item.click();\n            }\n          }\n          break;\n        case \"focusin\":\n          if (\n            this.triggeringEvent &&\n            target == this.getTargetForEvent(this.triggeringEvent) &&\n            !this.focusHasChanged\n          ) {\n            // There will be a focusin after the mousedown that opens the panel\n            // using the mouse. Ignore the first focusin event if it's on the\n            // triggering target.\n            this.focusHasChanged = true;\n          } else {\n            // Just record that there was a focusin event.\n            this.focusHasChanged = true;\n          }\n          break;\n      }\n    }\n\n    /**\n     * A TreeWalker that can be used to focus elements. The returned element will\n     * be the element that has gained focus based on the requested movement\n     * through the tree.\n     *\n     * Example:\n     *\n     *   this.focusWalker.currentNode = this;\n     *   // Focus and get the first focusable child.\n     *   let focused = this.focusWalker.nextNode();\n     *   // Focus the second focusable child.\n     *   this.focusWalker.nextNode();\n     */\n    get focusWalker() {\n      if (!this._focusWalker) {\n        this._focusWalker = document.createTreeWalker(\n          this,\n          NodeFilter.SHOW_ELEMENT,\n          {\n            acceptNode: node => {\n              // No need to look at hidden nodes.\n              if (node.hidden) {\n                return NodeFilter.FILTER_REJECT;\n              }\n\n              // Focus the node, if it worked then this is the node we want.\n              node.focus();\n              if (node === node.getRootNode().activeElement) {\n                return NodeFilter.FILTER_ACCEPT;\n              }\n\n              // Continue into child nodes if the parent couldn't be focused.\n              return NodeFilter.FILTER_SKIP;\n            },\n          }\n        );\n      }\n      return this._focusWalker;\n    }\n    async setSubmenuAlign() {\n      const hostElement =\n        this.lastAnchorNode.parentElement || this.getRootNode().host;\n      // The showing attribute allows layout of the panel while remaining hidden\n      // from the user until alignment is set.\n      this.setAttribute(\"showing\", \"true\");\n\n      // Wait for a layout flush, then find the bounds.\n      let {\n        anchorLeft,\n        anchorWidth,\n        anchorTop,\n        parentPanelTop,\n        panelWidth,\n        clientWidth,\n      } = await new Promise(resolve => {\n        requestAnimationFrame(() => {\n          // It's possible this is being used in a context where windowUtils is\n          // not available. In that case, fallback to using the element.\n          let getBounds = el =>\n            window.windowUtils\n              ? window.windowUtils.getBoundsWithoutFlushing(el)\n              : el.getBoundingClientRect();\n          // submenu item in the parent panel list\n          let anchorBounds = getBounds(this.lastAnchorNode);\n          let parentPanelBounds = getBounds(hostElement);\n          let panelBounds = getBounds(this);\n          let clientWidth = document.scrollingElement.clientWidth;\n\n          resolve({\n            anchorLeft: anchorBounds.left,\n            anchorWidth: anchorBounds.width,\n            anchorTop: anchorBounds.top,\n            parentPanelTop: parentPanelBounds.top,\n            panelWidth: panelBounds.width,\n            clientWidth,\n          });\n        });\n      });\n\n      let align = hostElement.getAttribute(\"align\");\n\n      // we use document.scrollingElement.clientWidth to exclude the width\n      // of vertical scrollbars, because its inclusion can cause the submenu\n      // to open to the wrong side and be overlapped by the scrollbar.\n      if (\n        align == \"left\" &&\n        anchorLeft + anchorWidth + panelWidth < clientWidth\n      ) {\n        this.style.left = `${anchorWidth}px`;\n        this.style.right = \"\";\n      } else {\n        this.style.right = `${anchorWidth}px`;\n        this.style.left = \"\";\n      }\n\n      let topOffset =\n        anchorTop -\n        parentPanelTop -\n        (parseFloat(window.getComputedStyle(this)?.paddingTop) || 0);\n      this.style.top = `${topOffset}px`;\n\n      this.removeAttribute(\"showing\");\n    }\n\n    async onShow() {\n      this.sendEvent(\"showing\");\n      this.addHideListeners();\n\n      if (this.lastAnchorNode?.hasSubmenu) {\n        await this.setSubmenuAlign();\n      } else {\n        await this.setAlign();\n      }\n\n      // Always reset this regardless of how the panel list is opened\n      // so the first child will be focusable.\n      this.focusWalker.currentNode = this;\n\n      // Wait until the next paint for the alignment to be set and panel to be\n      // visible.\n      requestAnimationFrame(() => {\n        if (this.wasOpenedByKeyboard) {\n          // Focus the first focusable panel-item if opened by keyboard.\n          this.focusWalker.nextNode();\n        }\n\n        this.lastAnchorNode?.setAttribute(\"aria-expanded\", \"true\");\n\n        this.sendEvent(\"shown\");\n      });\n    }\n\n    onHide() {\n      requestAnimationFrame(() => {\n        this.sendEvent(\"hidden\");\n        this.lastAnchorNode?.setAttribute(\"aria-expanded\", \"false\");\n      });\n      this.removeHideListeners();\n    }\n\n    sendEvent(name, detail) {\n      this.dispatchEvent(\n        new CustomEvent(name, { detail, bubbles: true, composed: true })\n      );\n    }\n  }\n  customElements.define(\"panel-list\", PanelList);\n\n  class PanelItem extends HTMLElement {\n    #initialized = false;\n    #defaultSlot;\n\n    static get observedAttributes() {\n      return [\"accesskey\", \"type\", \"disabled\"];\n    }\n\n    constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n\n      let style = document.createElement(\"link\");\n      style.rel = \"stylesheet\";\n      style.href = __chrome_styles_loader__panelitemStyles;\n\n      this.button = document.createElement(\"button\");\n      this.#setButtonAttributes();\n\n      this.button.setAttribute(\"part\", \"button\");\n      // Use a XUL label element if possible to show the accesskey.\n      this.label = document.createXULElement\n        ? document.createXULElement(\"label\")\n        : document.createElement(\"span\");\n\n      this.button.appendChild(this.label);\n\n      let supportLinkSlot = document.createElement(\"slot\");\n      supportLinkSlot.name = \"support-link\";\n\n      this.#defaultSlot = document.createElement(\"slot\");\n      this.#defaultSlot.style.display = \"none\";\n\n      this.shadowRoot.append(\n        style,\n        this.button,\n        supportLinkSlot,\n        this.#defaultSlot\n      );\n    }\n\n    connectedCallback() {\n      if (!this._l10nRootConnected && document.l10n) {\n        document.l10n.connectRoot(this.shadowRoot);\n        this._l10nRootConnected = true;\n      }\n\n      this.panel =\n        this.getRootNode()?.host?.closest(\"panel-list\") ||\n        this.closest(\"panel-list\");\n\n      if (!this.#initialized) {\n        this.#initialized = true;\n        // When click listeners are added to the panel-item it creates a node in\n        // the a11y tree for this element. This breaks the association between the\n        // menu and the button[role=\"menuitem\"] in this shadow DOM and causes\n        // announcement issues with screen readers. (bug 995064)\n        this.setAttribute(\"role\", \"presentation\");\n\n        this.#setLabelContents();\n\n        // When our content changes, move the text into the label. It doesn't work\n        // with a <slot>, unfortunately.\n        new MutationObserver(() => this.#setLabelContents()).observe(this, {\n          characterData: true,\n          childList: true,\n          subtree: true,\n        });\n\n        if (this.hasSubmenu) {\n          this.panel.setAttribute(\"has-submenu\", \"\");\n          this.icon = document.createElement(\"div\");\n          this.icon.setAttribute(\"class\", \"submenu-icon\");\n          this.label.setAttribute(\"class\", \"submenu-label\");\n\n          this.button.setAttribute(\"class\", \"submenu-container\");\n          this.button.appendChild(this.icon);\n\n          this.submenuSlot = document.createElement(\"slot\");\n          this.submenuSlot.name = \"submenu\";\n\n          this.shadowRoot.append(this.submenuSlot);\n\n          this.setSubmenuContents();\n        }\n      }\n\n      if (this.panel) {\n        this.panel.addEventListener(\"hidden\", this);\n        this.panel.addEventListener(\"shown\", this);\n      }\n\n      if (this.hasSubmenu) {\n        this.addEventListener(\"mouseenter\", this);\n        this.addEventListener(\"mouseleave\", this);\n        this.addEventListener(\"keydown\", this);\n      }\n    }\n\n    disconnectedCallback() {\n      if (this._l10nRootConnected) {\n        document.l10n.disconnectRoot(this.shadowRoot);\n        this._l10nRootConnected = false;\n      }\n\n      if (this.panel) {\n        this.panel.removeEventListener(\"hidden\", this);\n        this.panel.removeEventListener(\"shown\", this);\n        this.panel = null;\n      }\n\n      if (this.hasSubmenu) {\n        this.removeEventListener(\"mouseenter\", this);\n        this.removeEventListener(\"mouseleave\", this);\n        this.removeEventListener(\"keydown\", this);\n      }\n    }\n\n    get hasSubmenu() {\n      return this.hasAttribute(\"submenu\");\n    }\n\n    attributeChangedCallback(name, oldVal, newVal) {\n      if (name === \"accesskey\") {\n        // Bug 1037709 - Accesskey doesn't work in shadow DOM.\n        // Ideally we'd have the accesskey set in shadow DOM, and on\n        // attributeChangedCallback we'd just update the shadow DOM accesskey.\n\n        // Skip this change event if we caused it.\n        if (this._modifyingAccessKey) {\n          this._modifyingAccessKey = false;\n          return;\n        }\n\n        this.label.accessKey = newVal || \"\";\n\n        // Bug 1588156 - Accesskey is not ignored for hidden non-input elements.\n        // Since the accesskey won't be ignored, we need to remove it ourselves\n        // when the panel is closed, and move it back when it opens.\n        if (!this.panel || !this.panel.open) {\n          // When the panel isn't open, just store the key for later.\n          this._accessKey = newVal || null;\n          this._modifyingAccessKey = true;\n          this.accessKey = \"\";\n        } else {\n          this._accessKey = null;\n        }\n      } else if (name === \"type\" || name === \"disabled\") {\n        this.#setButtonAttributes();\n      }\n    }\n\n    #setButtonAttributes() {\n      if (this.type == \"checkbox\") {\n        this.button.setAttribute(\"role\", \"menuitemcheckbox\");\n        this.button.setAttribute(\"aria-checked\", this.checked);\n      } else {\n        this.button.setAttribute(\"role\", \"menuitem\");\n        this.button.removeAttribute(\"aria-checked\");\n      }\n      this.button.toggleAttribute(\"disabled\", this.disabled);\n    }\n\n    #setLabelContents() {\n      this.label.textContent = this.#defaultSlot\n        .assignedNodes()\n        .map(node => node.textContent)\n        .join(\"\");\n    }\n\n    setSubmenuContents() {\n      this.submenuPanel = this.submenuSlot.assignedNodes()[0];\n      if (this.submenuPanel) {\n        this.shadowRoot.append(this.submenuPanel);\n      }\n    }\n\n    get disabled() {\n      return this.hasAttribute(\"disabled\");\n    }\n\n    set disabled(val) {\n      this.toggleAttribute(\"disabled\", val);\n    }\n\n    get checked() {\n      if (this.type !== \"checkbox\") {\n        return false;\n      }\n      return this.hasAttribute(\"checked\");\n    }\n\n    set checked(val) {\n      if (this.type == \"checkbox\") {\n        this.toggleAttribute(\"checked\", val);\n        this.button.setAttribute(\"aria-checked\", !!val);\n      }\n    }\n\n    get type() {\n      return this.getAttribute(\"type\") || \"button\";\n    }\n\n    set type(val) {\n      this.setAttribute(\"type\", val);\n    }\n\n    focus() {\n      this.button.focus();\n    }\n\n    setArrowKeyRTL() {\n      let arrowOpenKey = \"ArrowRight\";\n      let arrowCloseKey = \"ArrowLeft\";\n\n      if (this.submenuPanel.isDocumentRTL()) {\n        arrowOpenKey = \"ArrowLeft\";\n        arrowCloseKey = \"ArrowRight\";\n      }\n      return [arrowOpenKey, arrowCloseKey];\n    }\n\n    handleEvent(e) {\n      // Bug 1588156 - Accesskey is not ignored for hidden non-input elements.\n      // Since the accesskey won't be ignored, we need to remove it ourselves\n      // when the panel is closed, and move it back when it opens.\n      switch (e.type) {\n        case \"shown\":\n          if (this._accessKey) {\n            this.accessKey = this._accessKey;\n            this._accessKey = null;\n          }\n          break;\n        case \"hidden\":\n          if (this.accessKey) {\n            this._accessKey = this.accessKey;\n            this._modifyingAccessKey = true;\n            this.accessKey = \"\";\n          }\n          break;\n        case \"mouseenter\":\n        case \"mouseleave\":\n          this.submenuPanel.toggle(e);\n          break;\n        case \"keydown\":\n          let [arrowOpenKey, arrowCloseKey] = this.setArrowKeyRTL();\n          if (e.key === arrowOpenKey) {\n            this.submenuPanel.show(e, e.target);\n            e.stopPropagation();\n          }\n          if (e.key === arrowCloseKey) {\n            this.submenuPanel.hide(e, { force: true }, e.target);\n            e.stopPropagation();\n          }\n          break;\n      }\n    }\n  }\n  customElements.define(\"panel-item\", PanelItem);\n}\n"],"names":[],"sourceRoot":""}