{"version":3,"file":"moz-select-moz-select-stories.79733113.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-select/moz-select.mjs","webpack:///../../../toolkit/content/widgets/moz-select/moz-select.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__mozselectStyles from \"toolkit/content/widgets/moz-select/moz-select.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { createRef, html, ref } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement, MozLitElement } from \"../lit-utils.mjs\";\n\n/**\n * A select dropdown with options provided via custom `moz-option` elements.\n *\n * @tagname moz-select\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the selected option\n * @property {boolean} disabled - The disabled state of the input control\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {array} options - The array of options, populated by <moz-option> children in the\n *     default slot. Do not set directly, these will be overridden by <moz-option> children.\n */\nexport default class MozSelect extends MozBaseInputElement {\n  static properties = {\n    options: { type: Array, state: true },\n  };\n  static inputLayout = \"block\";\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.options = [];\n    this.slotRef = createRef();\n    this.optionsMutationObserver = new MutationObserver(\n      this.populateOptions.bind(this)\n    );\n  }\n\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.optionsMutationObserver.observe(this, {\n      attributeFilter: [\"label\", \"value\"],\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  update(changedProperties) {\n    super.update(changedProperties);\n    if (this.hasUpdated && changedProperties.has(\"options\")) {\n      // Match the select's value on initial render or options change.\n      this.value = this.inputEl.value;\n    }\n  }\n\n  /**\n   * Internal - populates the select element with options from the light DOM slot.\n   */\n  populateOptions() {\n    this.options = [];\n\n    for (const node of this.slotRef.value.assignedNodes()) {\n      if (node.localName === \"moz-option\") {\n        const optionValue = node.getAttribute(\"value\");\n        const optionLabel = node.getAttribute(\"label\");\n        this.options.push({ value: optionValue, label: optionLabel });\n      }\n    }\n  }\n\n  /**\n   * Handles change events and updates the selected value.\n   *\n   * @param {Event} event\n   * @memberof MozSelect\n   */\n  handleStateChange(event) {\n    this.value = event.target.value;\n  }\n\n  /**\n   * @type {MozBaseInputElement['inputStylesTemplate']}\n   */\n  inputStylesTemplate() {\n    return html` <link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__mozselectStyles}\"\n    />`;\n  }\n\n  inputTemplate() {\n    return html`\n      <select\n        id=\"input\"\n        name=${this.name}\n        accesskey=${this.accessKey}\n        @input=${this.handleStateChange}\n        @change=${this.redispatchEvent}\n        .disabled=${this.disabled}\n        aria-describedby=\"description\"\n      >\n        ${this.options.map(\n          option => html`\n            <option\n              value=${option.value}\n              ?selected=${option.value === this.value}\n            >\n              ${option.label}\n            </option>\n          `\n        )}\n      </select>\n      <slot\n        @slotchange=${this.populateOptions}\n        hidden\n        ${ref(this.slotRef)}\n      ></slot>\n    `;\n  }\n}\ncustomElements.define(\"moz-select\", MozSelect);\n\n/**\n * A custom option element for use in moz-select.\n *\n * @tagname moz-option\n * @property {string} value - The value of the option\n * @property {string} label - The label of the option\n */\nexport class MozOption extends MozLitElement {\n  static properties = {\n    // Reflect the attribute so that moz-select can detect changes with a MutationObserver\n    value: { type: String, reflect: true },\n    // Reflect the attribute so that moz-select can detect changes with a MutationObserver\n    label: { type: String, reflect: true },\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.label = \"\";\n  }\n\n  render() {\n    // This is just a placeholder to pass values into moz-select.\n    return \"\";\n  }\n}\ncustomElements.define(\"moz-option\", MozOption);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport \"./moz-select.mjs\";\n\nexport default {\n  title: \"UI Widgets/Select\",\n  component: \"moz-select\",\n  argTypes: {\n    l10nId: {\n      options: [\"moz-select-label\", \"moz-select-description\"],\n      control: { type: \"select\" },\n    },\n    label: { table: { disable: true } },\n    description: { table: { disable: true } },\n  },\n  parameters: {\n    status: \"in-development\",\n    handles: [\"change\", \"input\"],\n    fluent: `\nmoz-select-label =\n  .label = Select an option\nmoz-select-description =\n  .label = Select an option\n  .description = This is a description for the select dropdown\n    `,\n  },\n};\n\nconst DEFAULT_OPTIONS = [\n  { value: \"1\", label: \"Option 1\" },\n  { value: \"2\", label: \"Option 2\" },\n  { value: \"3\", label: \"Option 3\" },\n];\nconst OTHER_OPTIONS = [\n  { value: \"A\", label: \"Option A\" },\n  { value: \"B\", label: \"Option B\" },\n  { value: \"C\", label: \"Option C\" },\n  { value: \"D\", label: \"Option D\" },\n];\n\nconst Template = ({\n  name,\n  value,\n  iconSrc,\n  disabled,\n  l10nId,\n  description,\n  supportPage,\n  accessKey,\n  hasSlottedDescription,\n  useOtherOptions,\n  options = useOtherOptions ? OTHER_OPTIONS : DEFAULT_OPTIONS,\n  hasSlottedSupportLink,\n}) => html`\n  <moz-select\n    name=${name}\n    value=${ifDefined(value || null)}\n    iconsrc=${ifDefined(iconSrc || null)}\n    ?disabled=${disabled}\n    data-l10n-id=${l10nId}\n    support-page=${ifDefined(supportPage || null)}\n    accesskey=${ifDefined(accessKey || null)}\n  >\n    ${hasSlottedDescription\n      ? html`<div slot=\"description\">${description}</div>`\n      : \"\"}\n    ${hasSlottedSupportLink\n      ? html`<a slot=\"support-link\" href=\"www.example.com\">Click me!</a>`\n      : \"\"}\n    ${options.map(\n      opt =>\n        html`<moz-option value=${opt.value} label=${opt.label}></moz-option>`\n    )}\n  </moz-select>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  name: \"example-moz-select\",\n  value: \"\",\n  iconSrc: \"\",\n  disabled: false,\n  l10nId: \"moz-select-label\",\n  description: \"\",\n  supportPage: \"\",\n  accessKey: \"\",\n  hasSlottedDescription: false,\n  useOtherOptions: false,\n  hasSlottedSupportLink: false,\n};\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = {\n  ...Default.args,\n  iconSrc: \"chrome://global/skin/icons/highlights.svg\",\n};\n\nexport const WithDescription = Template.bind({});\nWithDescription.args = {\n  ...Default.args,\n  l10nId: \"moz-select-description\",\n};\n\nexport const WithSlottedDescription = Template.bind({});\nWithSlottedDescription.args = {\n  ...Default.args,\n  description: \"This is a custom slotted description.\",\n  hasSlottedDescription: true,\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  ...Default.args,\n  disabled: true,\n};\n\nexport const WithAccesskey = Template.bind({});\nWithAccesskey.args = {\n  ...Default.args,\n  accessKey: \"s\",\n};\n\nexport const WithSupportLink = Template.bind({});\nWithSupportLink.args = {\n  ...Default.args,\n  supportPage: \"support-page\",\n  l10nId: \"moz-select-description\",\n};\n\nexport const WithSlottedSupportLink = Template.bind({});\nWithSlottedSupportLink.args = {\n  ...Default.args,\n  hasSlottedSupportLink: true,\n  l10nId: \"moz-select-description\",\n};\n\nexport const PreselectedValue = Template.bind({});\nPreselectedValue.args = {\n  ...Default.args,\n  value: \"2\",\n};\n"],"names":[],"sourceRoot":""}