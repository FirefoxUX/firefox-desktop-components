{"version":3,"file":"turn-on-scheduled-backups-stories.a7fbd00c.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACvhOA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AChTA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://browser-storybook/../backup/content/password-rules-tooltip.mjs","webpack://browser-storybook/../backup/content/password-validation-inputs.mjs","webpack://browser-storybook/../backup/content/turn-on-scheduled-backups.mjs","webpack://browser-storybook/../backup/content/turn-on-scheduled-backups.stories.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-card/moz-card.mjs"],"sourcesContent":["import __chrome_styles_loader__passwordrulestooltipStyles from \"browser/components/backup/content/password-rules-tooltip.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * The widget for enabling password protection if the backup is not yet\n * encrypted.\n */\nexport default class PasswordRulesTooltip extends MozLitElement {\n  static properties = {\n    hasCommon: { type: Boolean },\n    hasEmail: { type: Boolean },\n    tooShort: { type: Boolean },\n    supportBaseLink: { type: String },\n  };\n\n  static get queries() {\n    return {\n      passwordRulesEl: \"#password-rules-wrapper\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.hasCommon = false;\n    this.hasEmail = false;\n    this.tooShort = false;\n    this.supportBaseLink = \"\";\n  }\n\n  getRuleStateConstants(hasInvalidCondition) {\n    if (hasInvalidCondition) {\n      return {\n        class: \"warning\",\n        icon: \"chrome://global/skin/icons/warning.svg\",\n        l10nId: \"password-rules-a11y-warning\",\n      };\n    }\n\n    return {\n      class: \"success\",\n      icon: \"chrome://global/skin/icons/check-filled.svg\",\n      l10nId: \"password-rules-a11y-success\",\n    };\n  }\n\n  render() {\n    let lengthConstants = this.getRuleStateConstants(this.tooShort);\n    let emailConstants = this.getRuleStateConstants(this.hasEmail);\n    // TODO: (bug 1905140) read list of common passwords - default to success state for now\n    let commonConstants = this.getRuleStateConstants(this.hasCommon);\n\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__passwordrulestooltipStyles}\"\n      />\n      <div id=\"password-rules-wrapper\" aria-live=\"polite\">\n        <h2\n          id=\"password-rules-header\"\n          data-l10n-id=\"password-rules-header\"\n        ></h2>\n        <ul>\n          <li>\n            <img\n              data-l10n-id=${lengthConstants.l10nId}\n              class=\"icon ${lengthConstants.class}\"\n              src=${lengthConstants.icon}\n            />\n            <span\n              data-l10n-id=\"password-rules-length-description\"\n              class=\"rule-description\"\n            ></span>\n          </li>\n          <li>\n            <img\n              data-l10n-id=${emailConstants.l10nId}\n              class=\"icon ${emailConstants.class}\"\n              src=${emailConstants.icon}\n            />\n            <span\n              data-l10n-id=\"password-rules-email-description\"\n              class=\"rule-description\"\n            ></span>\n          </li>\n          <li>\n            <img\n              data-l10n-id=${commonConstants.l10nId}\n              class=\"icon ${commonConstants.class}\"\n              src=${commonConstants.icon}\n            />\n            <span\n              data-l10n-id=\"password-rules-common-description\"\n              class=\"rule-description\"\n            ></span>\n          </li>\n          <li>\n            <img\n              class=\"icon\"\n              src=\"chrome://browser/skin/preferences/category-privacy-security.svg\"\n            />\n            <span data-l10n-id=\"password-rules-disclaimer\"\n              ><a\n                data-l10n-name=\"password-support-link\"\n                target=\"_blank\"\n                href=${`${this.supportBaseLink}password-strength`}\n              ></a\n            ></span>\n          </li>\n        </ul>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"password-rules-tooltip\", PasswordRulesTooltip);\n","import __chrome_styles_loader__passwordvalidationinputsStyles from \"browser/components/backup/content/password-validation-inputs.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/password-rules-tooltip.mjs\";\n\n/**\n * The widget for enabling password protection if the backup is not yet\n * encrypted.\n */\nexport default class PasswordValidationInputs extends MozLitElement {\n  static properties = {\n    _hasCommon: { type: Boolean, state: true },\n    _hasEmail: { type: Boolean, state: true },\n    _passwordsMatch: { type: Boolean, state: true },\n    _passwordsValid: { type: Boolean, state: true },\n    _showRules: { type: Boolean, state: true },\n    _tooShort: { type: Boolean, state: true },\n    /**\n     * If, by chance, there is focus on a focusable element in the tooltip,\n     * track the focus state so that we can keep the tooltip open.\n     */\n    _tooltipFocus: { type: Boolean, state: true },\n    supportBaseLink: { type: String },\n  };\n\n  static get queries() {\n    return {\n      formEl: \"#password-inputs-form\",\n      inputNewPasswordEl: \"#new-password-input\",\n      inputRepeatPasswordEl: \"#repeat-password-input\",\n      passwordRulesEl: \"#password-rules\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.supportBaseLink = \"\";\n    this._tooShort = true;\n    this._hasCommon = false;\n    this._hasEmail = false;\n    this._passwordsMatch = false;\n    this._passwordsValid = false;\n    this._tooltipFocus = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"resetInputs\", this.handleReset);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"resetInputs\", this.handleReset);\n  }\n\n  handleReset() {\n    this.formEl.reset();\n    this._showRules = false;\n    this._hasCommon = false;\n    this._hasEmail = false;\n    this._tooShort = true;\n    this._passwordsMatch = false;\n    this._passwordsValid = false;\n    this._tooltipFocus = false;\n  }\n\n  handleFocusNewPassword() {\n    this._showRules = true;\n  }\n\n  handleBlurNewPassword(event) {\n    this._showRules = !event.target.checkValidity();\n  }\n\n  handleChangeNewPassword() {\n    this.updatePasswordValidity();\n  }\n\n  handleChangeRepeatPassword() {\n    this.updatePasswordValidity();\n  }\n\n  updatePasswordValidity() {\n    const emailRegex = /^[\\w!#$%&'*+/=?^`{|}~.-]+@[A-Z0-9-]+\\.[A-Z0-9.-]+$/i;\n    this._hasEmail = emailRegex.test(this.inputNewPasswordEl.value);\n    if (this._hasEmail) {\n      // TODO: we need a localized string for this error (bug 1909983)\n      this.inputNewPasswordEl.setCustomValidity(\"TODO: no emails\");\n    } else {\n      this.inputNewPasswordEl.setCustomValidity(\"\");\n    }\n\n    const newPassValidity = this.inputNewPasswordEl.validity;\n    this._tooShort = newPassValidity?.valueMissing || newPassValidity?.tooShort;\n\n    this._passwordsMatch =\n      this.inputNewPasswordEl.value == this.inputRepeatPasswordEl.value;\n    if (!this._passwordsMatch) {\n      // TODO: we need a localized string for this error  (bug 1909983)\n      this.inputRepeatPasswordEl.setCustomValidity(\"TODO: not matching\");\n    } else {\n      this.inputRepeatPasswordEl.setCustomValidity(\"\");\n    }\n\n    const repeatPassValidity = this.inputRepeatPasswordEl.validity;\n    this._passwordsValid =\n      newPassValidity?.valid &&\n      repeatPassValidity?.valid &&\n      this._passwordsMatch;\n\n    /**\n     * This step may involve async validation with BackupService. For instance, we have to\n     * check against a list of common passwords (bug 1905140) and display an error message if an\n     * issue occurs (bug 1905145).\n     */\n  }\n\n  handleTooltipFocus() {\n    this._tooltipFocus = true;\n  }\n\n  handleTooltipBlur() {\n    this._tooltipFocus = false;\n  }\n\n  /**\n   * Dispatches a custom event whenever validity changes.\n   *\n   * @param {Map<string, any>} changedProperties a Map of recently changed properties and their new values\n   */\n  updated(changedProperties) {\n    if (!changedProperties.has(\"_passwordsValid\")) {\n      return;\n    }\n\n    if (this._passwordsValid) {\n      this.dispatchEvent(\n        new CustomEvent(\"ValidPasswordsDetected\", {\n          bubbles: true,\n          composed: true,\n          detail: {\n            password: this.inputNewPasswordEl.value,\n          },\n        })\n      );\n    } else {\n      this.dispatchEvent(\n        new CustomEvent(\"InvalidPasswordsDetected\", {\n          bubbles: true,\n          composed: true,\n        })\n      );\n    }\n  }\n\n  contentTemplate() {\n    return html`\n      <div id=\"password-inputs-wrapper\" aria-live=\"polite\">\n        <form id=\"password-inputs-form\">\n          <!--TODO: (bug 1909983) change first input field label for the \"change-password\" dialog-->\n          <label id=\"new-password-label\" for=\"new-password-input\">\n            <div id=\"new-password-label-wrapper-span-input\">\n              <span\n                id=\"new-password-span\"\n                data-l10n-id=\"enable-backup-encryption-create-password-label\"\n              ></span>\n              <input\n                type=\"password\"\n                id=\"new-password-input\"\n                minlength=\"8\"\n                required\n                @input=${this.handleChangeNewPassword}\n                @focus=${this.handleFocusNewPassword}\n                @blur=${this.handleBlurNewPassword}\n              />\n              <!--TODO: (bug 1909984) improve how we read out the first input field for screen readers-->\n            </div>\n          </label>\n          <!--TODO: (bug 1909984) look into how the tooltip vs dialog behaves when pressing the ESC key-->\n          <password-rules-tooltip\n            id=\"password-rules\"\n            class=${!this._showRules && !this._tooltipFocus ? \"hidden\" : \"\"}\n            .hasCommon=${this._hasCommon}\n            .hasEmail=${this._hasEmail}\n            .tooShort=${this._tooShort}\n            .supportBaseLink=${this.supportBaseLink}\n            @focus=${this.handleTooltipFocus}\n            @blur=${this.handleTooltipBlur}\n          ></password-rules-tooltip>\n          <label id=\"repeat-password-label\" for=\"repeat-password-input\">\n            <span\n              id=\"repeat-password-span\"\n              data-l10n-id=\"enable-backup-encryption-repeat-password-label\"\n            ></span>\n            <input\n              type=\"password\"\n              id=\"repeat-password-input\"\n              minlength=\"8\"\n              required\n              @input=${this.handleChangeRepeatPassword}\n            />\n          </label>\n        </form>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__passwordvalidationinputsStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"password-validation-inputs\", PasswordValidationInputs);\n","import __chrome_styles_loader__turnonscheduledbackupsStyles from \"browser/components/backup/content/turn-on-scheduled-backups.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/password-validation-inputs.mjs\";\n\n/**\n * The widget for showing available options when users want to turn on\n * scheduled backups.\n */\nexport default class TurnOnScheduledBackups extends MozLitElement {\n  #placeholderIconURL = \"chrome://global/skin/icons/page-portrait.svg\";\n\n  static properties = {\n    defaultIconURL: { type: String, reflect: true },\n    defaultLabel: { type: String, reflect: true },\n    defaultPath: { type: String, reflect: true },\n    _newIconURL: { type: String },\n    _newLabel: { type: String },\n    _newPath: { type: String },\n    _showPasswordOptions: { type: Boolean, reflect: true, state: true },\n    _passwordsMatch: { type: Boolean, state: true },\n    _inputPassValue: { type: String, state: true },\n    supportBaseLink: { type: String },\n  };\n\n  static get queries() {\n    return {\n      cancelButtonEl: \"#backup-turn-on-scheduled-cancel-button\",\n      confirmButtonEl: \"#backup-turn-on-scheduled-confirm-button\",\n      filePathButtonEl: \"#backup-location-filepicker-button\",\n      filePathInputCustomEl: \"#backup-location-filepicker-input-custom\",\n      filePathInputDefaultEl: \"#backup-location-filepicker-input-default\",\n      passwordOptionsCheckboxEl: \"#sensitive-data-checkbox-input\",\n      passwordOptionsExpandedEl: \"#passwords\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.defaultIconURL = \"\";\n    this.defaultLabel = \"\";\n    this.defaultPath = \"\";\n    this._newIconURL = \"\";\n    this._newLabel = \"\";\n    this._newPath = \"\";\n    this._showPasswordOptions = false;\n    this._passwordsMatch = false;\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n\n    this.addEventListener(\"BackupUI:SelectNewFilepickerPath\", this);\n    this.addEventListener(\"ValidPasswordsDetected\", this);\n    this.addEventListener(\"InvalidPasswordsDetected\", this);\n  }\n\n  handleEvent(event) {\n    if (event.type == \"BackupUI:SelectNewFilepickerPath\") {\n      let { path, filename, iconURL } = event.detail;\n      this._newPath = path;\n      this._newLabel = filename;\n      this._newIconURL = iconURL;\n    } else if (event.type == \"ValidPasswordsDetected\") {\n      let { password } = event.detail;\n      this._passwordsMatch = true;\n      this._inputPassValue = password;\n    } else if (event.type == \"InvalidPasswordsDetected\") {\n      this._passwordsMatch = false;\n      this._inputPassValue = \"\";\n    }\n  }\n\n  async handleChooseLocation() {\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:ShowFilepicker\", {\n        bubbles: true,\n        detail: {\n          win: window.browsingContext,\n        },\n      })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n    this.resetChanges();\n  }\n\n  handleConfirm() {\n    let detail = {\n      parentDirPath: this._newPath || this.defaultPath,\n    };\n\n    if (this._showPasswordOptions && this._passwordsMatch) {\n      detail.password = this._inputPassValue;\n    }\n\n    this.dispatchEvent(\n      new CustomEvent(\"turnOnScheduledBackups\", {\n        bubbles: true,\n        composed: true,\n        detail,\n      })\n    );\n    this.resetChanges();\n  }\n\n  handleTogglePasswordOptions() {\n    this._showPasswordOptions = this.passwordOptionsCheckboxEl?.checked;\n    this._passwordsMatch = false;\n  }\n\n  resetChanges() {\n    this._newPath = \"\";\n    this._newIconURL = \"\";\n    this._newLabel = \"\";\n    this._showPasswordOptions = false;\n    this.passwordOptionsCheckboxEl.checked = false;\n    this._passwordsMatch = false;\n    this._inputPassValue = \"\";\n\n    if (this.passwordOptionsExpandedEl) {\n      this.passwordOptionsExpandedEl.dispatchEvent(\n        new CustomEvent(\"resetInputs\", { bubbles: true, composed: true })\n      );\n    }\n  }\n\n  defaultFilePathInputTemplate() {\n    let filename = this.defaultLabel;\n    let iconURL = this.defaultIconURL || this.#placeholderIconURL;\n\n    return html`\n      <input\n        id=\"backup-location-filepicker-input-default\"\n        class=\"backup-location-filepicker-input\"\n        type=\"text\"\n        readonly\n        data-l10n-id=\"turn-on-scheduled-backups-location-default-folder\"\n        data-l10n-args=${JSON.stringify({\n          recommendedFolder: filename,\n        })}\n        data-l10n-attrs=\"value\"\n        style=${`background-image: url(${iconURL})`}\n      />\n    `;\n  }\n\n  customFilePathInputTemplate() {\n    let filename = this._newLabel;\n    let iconURL = this._newIconURL || this.#placeholderIconURL;\n\n    return html`\n      <input\n        id=\"backup-location-filepicker-input-custom\"\n        class=\"backup-location-filepicker-input\"\n        type=\"text\"\n        readonly\n        value=${filename}\n        style=${`background-image: url(${iconURL})`}\n      />\n    `;\n  }\n\n  allOptionsTemplate() {\n    return html`\n      <fieldset id=\"all-controls\">\n        <div id=\"backup-location-controls\">\n          <label\n            id=\"backup-location-label\"\n            for=\"backup-location-filepicker-input\"\n            data-l10n-id=\"turn-on-scheduled-backups-location-label\"\n          ></label>\n          <div id=\"backup-location-filepicker\">\n            ${!this._newPath\n              ? this.defaultFilePathInputTemplate()\n              : this.customFilePathInputTemplate()}\n            <moz-button\n              id=\"backup-location-filepicker-button\"\n              @click=${this.handleChooseLocation}\n              data-l10n-id=\"turn-on-scheduled-backups-location-choose-button\"\n              aria-controls=\"backup-location-filepicker-input\"\n            ></moz-button>\n          </div>\n        </div>\n\n        <fieldset id=\"sensitive-data-controls\">\n          <div id=\"sensitive-data-checkbox\">\n            <label\n              id=\"sensitive-data-checkbox-label\"\n              for=\"sensitive-data-checkbox-input\"\n              aria-controls=\"passwords\"\n              aria-expanded=${this._showPasswordOptions}\n            >\n              <input\n                id=\"sensitive-data-checkbox-input\"\n                value=${this._showPasswordOptions}\n                @click=${this.handleTogglePasswordOptions}\n                type=\"checkbox\"\n              />\n              <span\n                id=\"sensitive-data-checkbox-span\"\n                data-l10n-id=\"turn-on-scheduled-backups-encryption-label\"\n              ></span>\n            </label>\n            <span\n              class=\"text-deemphasized\"\n              data-l10n-id=\"turn-on-scheduled-backups-encryption-description\"\n            ></span>\n          </div>\n\n          ${this._showPasswordOptions ? this.passwordsTemplate() : null}\n        </fieldset>\n      </fieldset>\n    `;\n  }\n\n  passwordsTemplate() {\n    return html`\n      <password-validation-inputs\n        id=\"passwords\"\n        .supportBaseLink=${this.supportBaseLink}\n      ></password-validation-inputs>\n    `;\n  }\n\n  contentTemplate() {\n    return html`\n      <form\n        id=\"backup-turn-on-scheduled-wrapper\"\n        aria-labelledby=\"backup-turn-on-scheduled-header\"\n        aria-describedby=\"backup-turn-on-scheduled-description\"\n      >\n        <h1\n          id=\"backup-turn-on-scheduled-header\"\n          class=\"heading-medium\"\n          data-l10n-id=\"turn-on-scheduled-backups-header\"\n        ></h1>\n        <main id=\"backup-turn-on-scheduled-content\">\n          <div id=\"backup-turn-on-scheduled-description\">\n            <span\n              id=\"backup-turn-on-scheduled-description-span\"\n              data-l10n-id=\"turn-on-scheduled-backups-description\"\n            ></span>\n            <!--TODO: finalize support page links (bug 1900467)-->\n            <a\n              id=\"backup-turn-on-scheduled-learn-more-link\"\n              is=\"moz-support-link\"\n              support-page=\"todo-backup\"\n              data-l10n-id=\"turn-on-scheduled-backups-support-link\"\n            ></a>\n          </div>\n          ${this.allOptionsTemplate()}\n        </main>\n\n        <moz-button-group id=\"backup-turn-on-scheduled-button-group\">\n          <moz-button\n            id=\"backup-turn-on-scheduled-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"turn-on-scheduled-backups-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"backup-turn-on-scheduled-confirm-button\"\n            form=\"backup-turn-on-scheduled-wrapper\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=\"turn-on-scheduled-backups-confirm-button\"\n            ?disabled=${this._showPasswordOptions && !this._passwordsMatch}\n          ></moz-button>\n        </moz-button-group>\n      </form>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__turnonscheduledbackupsStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"turn-on-scheduled-backups\", TurnOnScheduledBackups);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html, ifDefined } from \"lit.all.mjs\";\nimport \"chrome://global/content/elements/moz-card.mjs\";\nimport \"./turn-on-scheduled-backups.mjs\";\n\nwindow.MozXULElement.insertFTLIfNeeded(\"locales-preview/backupSettings.ftl\");\nwindow.MozXULElement.insertFTLIfNeeded(\"branding/brand.ftl\");\n\nexport default {\n  title: \"Domain-specific UI Widgets/Backup/Turn On Scheduled Backups\",\n  component: \"turn-on-scheduled-backups\",\n  argTypes: {},\n};\n\nconst Template = ({ defaultPath, _newPath, defaultLabel, _newLabel }) => html`\n  <moz-card style=\"width: 27.8rem; position: relative;\">\n    <turn-on-scheduled-backups\n      defaultPath=${defaultPath}\n      _newPath=${ifDefined(_newPath)}\n      defaultLabel=${defaultLabel}\n      _newLabel=${ifDefined(_newLabel)}\n    ></turn-on-scheduled-backups>\n  </moz-card>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  defaultPath: \"/Some/User/Documents\",\n  defaultLabel: \"Documents\",\n};\n\nexport const CustomLocation = Template.bind({});\nCustomLocation.args = {\n  ...Default.args,\n  _newPath: \"/Some/Test/Custom/Dir\",\n  _newLabel: \"Dir\",\n};\n","import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} icon - (optional) A flag to indicate the header should include an icon\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentSlotEl: \"#content\",\n  };\n\n  static properties = {\n    heading: { type: String },\n    icon: { type: Boolean },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.expanded = false;\n    this.type = \"default\";\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          this.icon,\n          () =>\n            html`<div part=\"icon\" id=\"heading-icon\" role=\"presentation\"></div>`\n        )}\n        <span id=\"heading\">${this.heading}</span>\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details id=\"moz-card-details\" @toggle=\"${this.onToggle}\">\n          <summary>${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      ${this.headingTemplate()}\n      <div id=\"content\" aria-describedby=\"content\">\n        <slot></slot>\n      </div>\n    `;\n  }\n  /**\n   * Handles the click event on the chevron icon.\n   *\n   * Without this, the click event would be passed to\n   * toggleDetails which would force the details element\n   * to stay open.\n   *\n   * @memberof MozCard\n   */\n  onDetailsClick() {\n    this.toggleDetails();\n  }\n\n  /**\n   * @param {boolean} force - Used to force open or force close the\n   * details element.\n   * @memberof MozCard\n   */\n  toggleDetails(force) {\n    this.detailsEl.open = force ?? !this.detailsEl.open;\n  }\n\n  onToggle() {\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n"],"names":[],"sourceRoot":""}