{"version":3,"file":"input-field-input-field-stories.1fc1fab7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjjIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AC1CA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://browser-storybook/../aboutlogins/content/components/input-field/input-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/input-field.stories.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/login-origin-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/login-password-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/login-username-field.mjs"],"sourcesContent":["import __chrome_styles_loader__inputfieldStyles from \"browser/components/aboutlogins/content/components/input-field/input-field.css\";\nimport __chrome_styles_loader__commonStyles from \"toolkit/themes/linux/global/in-content/common.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\n\nexport const stylesTemplate = () =>\n  html`\n    <link rel=\"stylesheet\" href=\"${__chrome_styles_loader__commonStyles}\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__inputfieldStyles}\"\n    />\n  `;\n\nexport const editableFieldTemplate = ({\n  type,\n  value,\n  inputId,\n  disabled,\n  onFocus,\n  onBlur,\n}) =>\n  html`<input\n    class=\"input-field\"\n    data-l10n-id=${ifDefined(inputId)}\n    type=${type}\n    value=${value}\n    ?disabled=${disabled}\n    @focus=${onFocus}\n    @blur=${onBlur}\n  />`;\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\nimport \"./login-password-field.mjs\";\nimport \"./login-username-field.mjs\";\nimport \"./login-origin-field.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Credential Management/Input Fields\",\n};\n\nwindow.MozXULElement.insertFTLIfNeeded(\"browser/aboutLogins.ftl\");\n\nexport const LoginUsernameField = ({ value, readonly }) => {\n  return html`\n    <div style=\"max-width: 500px\">\n      <login-username-field .value=${value} .readonly=${readonly}>\n      </login-username-field>\n    </div>\n  `;\n};\n\nLoginUsernameField.argTypes = {\n  value: {\n    control: \"text\",\n    defaultValue: \"username\",\n  },\n  readonly: {\n    control: \"boolean\",\n    defaultValue: false,\n  },\n};\n\nexport const LoginOriginField = ({ value, readonly }) => {\n  return html`\n    <div style=\"max-width: 500px\">\n      <login-origin-field .value=${value} .readonly=${readonly}>\n      </login-origin-field>\n    </div>\n  `;\n};\n\nLoginOriginField.argTypes = {\n  value: {\n    control: \"text\",\n    defaultValue: \"https://example.com\",\n  },\n  readonly: {\n    control: \"boolean\",\n    defaultValue: false,\n  },\n};\n\nexport const LoginPasswordField = ({\n  readonly,\n  visible,\n  value = \"longpassword\".repeat(2),\n}) => {\n  return html`\n    <div style=\"max-width: 500px\">\n      <login-password-field\n        .value=${value}\n        .readonly=${readonly}\n        .visible=${visible}\n        .onPasswordVisible=${() => alert(\"auth...\")}\n      >\n      </login-password-field>\n    </div>\n  `;\n};\n\nLoginPasswordField.argTypes = {\n  readonly: {\n    control: \"boolean\",\n    defaultValue: true,\n  },\n  visible: {\n    control: \"boolean\",\n    defaultValue: false,\n  },\n};\n\nexport const LoginPasswordFieldDisplayMode = ({\n  visible,\n  value = \"longpassword\".repeat(2),\n}) => {\n  return html`\n    <div style=\"max-width: 500px\">\n      <login-password-field\n        .value=${value}\n        .readonly=${true}\n        .visible=${visible}\n      >\n      </login-password-field>\n    </div>\n  `;\n};\n\nLoginPasswordFieldDisplayMode.argTypes = {\n  visible: {\n    control: \"boolean\",\n    defaultValue: false,\n  },\n};\n\nexport const LoginPasswordFieldEditMode = ({\n  visible,\n  value = \"longpassword\".repeat(2),\n}) => {\n  return html`\n    <div style=\"max-width: 500px\">\n      <login-password-field\n        .value=${value}\n        .readonly=${false}\n        .visible=${visible}\n      >\n      </login-password-field>\n    </div>\n  `;\n};\n\nLoginPasswordFieldEditMode.argTypes = {\n  visible: {\n    control: \"boolean\",\n    defaultValue: false,\n  },\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginOriginField extends MozLitElement {\n  static properties = {\n    value: { type: String, reflect: true },\n    readonly: { type: Boolean, reflect: true },\n  };\n\n  get readonlyTemplate() {\n    return html`\n      <a\n        class=\"origin-input\"\n        dir=\"auto\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        name=\"origin\"\n        href=${this.value}\n      >\n        ${this.value}\n      </a>\n    `;\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      <label class=\"field-label\" data-l10n-id=\"login-item-origin-label\"></label>\n      ${this.readonly\n        ? this.readonlyTemplate\n        : editableFieldTemplate({\n            type: \"url\",\n            value: this.value,\n          })}\n    `;\n  }\n}\n\ncustomElements.define(\"login-origin-field\", LoginOriginField);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, classMap } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginPasswordField extends MozLitElement {\n  static CONCEALED_PASSWORD_TEXT = \" \".repeat(8);\n\n  static properties = {\n    _value: { type: String, state: true },\n    readonly: { type: Boolean, reflect: true },\n    visible: { type: Boolean, reflect: true },\n  };\n\n  static queries = {\n    input: \"input\",\n    button: \"button\",\n  };\n\n  set value(newValue) {\n    this._value = newValue;\n  }\n\n  get #type() {\n    return this.visible ? \"text\" : \"password\";\n  }\n\n  get #password() {\n    return this.readonly && !this.visible\n      ? LoginPasswordField.CONCEALED_PASSWORD_TEXT\n      : this._value;\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      <label\n        class=\"field-label\"\n        data-l10n-id=\"login-item-password-label\"\n      ></label>\n      ${editableFieldTemplate({\n        type: this.#type,\n        value: this.#password,\n        labelId: \"login-item-password-label\",\n        disabled: this.readonly,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n      })}\n      <button\n        class=${classMap({\n          revealed: this.visible,\n          \"reveal-password-button\": true,\n        })}\n        data-l10n-id=\"login-item-password-reveal-checkbox\"\n        @click=${this.toggleVisibility}\n      ></button>\n    `;\n  }\n\n  handleFocus(ev) {\n    if (ev.relatedTarget !== this.button) {\n      this.visible = true;\n    }\n  }\n\n  handleBlur(ev) {\n    if (ev.relatedTarget !== this.button) {\n      this.visible = false;\n    }\n  }\n\n  toggleVisibility() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.onPasswordVisible?.();\n    }\n    this.input.focus();\n  }\n}\n\ncustomElements.define(\"login-password-field\", LoginPasswordField);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginUsernameField extends MozLitElement {\n  static properties = {\n    value: { type: String, reflect: true },\n    readonly: { type: Boolean, reflect: true },\n  };\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      <label\n        class=\"field-label\"\n        data-l10n-id=\"login-item-username-label\"\n      ></label>\n      ${editableFieldTemplate({\n        type: \"text\",\n        value: this.value,\n        disabled: this.readonly,\n      })}\n    `;\n  }\n}\n\ncustomElements.define(\"login-username-field\", LoginUsernameField);\n"],"names":[],"sourceRoot":""}