{"version":3,"file":"moz-input-search-moz-input-search-stories.165744d7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9IA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-input-search/moz-input-search.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-input-search/moz-input-search.mjs","webpack:///../../../toolkit/content/widgets/moz-input-text/moz-input-text.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport \"./moz-input-search.mjs\";\n\nexport default {\n  title: \"UI Widgets/Input Search\",\n  component: \"moz-input-search\",\n  argTypes: {\n    l10nId: {\n      options: [\n        \"moz-input-search-label\",\n        \"moz-input-search-placeholder\",\n        \"moz-input-search-description\",\n        \"moz-input-search-label-wrapped\",\n      ],\n      control: { type: \"select\" },\n    },\n  },\n  parameters: {\n    status: \"in-development\",\n    handles: [\"change\", \"input\"],\n    fluent: `\nmoz-input-search-label =\n  .label = This is a search input\nmoz-input-search-placeholder =\n  .label = This is a search input\n  .placeholder = Placeholder text\nmoz-input-search-description =\n  .label = This is a search input\n  .description = Description for the search input\n  .placeholder = Placeholder text\nmoz-input-search-label-wrapped =\n  .label = Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tristique justo leo, ac pellentesque lacus gravida vitae. Nam pellentesque suscipit venenatis.\n    `,\n  },\n};\n\nconst Template = ({\n  name,\n  value,\n  iconSrc,\n  disabled,\n  l10nId,\n  description,\n  supportPage,\n  accessKey,\n  hasSlottedDescription,\n  hasSlottedSupportLink,\n  ellipsized,\n}) => html`\n  <moz-input-search\n    name=${name}\n    value=${ifDefined(value || null)}\n    iconsrc=${ifDefined(iconSrc || null)}\n    ?disabled=${disabled}\n    data-l10n-id=${l10nId}\n    support-page=${ifDefined(supportPage || null)}\n    accesskey=${ifDefined(accessKey || null)}\n    class=${classMap({ \"text-truncated-ellipsis\": ellipsized })}\n  >\n    ${hasSlottedDescription\n      ? html`<div slot=\"description\">${description}</div>`\n      : \"\"}\n    ${hasSlottedSupportLink\n      ? html`<a slot=\"support-link\" href=\"www.example.com\">Click me!</a>`\n      : \"\"}\n  </moz-input-search>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  name: \"example-moz-input-search\",\n  value: \"\",\n  iconSrc: \"\",\n  disabled: false,\n  l10nId: \"moz-input-search-label\",\n  supportPage: \"\",\n  accessKey: \"\",\n  hasSlottedDescription: false,\n  hasSlottedSupportLink: false,\n};\n\nexport const WithPlaceholder = Template.bind({});\nWithPlaceholder.args = {\n  ...Default.args,\n  l10nId: \"moz-input-search-placeholder\",\n};\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = {\n  ...Default.args,\n  iconSrc: \"chrome://global/skin/icons/highlights.svg\",\n};\n\nexport const withDescription = Template.bind({});\nwithDescription.args = {\n  ...Default.args,\n  l10nId: \"moz-input-search-description\",\n};\n\nexport const WithSlottedDescription = Template.bind({});\nWithSlottedDescription.args = {\n  ...Default.args,\n  description: \"This is a custom slotted description.\",\n  hasSlottedDescription: true,\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  ...Default.args,\n  l10nId: \"moz-input-search-description\",\n  disabled: true,\n};\n\nexport const WithAccesskey = Template.bind({});\nWithAccesskey.args = {\n  ...Default.args,\n  accessKey: \"s\",\n};\n\nexport const WithSupportLink = Template.bind({});\nWithSupportLink.args = {\n  ...Default.args,\n  supportPage: \"support-page\",\n  l10nId: \"moz-input-search-description\",\n};\n\nexport const WithSlottedSupportLink = Template.bind({});\nWithSlottedSupportLink.args = {\n  ...Default.args,\n  hasSlottedSupportLink: true,\n  l10nId: \"moz-input-search-description\",\n};\n\nexport const WithEllipsizedLabel = Template.bind({});\nWithEllipsizedLabel.args = {\n  ...Default.args,\n  ellipsized: true,\n  l10nId: \"moz-input-search-label-wrapped\",\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport MozInputText from \"chrome://global/content/elements/moz-input-text.mjs\";\n\n/**\n * A search input custom element.\n *\n * @tagname moz-input-search\n *\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the input control\n * @property {boolean} disabled - The disabled state of the input control\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} placeholder - Text to display when the input has no value.\n * @property {string} ariaLabel - The aria-label text for cases where there is no visible label.\n */\nexport default class MozInputSearch extends MozInputText {\n  // The amount of milliseconds that we wait before firing the \"search\" event.\n  static #searchDebounceDelayMs = 500;\n\n  #searchTimer = null;\n\n  #clearSearchTimer() {\n    if (this.#searchTimer) {\n      clearTimeout(this.#searchTimer);\n    }\n    this.#searchTimer = null;\n  }\n\n  #dispatchSearch() {\n    this.dispatchEvent(\n      new CustomEvent(\"MozInputSearch:search\", {\n        bubbles: true,\n        composed: true,\n        detail: { query: this.value },\n      })\n    );\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.#clearSearchTimer();\n  }\n\n  inputStylesTemplate() {\n    return html`${super.inputStylesTemplate()}`;\n  }\n\n  handleInput(e) {\n    super.handleInput(e);\n    this.#clearSearchTimer();\n    this.#searchTimer = setTimeout(() => {\n      this.#dispatchSearch();\n    }, MozInputSearch.#searchDebounceDelayMs);\n  }\n\n  // Clears the value and synchronously dispatches a search event if needed.\n  clear() {\n    this.#clearSearchTimer();\n    if (this.value) {\n      this.value = this.inputEl.value = \"\";\n      this.#dispatchSearch();\n    }\n  }\n\n  #hasIcon() {\n    // If unspecified, search inputs still have a default search icon.\n    return this.iconSrc === undefined || !!this.iconSrc;\n  }\n\n  inputTemplate() {\n    return html`\n      <input\n        id=\"input\"\n        class=${this.#hasIcon() ? \"with-icon\" : \"\"}\n        type=\"search\"\n        name=${this.name}\n        value=${this.value}\n        ?disabled=${this.disabled || this.parentDisabled}\n        accesskey=${ifDefined(this.accessKey)}\n        placeholder=${ifDefined(this.placeholder)}\n        aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n        aria-describedby=\"description\"\n        @input=${this.handleInput}\n        @change=${this.redispatchEvent}\n      />\n    `;\n  }\n}\ncustomElements.define(\"moz-input-search\", MozInputSearch);\n","import __chrome_styles_loader__mozinputtextStyles from \"toolkit/content/widgets/moz-input-text/moz-input-text.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n/**\n * A text input custom element.\n *\n * @tagname moz-input-text\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the input control\n * @property {boolean} disabled - The disabled state of the input control\n * @property {boolean} readonly - The readonly state of the input control\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} placeholder - Text to display when the input has no value.\n */\nexport default class MozInputText extends MozBaseInputElement {\n  static properties = {\n    placeholder: { type: String, fluent: true },\n    readonly: { type: Boolean, reflect: true },\n  };\n  static inputLayout = \"block\";\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.readonly = false;\n  }\n\n  inputStylesTemplate() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__mozinputtextStyles}\"\n    />`;\n  }\n\n  handleInput(e) {\n    this.value = e.target.value;\n  }\n\n  inputTemplate(options = {}) {\n    let { type = \"text\", classes, styles, inputValue } = options;\n\n    return html`\n      <input\n        id=\"input\"\n        type=${type}\n        class=${ifDefined(classes)}\n        style=${ifDefined(styles)}\n        name=${this.name}\n        .value=${inputValue || this.value}\n        ?disabled=${this.disabled || this.parentDisabled}\n        ?readonly=${this.readonly}\n        accesskey=${ifDefined(this.accessKey)}\n        placeholder=${ifDefined(this.placeholder)}\n        aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n        aria-describedby=\"description\"\n        @input=${this.handleInput}\n        @change=${this.redispatchEvent}\n      />\n    `;\n  }\n}\ncustomElements.define(\"moz-input-text\", MozInputText);\n"],"names":[],"sourceRoot":""}