{"version":3,"file":"moz-radio-group-moz-radio-group-stories.80ea4a40.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnaA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChQA;AACA;AACA;;AAEA;AACA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-fieldset/moz-fieldset.mjs","webpack:///../../../toolkit/content/widgets/lit-select-control.mjs","webpack:///../../../toolkit/content/widgets/moz-radio-group/moz-radio-group.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-radio-group/moz-radio-group.mjs"],"sourcesContent":["import __chrome_styles_loader__mozfieldsetStyles from \"toolkit/content/widgets/moz-fieldset/moz-fieldset.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n// Functions to wrap a string in a heading.\nconst HEADING_LEVEL_TEMPLATES = {\n  1: label => html`<h1>${label}</h1>`,\n  2: label => html`<h2>${label}</h2>`,\n  3: label => html`<h3>${label}</h3>`,\n  4: label => html`<h4>${label}</h4>`,\n  5: label => html`<h5>${label}</h5>`,\n  6: label => html`<h6>${label}</h6>`,\n};\n\n/**\n * Fieldset wrapper to lay out form inputs consistently.\n *\n * @tagname moz-fieldset\n * @property {string} label - The label for the fieldset's legend.\n * @property {string} description - The description for the fieldset.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {number} headingLevel - Render the legend in a heading of this level.\n * @property {boolean} disabled - Whether the fieldset and its children are disabled.\n * @property {string} iconSrc - The src for an optional icon.\n */\nexport default class MozFieldset extends MozLitElement {\n  static properties = {\n    label: { type: String, fluent: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    ariaLabel: { type: String, fluent: true, mapped: true },\n    ariaOrientation: { type: String, mapped: true },\n    headingLevel: { type: Number, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    iconSrc: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.headingLevel = -1;\n    this.disabled = false;\n    this.iconSrc = \"\";\n  }\n\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"disabled\")) {\n      this.#updateChildDisabledState();\n    }\n  }\n\n  #updateChildDisabledState() {\n    const formControls = [...this.querySelectorAll(\"*\")].filter(\n      element => \"disabled\" in element || \"parentDisabled\" in element\n    );\n\n    formControls.forEach(control => {\n      if (\"parentDisabled\" in control) {\n        control.parentDisabled = this.disabled;\n      }\n\n      if (this.disabled) {\n        control.setAttribute(\"disabled\", \"\");\n      } else {\n        control.removeAttribute(\"disabled\");\n      }\n    });\n  }\n\n  descriptionTemplate() {\n    if (this.description) {\n      return html`<span id=\"description\" class=\"description\">\n          ${this.description}\n        </span>\n        ${this.supportPageTemplate()}`;\n    }\n    return \"\";\n  }\n\n  supportPageTemplate() {\n    if (this.supportPage) {\n      return html`<a\n        is=\"moz-support-link\"\n        support-page=${this.supportPage}\n        part=\"support-link\"\n      ></a>`;\n    }\n    return html`<slot name=\"support-link\"></slot>`;\n  }\n\n  legendTemplate() {\n    let label =\n      HEADING_LEVEL_TEMPLATES[this.headingLevel]?.(this.label) || this.label;\n    return html`<legend part=\"label\">${this.iconTemplate()}${label}</legend>`;\n  }\n\n  iconTemplate() {\n    if (!this.iconSrc) {\n      return \"\";\n    }\n    return html`<img src=${this.iconSrc} role=\"presentation\" class=\"icon\" />`;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozfieldsetStyles}\"\n      />\n      <fieldset\n        ?disabled=${this.disabled}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-describedby=${ifDefined(\n          this.description ? \"description\" : undefined\n        )}\n        aria-orientation=${ifDefined(this.ariaOrientation)}\n      >\n        ${this.label ? this.legendTemplate() : \"\"}\n        ${!this.description ? this.supportPageTemplate() : \"\"}\n        ${this.descriptionTemplate()}\n        <div id=\"inputs\" part=\"inputs\">\n          <slot></slot>\n        </div>\n      </fieldset>\n    `;\n  }\n}\ncustomElements.define(\"moz-fieldset\", MozFieldset);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"./vendor/lit.all.mjs\";\nimport { MozLitElement } from \"./lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-fieldset.mjs\";\n\nconst NAVIGATION_FORWARD = \"forward\";\nconst NAVIGATION_BACKWARD = \"backward\";\n\nconst NAVIGATION_VALUE = {\n  [NAVIGATION_FORWARD]: 1,\n  [NAVIGATION_BACKWARD]: -1,\n};\n\nconst DIRECTION_RIGHT = \"Right\";\nconst DIRECTION_LEFT = \"Left\";\n\nconst NAVIGATION_DIRECTIONS = {\n  LTR: {\n    FORWARD: DIRECTION_RIGHT,\n    BACKWARD: DIRECTION_LEFT,\n  },\n  RTL: {\n    FORWARD: DIRECTION_LEFT,\n    BACKWARD: DIRECTION_RIGHT,\n  },\n};\n\n/**\n * Class that can be extended to handle managing the selected and focus states\n * of child elements using a roving tabindex. For more information on this focus\n * management pattern, see:\n * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex\n *\n * Child elements must use SelectControlItemMixin for behavior to work as\n * expected.\n */\nexport class SelectControlBaseElement extends MozLitElement {\n  #childElements;\n  #value;\n  #checkedIndex;\n  #focusedIndex;\n\n  static properties = {\n    type: { type: String },\n    disabled: { type: Boolean, reflect: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    label: { type: String, fluent: true },\n    name: { type: String },\n    value: { type: String },\n    headingLevel: { type: Number },\n  };\n\n  static queries = {\n    fieldset: \"moz-fieldset\",\n  };\n\n  set value(newValue) {\n    this.#value = newValue;\n    this.childElements.forEach((item, index) => {\n      let isChecked = this.value === item.value;\n      item.checked = isChecked;\n      if (isChecked && !item.disabled) {\n        this.#checkedIndex = index;\n      }\n    });\n    this.syncFocusState();\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  get hasValue() {\n    return this.value === 0 || !!this.value;\n  }\n\n  set focusedIndex(newIndex) {\n    if (this.#focusedIndex !== newIndex) {\n      this.#focusedIndex = newIndex;\n      this.syncFocusState();\n    }\n  }\n\n  get checkedIndex() {\n    return this.#checkedIndex;\n  }\n\n  set checkedIndex(newIndex) {\n    if (this.#checkedIndex !== newIndex) {\n      this.#checkedIndex = newIndex;\n      this.syncFocusState();\n    }\n  }\n\n  get focusableIndex() {\n    let activeEl = this.getRootNode().activeElement;\n    let childElFocused =\n      activeEl?.localName == this.constructor.childElementName;\n\n    if (\n      this.#checkedIndex != undefined &&\n      this.#value &&\n      (this.type == \"radio\" || !childElFocused)\n    ) {\n      return this.#checkedIndex;\n    }\n\n    if (\n      this.#focusedIndex != undefined &&\n      this.type === \"listbox\" &&\n      childElFocused\n    ) {\n      return this.#focusedIndex;\n    }\n\n    return this.childElements.findIndex(item => !item.disabled);\n  }\n\n  // Query for child elements the first time they are needed + ensure they\n  // have been upgraded so we can access properties.\n  get childElements() {\n    if (!this.#childElements) {\n      this.#childElements = (\n        this.shadowRoot\n          ?.querySelector(\"slot:not([name])\")\n          ?.assignedElements() || [...this.children]\n      )?.filter(\n        el => el.localName === this.constructor.childElementName && !el.slot\n      );\n      this.#childElements.forEach(item => customElements.upgrade(item));\n    }\n    return this.#childElements;\n  }\n\n  constructor() {\n    super();\n    this.type = \"radio\";\n    this.disabled = false;\n    this.addEventListener(\"blur\", e => this.handleBlur(e), true);\n    this.addEventListener(\"keydown\", e => this.handleKeydown(e));\n  }\n\n  firstUpdated() {\n    this.syncStateToChildElements();\n  }\n\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await Promise.all(this.childElements.map(item => item.updateComplete));\n  }\n\n  syncStateToChildElements() {\n    this.childElements.forEach((item, index) => {\n      item.position = index;\n\n      if (item.checked && this.value == undefined) {\n        this.value = item.value;\n      }\n\n      if (this.value == item.value && !item.disabled) {\n        this.#checkedIndex = item.position;\n      }\n\n      item.name = this.name;\n    });\n    this.syncFocusState();\n  }\n\n  syncFocusState() {\n    let focusableIndex = this.focusableIndex;\n    this.childElements.forEach((item, index) => {\n      item.itemTabIndex = focusableIndex === index ? 0 : -1;\n    });\n  }\n\n  handleBlur(event) {\n    if (this.contains(event.relatedTarget)) {\n      return;\n    }\n    this.focusedIndex = undefined;\n  }\n\n  // NB: We may need to revise this to avoid bugs when we add more focusable\n  // elements to select control base/items.\n  handleKeydown(event) {\n    let directions = this.getNavigationDirections();\n    switch (event.key) {\n      case \"Down\":\n      case \"ArrowDown\":\n      case directions.FORWARD:\n      case `Arrow${directions.FORWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_FORWARD);\n        break;\n      }\n      case \"Up\":\n      case \"ArrowUp\":\n      case directions.BACKWARD:\n      case `Arrow${directions.BACKWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_BACKWARD);\n        break;\n      }\n    }\n  }\n\n  getNavigationDirections() {\n    if (this.isDocumentRTL) {\n      return NAVIGATION_DIRECTIONS.RTL;\n    }\n    return NAVIGATION_DIRECTIONS.LTR;\n  }\n\n  get isDocumentRTL() {\n    if (typeof Services !== \"undefined\") {\n      return Services.locale.isAppLocaleRTL;\n    }\n    return document.dir === \"rtl\";\n  }\n\n  navigate(direction) {\n    let currentIndex = this.focusableIndex;\n    let children = this.childElements;\n    let step = NAVIGATION_VALUE[direction];\n    let isRadio = this.type == \"radio\";\n\n    for (let i = 1; i < children.length; i++) {\n      // Support focus wrapping for type=\"radio\" only.\n      let nextIndex = isRadio\n        ? (currentIndex + children.length + step * i) % children.length\n        : currentIndex + step * i;\n\n      let nextItem = children[nextIndex];\n\n      if (nextItem && !nextItem.disabled) {\n        nextItem.focus();\n        if (isRadio) {\n          this.value = nextItem.value;\n          nextItem.click();\n        }\n        nextItem.focus();\n        return;\n      }\n    }\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"name\")) {\n      this.handleSetName();\n    }\n    if (changedProperties.has(\"disabled\")) {\n      this.childElements.forEach(item => {\n        item.requestUpdate();\n      });\n    }\n    if (changedProperties.has(\"type\")) {\n      let childRole = this.type == \"radio\" ? \"radio\" : \"option\";\n      this.childElements.forEach(item => {\n        item.role = childRole;\n      });\n    }\n  }\n\n  handleSetName() {\n    this.childElements.forEach(item => {\n      item.name = this.name;\n    });\n  }\n\n  // Re-dispatch change event so it's re-targeted to the custom element.\n  handleChange(event) {\n    event.stopPropagation();\n    this.dispatchEvent(new Event(event.type, event));\n  }\n\n  handleSlotChange() {\n    this.#childElements = null;\n    this.#focusedIndex = undefined;\n    this.#checkedIndex = undefined;\n    this.syncStateToChildElements();\n  }\n\n  render() {\n    return html`\n      <moz-fieldset\n        part=\"fieldset\"\n        description=${ifDefined(this.description)}\n        support-page=${ifDefined(this.supportPage)}\n        role=${this.type == \"radio\" ? \"radiogroup\" : \"listbox\"}\n        ?disabled=${this.disabled}\n        label=${this.label}\n        headinglevel=${this.headingLevel}\n        exportparts=\"inputs, support-link\"\n        aria-orientation=${ifDefined(this.constructor.orientation)}\n      >\n        ${!this.supportPage\n          ? html`<slot slot=\"support-link\" name=\"support-link\"></slot>`\n          : \"\"}\n        <slot\n          @slotchange=${this.handleSlotChange}\n          @change=${this.handleChange}\n        ></slot>\n      </moz-fieldset>\n    `;\n  }\n}\n\n/**\n * Class that can be extended by items nested in a subclass of\n * SelectControlBaseElement to handle selection, focus management, and keyboard\n * navigation. Implemented as a mixin to enable use with elements that inherit\n * from something other than MozLitElement.\n *\n * @param {LitElement} superClass\n * @returns LitElement\n */\nexport const SelectControlItemMixin = superClass =>\n  class extends superClass {\n    #controller;\n\n    static properties = {\n      name: { type: String },\n      value: { type: String },\n      disabled: { type: Boolean, reflect: true },\n      checked: { type: Boolean, reflect: true },\n      itemTabIndex: { type: Number, state: true },\n      role: { type: String, state: true },\n      position: { type: Number, state: true },\n    };\n\n    get controller() {\n      return this.#controller;\n    }\n\n    get isDisabled() {\n      return this.disabled || this.#controller.disabled;\n    }\n\n    constructor() {\n      super();\n      this.checked = false;\n      this.addEventListener(\"focus\", () => {\n        if (!this.disabled) {\n          this.controller.focusedIndex = this.position;\n        }\n      });\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      let hostElement = this.parentElement || this.getRootNode().host;\n      if (!(hostElement instanceof SelectControlBaseElement)) {\n        console.error(\n          `${this.localName} should only be used in an element that extends SelectControlBaseElement.`\n        );\n      }\n\n      this.#controller = hostElement;\n      this.role = this.#controller.type == \"radio\" ? \"radio\" : \"option\";\n      if (this.#controller.hasValue) {\n        this.checked = this.value === this.#controller.value;\n      }\n    }\n\n    willUpdate(changedProperties) {\n      super.willUpdate(changedProperties);\n      // Handle setting checked directly via JS.\n      if (\n        changedProperties.has(\"checked\") &&\n        this.checked &&\n        this.#controller.hasValue &&\n        this.value !== this.#controller.value\n      ) {\n        this.#controller.value = this.value;\n      }\n      // Handle un-checking directly via JS. If the checked item is un-checked,\n      // the value of the associated focus manager parent needs to be un-set.\n      if (\n        changedProperties.has(\"checked\") &&\n        !this.checked &&\n        this.#controller.hasValue &&\n        this.value === this.#controller.value\n      ) {\n        this.#controller.value = \"\";\n      }\n\n      if (changedProperties.has(\"disabled\")) {\n        // Prevent enabling a items if containing focus manager is disabled.\n        if (this.disabled === false && this.#controller.disabled) {\n          this.disabled = true;\n          return;\n        }\n\n        // Update items via focus manager parent for proper keyboard nav behavior.\n        if (this.checked || !this.#controller.hasValue) {\n          if (this.controller.checkedIndex != this.position) {\n            this.#controller.syncFocusState();\n          } else {\n            // If the newly disabled element was checked unset the checkedIndex\n            // to recompute which element should be focusable.\n            this.controller.checkedIndex = undefined;\n          }\n        }\n      }\n    }\n\n    handleClick() {\n      if (this.isDisabled || this.checked) {\n        return;\n      }\n\n      this.#controller.value = this.value;\n      if (this.getRootNode().activeElement?.localName == this.localName) {\n        this.focus();\n      }\n    }\n\n    // Re-dispatch change event so it propagates out of the element.\n    handleChange(e) {\n      this.dispatchEvent(new Event(e.type, e));\n    }\n  };\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport \"./moz-radio-group.mjs\";\n\nlet greetings = [\"hello\", \"howdy\", \"hola\"];\nlet icons = [\n  \"chrome://global/skin/icons/highlights.svg\",\n  \"chrome://global/skin/icons/delete.svg\",\n  \"chrome://global/skin/icons/defaultFavicon.svg\",\n];\nlet accesskeyOptions = [\"h\", \"w\", \"X\"];\n\nlet defaultLabelIds = [\"moz-radio-0\", \"moz-radio-1\", \"moz-radio-2\"];\nlet wrappedLabelIds = [\n  \"moz-radio-long-0\",\n  \"moz-radio-long-1\",\n  \"moz-radio-long-2\",\n];\n\nexport default {\n  title: \"UI Widgets/Radio Group\",\n  component: \"moz-radio-group\",\n  argTypes: {\n    disabledButtons: {\n      options: greetings,\n      control: { type: \"check\" },\n    },\n    buttonLabels: {\n      options: [\"default\", \"wrapped\"],\n      mapping: {\n        default: defaultLabelIds,\n        wrapped: wrappedLabelIds,\n      },\n      control: { type: \"radio\" },\n    },\n    accesskeys: {\n      if: { arg: \"showAccesskeys\", truthy: true },\n    },\n    headingLevel: {\n      options: [\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n      control: { type: \"select\" },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: [\"click\", \"input\", \"change\"],\n    },\n    status: \"in-development\",\n    fluent: `\nmoz-radio-group =\n  .label = This is the group label\nmoz-radio-0 =\n  .label = Hello\nmoz-radio-1 =\n  .label = Howdy\nmoz-radio-2 =\n  .label = Hola\nmoz-radio-long-0 =\n  .label = Hello ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\nmoz-radio-long-1 =\n  .label = Howdy ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\nmoz-radio-long-2 =\n  .label = Hola ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\nmoz-radio-described-0 =\n  .label = Hello\n  .description = This is the first option.\nmoz-radio-described-1 =\n  .label = Howdy\n  .description = This is the second option.\nmoz-radio-described-2 =\n  .label = Hola\n  .description = This is the third option.\nmoz-radio-described-long-0 =\n  .label = Hello ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\n  .description = This is the first option.\nmoz-radio-described-long-1 =\n  .label = Howdy ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\n  .description = This is the second option.\nmoz-radio-described-long-2 =\n  .label = Hola ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\n  .description = This is the third option.\nmoz-radio-group-description =\n  .label = This is the group label\n  .description = This is the group description\n    `,\n  },\n};\n\nconst Template = ({\n  value = greetings[0],\n  groupL10nId = \"moz-radio-group\",\n  buttonLabels,\n  groupName,\n  showIcons,\n  disabled,\n  disabledButtons,\n  showDescriptions,\n  showAccesskeys,\n  accesskeys,\n  supportPage,\n  groupSupportPage,\n  hasSlottedSupportLinks,\n  groupSlottedSupportLink,\n  nestedFields,\n  ellipsized,\n  headingLevel,\n}) => html`\n  <moz-radio-group\n    name=${groupName}\n    data-l10n-id=${groupL10nId}\n    support-page=${ifDefined(groupSupportPage)}\n    ?disabled=${disabled}\n    value=${value}\n    .headingLevel=${headingLevel}\n  >\n    ${groupSlottedSupportLink\n      ? html`<a href=\"/\" slot=\"support-link\">Slotted support link</a>`\n      : \"\"}\n    ${greetings.map(\n      (greeting, i) => html`\n        <moz-radio\n          ?disabled=${disabledButtons.includes(greeting)}\n          value=${greeting}\n          data-l10n-id=${showDescriptions\n            ? buttonLabels[i].replace(\"moz-radio\", \"moz-radio-described\")\n            : buttonLabels[i]}\n          iconSrc=${ifDefined(showIcons ? icons[i] : \"\")}\n          accesskey=${ifDefined(showAccesskeys ? accesskeys[i] : \"\")}\n          support-page=${ifDefined(supportPage)}\n          class=${classMap({ \"text-truncated-ellipsis\": ellipsized })}\n        >\n          ${hasSlottedSupportLinks\n            ? html`<a slot=\"support-link\" href=\"www.example.com\">\n                Click me!\n              </a>`\n            : \"\"}\n          ${nestedFields\n            ? html`<moz-checkbox\n                slot=\"nested\"\n                data-l10n-id=${ifDefined(buttonLabels[i])}\n              >\n              </moz-checkbox> `\n            : \"\"}\n        </moz-radio>\n      `\n    )}\n  </moz-radio-group>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  label: \"\",\n  buttonLabels: \"default\",\n  groupName: \"greeting\",\n  unchecked: false,\n  showIcons: false,\n  disabled: false,\n  disabledButtons: [],\n  showDescriptions: false,\n  showAccesskeys: false,\n  accesskeys: accesskeyOptions,\n  supportPage: \"\",\n  groupSupportPage: \"\",\n  hasSlottedSupportLinks: false,\n  groupSlottedSupportLink: false,\n  headingLevel: \"\",\n};\n\nexport const AllUnchecked = Template.bind({});\nAllUnchecked.args = {\n  ...Default.args,\n  value: \"\",\n};\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = {\n  ...Default.args,\n  showIcons: true,\n};\n\nexport const DisabledRadioGroup = Template.bind({});\nDisabledRadioGroup.args = {\n  ...Default.args,\n  disabled: true,\n};\n\nexport const DisabledRadioButton = Template.bind({});\nDisabledRadioButton.args = {\n  ...Default.args,\n  disabledButtons: [\"hello\"],\n};\n\nexport const WithDescriptions = Template.bind({});\nWithDescriptions.args = {\n  ...Default.args,\n  showDescriptions: true,\n};\n\nexport const WithAccesskeys = Template.bind({});\nWithAccesskeys.args = {\n  ...Default.args,\n  showAccesskeys: true,\n};\n\nexport const WithSupportLinks = Template.bind({});\nWithSupportLinks.args = {\n  ...Default.args,\n  supportPage: \"test\",\n};\n\nexport const WithSlottedSupportLinks = Template.bind({});\nWithSlottedSupportLinks.args = {\n  ...Default.args,\n  hasSlottedSupportLinks: true,\n};\n\nexport const WithRadioGroupDescription = Template.bind({});\nWithRadioGroupDescription.args = {\n  ...Default.args,\n  groupL10nId: \"moz-radio-group-description\",\n};\n\nexport const WithRadioGroupSupportLink = Template.bind({});\nWithRadioGroupSupportLink.args = {\n  ...Default.args,\n  groupL10nId: \"moz-radio-group-description\",\n  groupSupportPage: \"this is the group support page\",\n};\n\nexport const WithRadioGroupSlottedSupportLink = Template.bind({});\nWithRadioGroupSlottedSupportLink.args = {\n  ...Default.args,\n  groupL10nId: \"moz-radio-group-description\",\n  groupSlottedSupportLink: true,\n};\n\nexport const WithNestedFields = Template.bind({});\nWithNestedFields.args = {\n  ...Default.args,\n  nestedFields: true,\n};\n\nexport const WithEllipsizedLabel = Template.bind({});\nWithEllipsizedLabel.args = {\n  ...Default.args,\n  ellipsized: true,\n  l10nId: \"moz-checkbox-long-label\",\n};\n\nexport const WithHeadingLabel = Template.bind({});\nWithHeadingLabel.args = {\n  ...WithRadioGroupDescription.args,\n  headingLevel: \"2\",\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport {\n  SelectControlBaseElement,\n  SelectControlItemMixin,\n} from \"../lit-select-control.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n/**\n * Element used to group and associate moz-radio buttons so that they function\n * as a single form-control element.\n *\n * @tagname moz-radio-group\n * @property {boolean} disabled - Whether or not the fieldset is disabled.\n * @property {string} label - Label for the group of moz-radio elements.\n * @property {string} description - Description for the group of moz-radio elements.\n * @property {string} supportPage - Support page for the group of moz-radio elements.\n * @property {number} headingLevel - Render the label in a heading of this level.\n * @property {string} name\n *  Input name of the radio group. Propagates to moz-radio children.\n * @property {string} value\n *  Selected value for the group. Changing the value updates the checked\n *  state of moz-radio children and vice versa.\n * @property {string} ariaLabel - The aria-label text when there is no visible label.\n * @property {string} ariaDescription - The aria-description text when there is no visible description.\n * @slot default - The radio group's content, intended for moz-radio elements.\n * @slot support-link - The radio group's support link intended for moz-radio elements.\n */\nexport class MozRadioGroup extends SelectControlBaseElement {\n  static childElementName = \"moz-radio\";\n  static orientation = \"vertical\";\n\n  static properties = {\n    parentDisabled: { type: Boolean, state: true },\n  };\n}\ncustomElements.define(\"moz-radio-group\", MozRadioGroup);\n\n/**\n * Input element that allows a user to select one option from a group of options.\n *\n * @tagname moz-radio\n * @property {boolean} checked - Whether or not the input is selected.\n * @property {string} description - Description for the input.\n * @property {boolean} disabled - Whether or not the input is disabled.\n * @property {string} iconSrc - Path to an icon displayed next to the input.\n * @property {number} itemTabIndex - Tabindex of the input element.\n * @property {string} label - Label for the radio input.\n * @property {string} name\n *  Name of the input control, set by the associated moz-radio-group element.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} value - Value of the radio input.\n */\nexport class MozRadio extends SelectControlItemMixin(MozBaseInputElement) {\n  static activatedProperty = \"checked\";\n\n  get isDisabled() {\n    return (\n      super.isDisabled || this.parentDisabled || this.controller.parentDisabled\n    );\n  }\n\n  inputTemplate() {\n    return html`<input\n      type=\"radio\"\n      id=\"input\"\n      .value=${this.value}\n      name=${this.name}\n      .checked=${this.checked}\n      aria-checked=${this.checked}\n      tabindex=${this.itemTabIndex}\n      ?disabled=${this.isDisabled}\n      accesskey=${ifDefined(this.accessKey)}\n      aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n      aria-describedby=\"description\"\n      aria-description=${ifDefined(\n        this.hasDescription ? undefined : this.ariaDescription\n      )}\n      @click=${this.handleClick}\n      @change=${this.handleChange}\n    />`;\n  }\n}\ncustomElements.define(\"moz-radio\", MozRadio);\n"],"names":[],"sourceRoot":""}