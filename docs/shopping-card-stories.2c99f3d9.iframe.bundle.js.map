{"version":3,"file":"shopping-card-stories.2c99f3d9.iframe.bundle.js","mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpLA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAAA;AAGA;AACA;AAEA;AAGA;AAAA;AAGA;AACA;AAEA;AAaA;AAAA","sources":["webpack:///../shopping/content/shopping-card.mjs","webpack:///../../../toolkit/content/widgets/moz-card/moz-card.mjs","webpack:///./stories/shopping-card.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__shoppingcardStyles from \"browser/components/shopping/content/shopping-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-card.mjs\";\n\nconst MIN_SHOW_MORE_HEIGHT = 200;\n/**\n * A card container to be used in the shopping sidebar. There are three card types.\n * The default type where no type attribute is required and the card will have no extra functionality.\n * The \"accordion\" type will initially not show any content. The card will contain a arrow to expand the\n * card so all of the content is visible.\n *\n * @property {string} label - The label text that will be used for the card header\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available types are \"accordion\" and \"show-more\".\n */\nclass ShoppingCard extends MozLitElement {\n  static properties = {\n    label: { type: String },\n    type: { type: String },\n    rating: { type: String },\n    _isExpanded: { type: Boolean },\n  };\n\n  static get queries() {\n    return {\n      contentEl: \"#content\",\n    };\n  }\n\n  cardTemplate() {\n    if (this.type === \"show-more\") {\n      return html`\n        <article\n          id=\"content\"\n          class=\"show-more\"\n          aria-describedby=\"content\"\n          expanded=\"false\"\n        >\n          <slot name=\"content\"></slot>\n\n          <footer>\n            <moz-button\n              size=\"small\"\n              aria-controls=\"content\"\n              data-l10n-id=\"shopping-show-more-button\"\n              @click=${this.handleShowMoreButtonClick}\n            ></moz-button>\n          </footer>\n        </article>\n      `;\n    }\n    return html`\n      <div id=\"content\" aria-describedby=\"content\">\n        ${this.headingTemplate()}\n        <slot name=\"content\"></slot>\n      </div>\n    `;\n  }\n\n  headingTemplate() {\n    if (this.rating) {\n      return html`<div id=\"label-wrapper\">\n        <span id=\"heading\">${this.label}</span>\n        <moz-five-star\n          rating=${this.rating === 0 ? 0.5 : this.rating}\n        </moz-five-star>\n      </div>`;\n    }\n    return \"\";\n  }\n\n  onCardToggle(e) {\n    const action = e.newState == \"open\" ? \"expanded\" : \"collapsed\";\n    let cardId = this.getAttribute(\"id\");\n    switch (cardId) {\n      case \"shopping-settings-label\":\n        Glean.shopping.surfaceSettingsExpandClicked.record({ action });\n        break;\n      case \"shopping-analysis-explainer-label\":\n        Glean.shopping.surfaceShowQualityExplainerClicked.record({\n          action,\n        });\n        break;\n    }\n  }\n\n  handleShowMoreButtonClick(e) {\n    this._isExpanded = !this._isExpanded;\n    // toggle show more/show less text\n    e.target.setAttribute(\n      \"data-l10n-id\",\n      this._isExpanded\n        ? \"shopping-show-less-button\"\n        : \"shopping-show-more-button\"\n    );\n    // toggle content expanded attribute\n    this.contentEl.attributes.expanded.value = this._isExpanded;\n\n    let action = this._isExpanded ? \"expanded\" : \"collapsed\";\n    Glean.shopping.surfaceShowMoreReviewsButtonClicked.record({\n      action,\n    });\n  }\n\n  enableShowMoreButton() {\n    this._isExpanded = false;\n    this.toggleAttribute(\"showMoreButtonDisabled\", false);\n    this.contentEl.attributes.expanded.value = false;\n  }\n\n  disableShowMoreButton() {\n    this._isExpanded = true;\n    this.toggleAttribute(\"showMoreButtonDisabled\", true);\n    this.contentEl.attributes.expanded.value = true;\n  }\n\n  firstUpdated() {\n    if (this.type !== \"show-more\") {\n      return;\n    }\n\n    let contentSlot = this.shadowRoot.querySelector(\"slot[name='content']\");\n    let contentSlotEls = contentSlot.assignedElements();\n    if (!contentSlotEls.length) {\n      return;\n    }\n\n    let slottedDiv = contentSlotEls[0];\n\n    this.handleContentSlotResize = this.handleContentSlotResize.bind(this);\n    this.contentResizeObserver = new ResizeObserver(\n      this.handleContentSlotResize\n    );\n    this.contentResizeObserver.observe(slottedDiv);\n  }\n\n  disconnectedCallback() {\n    this.contentResizeObserver?.disconnect();\n  }\n\n  handleContentSlotResize(entries) {\n    for (let entry of entries) {\n      if (entry.contentRect.height === 0) {\n        return;\n      }\n\n      if (entry.contentRect.height < MIN_SHOW_MORE_HEIGHT) {\n        this.disableShowMoreButton();\n      } else if (this.hasAttribute(\"showMoreButtonDisabled\")) {\n        this.enableShowMoreButton();\n      }\n    }\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__shoppingcardStyles}\"\n      />\n      <moz-card\n        class=\"shopping-card\"\n        type=${this.type}\n        heading=${ifDefined(\n          this.label && !this.rating ? this.label : undefined\n        )}\n        @toggle=${this.onCardToggle}\n      >\n        ${this.cardTemplate()}\n      </moz-card>\n    `;\n  }\n}\ncustomElements.define(\"shopping-card\", ShoppingCard);\n","import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible. You can use the \"expanded\" attribute to force the accordion\n * card to show its content on initial render.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} icon - (optional) A flag to indicate the header should include an icon\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @property {boolean} expanded - A flag to indicate whether the card is\n *  expanded or not. Can be used to expand the content section of the\n *  accordion card on initial render.\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentEl: \"#content\",\n    summaryEl: \"summary\",\n    contentSlotEl: \"#content-slot\",\n  };\n\n  static properties = {\n    heading: { type: String, fluent: true },\n    icon: { type: Boolean },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.expanded = false;\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          this.icon,\n          () =>\n            html`<div part=\"icon\" id=\"heading-icon\" role=\"presentation\"></div>`\n        )}\n        <span id=\"heading\" title=${ifDefined(this.heading)} part=\"heading\"\n          >${this.heading}</span\n        >\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details\n          id=\"moz-card-details\"\n          @toggle=${this.onToggle}\n          ?open=${this.expanded}\n        >\n          <summary part=\"summary\">${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot id=\"content-slot\"></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      <div id=\"moz-card-details\">\n        ${this.headingTemplate()}\n        <div id=\"content\" aria-describedby=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  onToggle() {\n    this.expanded = this.detailsEl.open;\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html, ifDefined } from \"lit.all.mjs\";\nimport \"browser/components/shopping/content/shopping-card.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Shopping/Shopping Card\",\n  component: \"shopping-card\",\n  parameters: {\n    status: \"in-development\",\n    fluent: `\nshopping-card-label =\n  .label = This the label\nshopping-show-more-button = Show more\nshopping-show-less-button = Show less\n    `,\n  },\n};\n\nconst Template = ({ l10nId, rating, content, type }) => html`\n  <main style=\"max-width: 400px\">\n    <shopping-card\n      type=${ifDefined(type)}\n      data-l10n-id=${ifDefined(l10nId)}\n      data-l10n-attrs=\"label\"\n      rating=${rating}\n    >\n      <div slot=\"content\">${ifDefined(content)}</div>\n    </shopping-card>\n  </main>\n`;\n\nexport const DefaultCard = Template.bind({});\nDefaultCard.args = {\n  l10nId: \"shopping-card-label\",\n  content: \"This is the content\",\n};\n\nexport const CardWithRating = Template.bind({});\nCardWithRating.args = {\n  ...DefaultCard.args,\n  rating: 3,\n};\n\nexport const CardOnlyContent = Template.bind({});\nCardOnlyContent.args = {\n  content: \"This card only contains content\",\n};\n\nexport const CardTypeAccordion = Template.bind({});\nCardTypeAccordion.args = {\n  ...DefaultCard.args,\n  content: `Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Nunc velit turpis, mollis a ultricies vitae, accumsan ut augue.\n  In a eros ac dolor hendrerit varius et at mauris.`,\n  type: \"accordion\",\n};\n\nexport const CardTypeShowMoreButtonDisabled = Template.bind({});\nCardTypeShowMoreButtonDisabled.args = {\n  ...DefaultCard.args,\n  content: `Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Nunc velit turpis, mollis a ultricies vitae, accumsan ut augue.\n  In a eros ac dolor hendrerit varius et at mauris.`,\n  type: \"show-more\",\n};\n\nexport const CardTypeShowMore = Template.bind({});\nCardTypeShowMore.args = {\n  ...DefaultCard.args,\n  content: `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Posuere morbi leo urna molestie at elementum.\n  Felis donec et odio pellentesque.\n  Malesuada fames ac turpis egestas maecenas pharetra convallis posuere morbi. Varius duis at consectetur lorem donec massa sapien faucibus et.\n  Et tortor consequat id porta nibh venenatis.\n  Adipiscing diam donec adipiscing tristique risus nec feugiat in fermentum.\n  Viverra accumsan in nisl nisi scelerisque eu ultrices vitae.\n  Gravida neque convallis a cras.\n  Fringilla est ullamcorper eget nulla.\n  Habitant morbi tristique senectus et netus.\n  Quam vulputate dignissim suspendisse in est ante in.\n  Feugiat vivamus at augue eget arcu dictum varius duis.\n  Est pellentesque elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus. Ultricies integer quis auctor elit.`,\n  type: \"show-more\",\n};\n"],"names":[],"sourceRoot":""}