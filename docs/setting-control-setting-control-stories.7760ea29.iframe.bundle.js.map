{"version":3,"file":"setting-control-setting-control-stories.7760ea29.iframe.bundle.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5DA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../preferences/widgets/setting-control/setting-control.mjs","webpack:///../preferences/widgets/setting-control/setting-control.stories.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nexport class SettingControl extends MozLitElement {\n  #lastSetting;\n\n  static properties = {\n    setting: { type: Object },\n    config: { type: Object },\n    value: {},\n  };\n\n  createRenderRoot() {\n    return this;\n  }\n\n  onSettingChange = () => {\n    this.value = this.setting.value;\n  };\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"setting\")) {\n      if (this.#lastSetting) {\n        this.#lastSetting.off(\"change\", this.onSettingChange);\n      }\n      this.#lastSetting = this.setting;\n      this.value = this.getValue();\n      this.setting.on(\"change\", this.onSettingChange);\n    }\n  }\n\n  getValue() {\n    return this.setting.value;\n  }\n\n  onChange(e) {\n    this.setting.userChange(e.target.checked);\n    this.value = this.getValue();\n  }\n\n  render() {\n    let { config } = this;\n    switch (config.control) {\n      case \"checkbox\":\n      default:\n        return html`<moz-checkbox\n          data-l10n-id=${config.l10nId}\n          .iconSrc=${config.iconSrc}\n          .checked=${this.value}\n          .supportPage=${this.config.supportPage}\n          data-subcategory=${ifDefined(this.config.subcategory)}\n          @change=${this.onChange}\n        ></moz-checkbox>`;\n    }\n  }\n}\ncustomElements.define(\"setting-control\", SettingControl);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport \"chrome://browser/content/preferences/widgets/setting-control.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Settings/Setting Control\",\n  component: \"setting-control\",\n  parameters: {\n    status: \"in-development\",\n    handles: [\"click\", \"input\", \"change\"],\n    fluent: `\ncheckbox-example-input =\n  .label = Checkbox example of setting-control\n  .description = Could have a description like moz-checkbox.\n`,\n  },\n};\n\nconst Template = ({ config, setting }) => html`\n  <setting-control .config=${config} .setting=${setting}></setting-control>\n`;\n\nexport const Checkbox = Template.bind({});\nCheckbox.args = {\n  config: {\n    id: \"checkbox-example\",\n    l10nId: \"checkbox-example-input\",\n  },\n  setting: {\n    value: true,\n    on() {},\n    off() {},\n    userChange() {},\n  },\n};\n"],"names":[],"sourceRoot":""}