{"version":3,"file":"3616.2f7efe11.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-input-password/moz-input-password.mjs","webpack:///../../../toolkit/content/widgets/moz-input-text/moz-input-text.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport MozInputText from \"chrome://global/content/elements/moz-input-text.mjs\";\n\n/**\n * A password input custom element.\n *\n * @tagname moz-input-password\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the input control\n * @property {boolean} disabled - The disabled state of the input control\n * @property {boolean} readonly - The readonly state of the input control\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} placeholder - Text to display when the input has no value.\n */\nexport default class MozInputPassword extends MozInputText {\n  inputTemplate() {\n    return super.inputTemplate({ type: \"password\" });\n  }\n}\ncustomElements.define(\"moz-input-password\", MozInputPassword);\n","import __chrome_styles_loader__mozinputtextStyles from \"toolkit/content/widgets/moz-input-text/moz-input-text.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n/**\n * A text input custom element.\n *\n * @tagname moz-input-text\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the input control\n * @property {boolean} disabled - The disabled state of the input control\n * @property {boolean} readonly - The readonly state of the input control\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} placeholder - Text to display when the input has no value.\n */\nexport default class MozInputText extends MozBaseInputElement {\n  static properties = {\n    placeholder: { type: String, fluent: true },\n    readonly: { type: Boolean, reflect: true },\n  };\n  static inputLayout = \"block\";\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.readonly = false;\n  }\n\n  inputStylesTemplate() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__mozinputtextStyles}\"\n    />`;\n  }\n\n  handleInput(e) {\n    this.value = e.target.value;\n  }\n\n  inputTemplate(options = {}) {\n    let { type = \"text\", classes, styles, inputValue } = options;\n\n    return html`\n      <input\n        id=\"input\"\n        type=${type}\n        class=${ifDefined(classes)}\n        style=${ifDefined(styles)}\n        name=${this.name}\n        value=${inputValue || this.value}\n        ?disabled=${this.disabled || this.parentDisabled}\n        ?readonly=${this.readonly}\n        accesskey=${ifDefined(this.accessKey)}\n        placeholder=${ifDefined(this.placeholder)}\n        aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n        aria-describedby=\"description\"\n        @input=${this.handleInput}\n        @change=${this.redispatchEvent}\n      />\n    `;\n  }\n}\ncustomElements.define(\"moz-input-text\", MozInputText);\n"],"names":[],"sourceRoot":""}