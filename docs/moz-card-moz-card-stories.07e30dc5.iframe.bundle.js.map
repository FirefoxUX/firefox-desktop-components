{"version":3,"file":"moz-card-moz-card-stories.07e30dc5.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-card/moz-card.mjs","webpack:///../../../toolkit/content/widgets/moz-card/moz-card.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible. You can use the \"expanded\" attribute to force the accordion\n * card to show its content on initial render.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} icon - (optional) A flag to indicate the header should include an icon\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @property {boolean} expanded - A flag to indicate whether the card is\n *  expanded or not. Can be used to expand the content section of the\n *  accordion card on initial render.\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentSlotEl: \"#content\",\n  };\n\n  static properties = {\n    heading: { type: String },\n    icon: { type: Boolean },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.expanded = false;\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          this.icon,\n          () =>\n            html`<div part=\"icon\" id=\"heading-icon\" role=\"presentation\"></div>`\n        )}\n        <span id=\"heading\" title=${ifDefined(this.heading)} part=\"heading\"\n          >${this.heading}</span\n        >\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details\n          id=\"moz-card-details\"\n          @toggle=${this.onToggle}\n          ?open=${this.expanded}\n        >\n          <summary part=\"summary\">${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      <div id=\"moz-card-details\">\n        ${this.headingTemplate()}\n        <div id=\"content\" aria-describedby=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  onToggle() {\n    this.expanded = this.detailsEl.open;\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { classMap, html, ifDefined } from \"lit.all.mjs\";\nimport \"./moz-card.mjs\";\n\nexport default {\n  title: \"UI Widgets/Card\",\n  component: \"moz-card\",\n  parameters: {\n    status: \"stable\",\n    fluent: `\nmoz-card-heading =\n  .heading = This is the label\nmoz-card-heading-with-icon =\n  .heading = This is a card with a heading icon\n    `,\n  },\n  argTypes: {\n    type: {\n      options: [\"default\", \"accordion\"],\n      control: { type: \"select\" },\n    },\n    hasHeadingIcon: {\n      options: [true, false],\n      control: { type: \"select\" },\n    },\n    expanded: {\n      options: [true, null],\n      control: {\n        type: \"radio\",\n        labels: {\n          true: \"True\",\n          null: \"False\",\n        },\n      },\n      if: { arg: \"type\", eq: \"accordion\" },\n    },\n  },\n};\n\nconst Template = ({ l10nId, content, type, hasHeadingIcon, expanded }) => html`\n  <style>\n    main {\n      max-width: 400px;\n    }\n    moz-card.headingWithIcon::part(icon) {\n      background-image: url(\"chrome://browser/skin/preferences/category-general.svg\");\n    }\n  </style>\n  <main>\n    <moz-card\n      type=${ifDefined(type)}\n      ?icon=${hasHeadingIcon}\n      class=${classMap({ headingWithIcon: hasHeadingIcon })}\n      data-l10n-id=${ifDefined(l10nId)}\n      data-l10n-attrs=\"heading\"\n      expanded=${ifDefined(expanded)}\n    >\n      <div>${content}</div>\n    </moz-card>\n  </main>\n`;\n\nexport const WithHeading = Template.bind({});\nWithHeading.args = {\n  l10nId: \"moz-card-heading\",\n  content: \"This is the content\",\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  content: \"This card only contains content\",\n};\n\nexport const Accordion = Template.bind({});\nAccordion.args = {\n  ...WithHeading.args,\n  content: `Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Nunc velit turpis, mollis a ultricies vitae, accumsan ut augue.\n  In a eros ac dolor hendrerit varius et at mauris.`,\n  type: \"accordion\",\n};\nAccordion.parameters = {\n  a11y: {\n    config: {\n      rules: [\n        /* \n        The accordion card can be expanded either by the chevron icon\n        button or by activating the details element. Mouse users can\n        click on the chevron button or the details element, while\n        keyboard users can tab to the details element and have a\n        focus ring around the details element in the card.\n        Additionally, the details element is announced as a button\n        so I don't believe we are providing a degraded experience\n        to non-mouse users.\n\n        Bug 1854008: We should probably make the accordion button a\n        clickable div or something that isn't announced to screen\n        readers.\n        */\n        {\n          id: \"button-name\",\n          reviewOnFail: true,\n        },\n        {\n          id: \"nested-interactive\",\n          reviewOnFail: true,\n        },\n      ],\n    },\n  },\n};\n\nexport const AccordionExpanded = Template.bind({});\nAccordionExpanded.args = {\n  ...Accordion.args,\n  expanded: true,\n};\nAccordionExpanded.parameters = Accordion.parameters;\n\nexport const WithHeadingIcon = Template.bind({});\nWithHeadingIcon.args = {\n  l10nId: \"moz-card-heading-with-icon\",\n  content: `Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  Nunc velit turpis, mollis a ultricies vitae, accumsan ut augue.\n  In a eros ac dolor hendrerit varius et at mauris.`,\n  type: \"default\",\n  hasHeadingIcon: true,\n};\n"],"names":[],"sourceRoot":""}