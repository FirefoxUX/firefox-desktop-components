{"version":3,"file":"moz-checkbox-README-stories-md.e4b07872.iframe.bundle.js","mappingssources":["webpack:///../../../toolkit/content/widgets/moz-checkbox/README.stories.md","webpack:///./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack:///./node_modules/@mdx-js/react/index.js","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs","webpack:///../../../toolkit/content/widgets/moz-support-link/moz-support-link.mjs","webpack:///./node_modules/react/jsx-runtime.js","webpack:///./node_modules/@mdx-js/react/lib/index.js","webpack:///../../../toolkit/content/widgets/moz-checkbox/moz-checkbox.mjs"],"sourcesContent":["\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/firefox-desktop-components/firefox-desktop-components/gecko/browser/components/storybook/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Canvas, ArgTypes } from \"@storybook/addon-docs\";\nimport \"toolkit-widgets/moz-checkbox/moz-checkbox.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"UI Widgets/ Checkbox/README\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        },\n        viewMode: \"docs\"\n      }\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n      id: \"mozcheckbox\",\n      children: \"MozCheckbox\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" is an element that lets users select multiple options from a list of choices.\\nIt can also function as a toggle, allowing users to make a binary choice like turning a feature on or off.\\nIt is a wrapper of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"<input type=\\\"checkbox\\\">\"\n      }), \" with built-in support for label and description text, as well as icons.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-checkbox label=\\\"Toggles a control\\\" description=\\\"A description about the control\\\" /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-checkbox\", {\n          label: \"Toggles a control\",\n          description: \"A description about the control\"\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"More information about this component including design, writing, and localization guidelines, as well as design assets, can be found on our \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://acorn.firefox.com/latest/components/checkbox/desktop-535kxbzV\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Acorn site\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"code\",\n      children: \"Code\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The source for \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" can be found under \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/content/widgets/moz-checkbox\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"toolkit/content/widgets/moz-checkbox/\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"when-to-use-moz-checkbox\",\n      children: [\"When to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"Use \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"moz-checkbox\"\n        }), \" when you want to allow a user to select at least one option from a list.\"]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"when-not-to-use-moz-checkbox\",\n      children: [\"When not to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"When only one choice can be active in a list of a few mutually exclusive options, use \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"moz-radio-group\"\n        }), \" instead.\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"When only one choice can be active in a list of many mutually exclusive options, use a \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"select\"\n        }), \" element instead.\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"If the intention is for a user to turn something off or on with their selection, and for their selection to have an immediate effect, consider using \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"moz-toggle\"\n        }), \" instead.\"]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"how-to-use-moz-checkbox\",\n      children: [\"How to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"importing-the-element\",\n      children: \"Importing the element\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Like other custom elements, you should usually be able to rely on \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" getting lazy loaded at the time of first use.\\nSee \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://firefox-source-docs.mozilla.org/browser/components/storybook/docs/README.reusable-widgets.stories.html#using-new-design-system-components\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"this documentation\"\n      }), \" for more information on using design system custom elements.\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-checked-state\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \" state\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"If you need a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" to be rendered as a filled-in checkbox by default, you can use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked=\\\"\\\"\"\n      }), \" or \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \" as an attribute just as if the element was a HTML checkbox.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-checkbox label=\\\"a descriptive label\\\" checked></moz-checkbox>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-checkbox label=\\\"a descriptive label\\\" checked /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-checkbox\", {\n          label: \"a descriptive label\",\n          checked: true\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"After initial render, the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \" value is the current state of the inner checkbox element.\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-disabled-state\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"In order to disable the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \", add \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled=\\\"\\\"\"\n      }), \" or \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" to the markup with no value.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-checkbox label=\\\"a descriptive label\\\" disabled></moz-checkbox>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-checkbox label=\\\"a descriptive label\\\" disabled /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-checkbox\", {\n          label: \"a descriptive label\",\n          disabled: true\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"setting-an-icon\",\n      children: \"Setting an icon\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"In order to have an icon appear next to the checkbox element, use the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \".iconSrc\"\n      }), \" property or \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"iconsrc\"\n      }), \" attribute.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-checkbox label=\\\"a descriptive label\\\" iconsrc=\\\"chrome://global/skin/icons/edit-copy.svg\\\"></moz-checkbox>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-checkbox label=\\\"a descriptive label\\\" iconsrc=\\\"chrome://global/skin/icons/edit-copy.svg\\\" /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-checkbox\", {\n          label: \"a descriptive label\",\n          iconsrc: \"chrome://global/skin/icons/edit-copy.svg\"\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"setting-a-description\",\n      children: \"Setting a description\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"In order to set a description, use the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"description\"\n      }), \" attribute.\\nIn general, the description should be controlled by Fluent (and is the preferred way of handling descriptions).\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-checkbox label=\\\"a descriptive label\\\" description=\\\"Description text for your checkbox\\\"></moz-checkbox>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-checkbox label=\\\"a descriptive label\\\" description=\\\"Description text for your checkbox\\\" /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-checkbox\", {\n          label: \"a descriptive label\",\n          description: \"Description text for your checkbox\"\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"However, \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" does support a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"slot\"\n      }), \" element if your use case is more complex.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-checkbox label=\\\"a descriptive label\\\">\\n  <span slot=\\\"description\\\">A more complex description</span>\\n</moz-checkbox>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-checkbox label=\\\"a descriptive label\\\"><span slot=\\\"description\\\">{\\\"A more complex description\\\"}</span></moz-checkbox></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-checkbox\", {\n          label: \"a descriptive label\",\n          children: /*#__PURE__*/_jsx(\"span\", {\n            slot: \"description\",\n            children: \"A more complex description\"\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"fluent-usage\",\n      children: \"Fluent usage\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"label\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"description\"\n      }), \" attributes of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" will generally be provided via \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://mozilla-l10n.github.io/localizer-documentation/tools/fluent/basic_syntax.html#attributes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Fluent attributes\"\n      }), \".\\nThe relevant \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-attrs\"\n      }), \" are set automatically, so to get things working you just need to supply a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-id\"\n      }), \" as you would with any other element.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"For example, the following Fluent messages:\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        children: \"first-moz-checkbox-id =\\n  .label = This is the first label\\nsecond-moz-checkbox-id =\\n  .label = This is the second label\\n  .description = This is additional description text for the checkbox\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"would be used to set a label or a label and a description on the different \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" elements as follows:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-checkbox data-l10n-id=\\\"first-moz-checkbox-id\\\"></moz-checkbox>\\n<moz-checkbox data-l10n-id=\\\"second-moz-checkbox-id\\\"></moz-checkbox>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"nested-fields\",\n      children: \"Nested fields\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-checkbox\"\n      }), \" supports nested or dependent fields via a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"nested\"\n      }), \" named slot.\\nThese fields will be rendered below the checkbox element, and will be indented to\\nvisually indicate dependence. Any nested fields will mirror the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state\\nof the checkbox and will also become \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" whenever the checkbox is not \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"When nesting fields under a checkbox it's important to wrap the elements in a\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-fieldset\"\n      }), \" to indicate to assistive technologies that the fields are\\nrelated, and to provide a label for the group of controls:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-fieldset label=\\\"Label for the group\\\">\\n  <moz-checkbox label=\\\"Parent checkbox\\\" value=\\\"foo\\\" checked>\\n    <moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox one\\\" value=\\\"one\\\"></moz-checkbox>\\n    <moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox two\\\" value=\\\"two\\\" checked></moz-checkbox>\\n  </moz-checkbox>\\n</moz-fieldset>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-fieldset label=\\\"Label for the group\\\"><moz-checkbox label=\\\"Parent checkbox\\\" value=\\\"foo\\\" checked><moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox one\\\" value=\\\"one\\\" /><moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox two\\\" value=\\\"two\\\" checked /></moz-checkbox></moz-fieldset></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-fieldset\", {\n          label: \"Label for the group\",\n          children: /*#__PURE__*/_jsxs(\"moz-checkbox\", {\n            label: \"Parent checkbox\",\n            value: \"foo\",\n            checked: true,\n            children: [/*#__PURE__*/_jsx(\"moz-checkbox\", {\n              slot: \"nested\",\n              label: \"Nested checkbox one\",\n              value: \"one\"\n            }), /*#__PURE__*/_jsx(\"moz-checkbox\", {\n              slot: \"nested\",\n              label: \"Nested checkbox two\",\n              value: \"two\",\n              checked: true\n            })]\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"args-table\",\n      children: \"Args Table\"\n    }), \"\\n\", /*#__PURE__*/_jsx(ArgTypes, {\n      of: \"moz-checkbox\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'UI Widgets/ Checkbox/README',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    },\n    viewMode: \"docs\"\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","export {\n  MDXContext,\n  MDXProvider,\n  useMDXComponents,\n  withMDXComponents\n} from './lib/index.js'\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  #startMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.observe(this, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  #stopMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.disconnect();\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.#lastFormattedAccessKey = null;\n        this.formatAccessKey();\n      });\n      this.#startMutationObserver();\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#stopMutationObserver();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#stopMutationObserver();\n    try {\n      this.#formatAccessKey(accessKey);\n    } finally {\n      queueMicrotask(() => this.#startMutationObserver());\n    }\n  }\n\n  #formatAccessKey(accessKey) {\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","export * from '@mdx-js/react';\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozSupportLink.ftl\");\n\n/**\n * An extension of the anchor element that helps create links to Mozilla's\n * support documentation. This should be used for SUMO links only - other \"Learn\n * more\" links can use the regular anchor element.\n *\n * @tagname moz-support-link\n * @attribute {string} support-page - Short-hand string from SUMO to the specific support page.\n * @attribute {string} utm-content - UTM parameter for a URL, if it is an AMO URL.\n * @attribute {string} data-l10n-id - Fluent ID used to generate the text content.\n */\nexport default class MozSupportLink extends HTMLAnchorElement {\n  static SUPPORT_URL = \"https://www.mozilla.org/\";\n  static get observedAttributes() {\n    return [\"support-page\", \"utm-content\"];\n  }\n\n  /**\n   * Handles setting up the SUPPORT_URL preference getter.\n   * Without this, the tests for this component may not behave\n   * as expected.\n   * @private\n   * @memberof MozSupportLink\n   */\n  #register() {\n    if (window.document.nodePrincipal?.isSystemPrincipal) {\n      ChromeUtils.defineESModuleGetters(MozSupportLink, {\n        BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n      });\n\n      // eslint-disable-next-line no-shadow\n      let { XPCOMUtils } = window.XPCOMUtils\n        ? window\n        : ChromeUtils.importESModule(\n            \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n          );\n      XPCOMUtils.defineLazyPreferenceGetter(\n        MozSupportLink,\n        \"SUPPORT_URL\",\n        \"app.support.baseURL\",\n        \"\",\n        null,\n        val => Services.urlFormatter.formatURL(val)\n      );\n    } else if (!window.IS_STORYBOOK) {\n      MozSupportLink.SUPPORT_URL = window.RPMGetFormatURLPref(\n        \"app.support.baseURL\"\n      );\n    }\n  }\n\n  connectedCallback() {\n    this.#register();\n    this.#setHref();\n    this.setAttribute(\"target\", \"_blank\");\n    this.addEventListener(\"click\", this);\n    if (\n      !this.getAttribute(\"data-l10n-id\") &&\n      !this.getAttribute(\"data-l10n-name\") &&\n      !this.childElementCount\n    ) {\n      document.l10n.setAttributes(this, \"moz-support-link-text\");\n    }\n    document.l10n.translateFragment(this);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"click\", this);\n  }\n\n  get supportPage() {\n    return this.getAttribute(\"support-page\");\n  }\n\n  set supportPage(val) {\n    this.setAttribute(\"support-page\", val);\n  }\n\n  handleEvent(e) {\n    if (e.type == \"click\") {\n      if (window.openTrustedLinkIn) {\n        let where = MozSupportLink.BrowserUtils.whereToOpenLink(e, false, true);\n        if (where == \"current\") {\n          where = \"tab\";\n        }\n        e.preventDefault();\n        openTrustedLinkIn(this.href, where);\n      }\n    }\n  }\n\n  attributeChangedCallback(attrName) {\n    if (attrName === \"support-page\" || attrName === \"utm-content\") {\n      this.#setHref();\n    }\n  }\n\n  #setHref() {\n    let supportPage = this.getAttribute(\"support-page\") ?? \"\";\n    let base = MozSupportLink.SUPPORT_URL + supportPage;\n    this.href = this.hasAttribute(\"utm-content\")\n      ? formatUTMParams(this.getAttribute(\"utm-content\"), base)\n      : base;\n  }\n}\ncustomElements.define(\"moz-support-link\", MozSupportLink, { extends: \"a\" });\n\n/**\n * Adds UTM parameters to a given URL, if it is an AMO URL.\n *\n * @param {string} contentAttribute\n *        Identifies the part of the UI with which the link is associated.\n * @param {string} url\n * @returns {string}\n *          The url with UTM parameters if it is an AMO URL.\n *          Otherwise the url in unmodified form.\n */\nexport function formatUTMParams(contentAttribute, url) {\n  if (!contentAttribute) {\n    return url;\n  }\n  let parsedUrl = new URL(url);\n  let domain = `.${parsedUrl.hostname}`;\n  if (\n    !domain.endsWith(\".mozilla.org\") &&\n    // For testing: addons-dev.allizom.org and addons.allizom.org\n    !domain.endsWith(\".allizom.org\")\n  ) {\n    return url;\n  }\n\n  parsedUrl.searchParams.set(\"utm_source\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_medium\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_content\", contentAttribute);\n  return parsedUrl.href;\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-support-link.mjs\";\n\n/**\n * A checkbox input with a label.\n *\n * @tagname moz-checkbox\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the checkbox input control\n * @property {string} value - The value of the checkbox input control\n * @property {boolean} checked - The state of the checkbox element,\n *  also controls whether the checkbox is initially rendered as\n *  being checked.\n * @property {boolean} disabled - The disabled state of the checkbox input\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the checkbox\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} ariaLabel - The aria-label text when there is no visible label.\n * @property {string} ariaDescription - The aria-description text when there is no visible description.\n */\nexport default class MozCheckbox extends MozBaseInputElement {\n  static properties = {\n    checked: { type: Boolean, reflect: true },\n  };\n\n  static activatedProperty = \"checked\";\n\n  constructor() {\n    super();\n    this.checked = false;\n  }\n\n  /**\n   * Handles click events and keeps the checkbox checked value in sync\n   *\n   * @param {Event} event\n   * @memberof MozCheckbox\n   */\n  handleStateChange(event) {\n    this.checked = event.target.checked;\n  }\n\n  inputTemplate() {\n    return html`<input\n      id=\"input\"\n      type=\"checkbox\"\n      name=${this.name}\n      .value=${this.value}\n      .checked=${this.checked}\n      @click=${this.handleStateChange}\n      @change=${this.redispatchEvent}\n      ?disabled=${this.disabled || this.parentDisabled}\n      aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n      aria-describedby=\"description\"\n      aria-description=${ifDefined(\n        this.hasDescription ? undefined : this.ariaDescription\n      )}\n      accesskey=${ifDefined(this.accessKey)}\n    />`;\n  }\n}\ncustomElements.define(\"moz-checkbox\", MozCheckbox);\n"],"names":[],"sourceRoot":""}