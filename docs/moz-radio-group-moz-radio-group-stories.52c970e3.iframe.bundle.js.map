{"version":3,"file":"moz-radio-group-moz-radio-group-stories.52c970e3.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/TA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxVA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5NA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAKA;AAQA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-fieldset/moz-fieldset.mjs","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///../../../toolkit/content/widgets/moz-radio-group/moz-radio-group.mjs","webpack:///../../../toolkit/content/widgets/moz-radio-group/moz-radio-group.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-support-link/moz-support-link.mjs"],"sourcesContent":["import __chrome_styles_loader__mozfieldsetStyles from \"toolkit/content/widgets/moz-fieldset/moz-fieldset.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n/**\n * Fieldset wrapper to lay out form inputs consistently.\n *\n * @tagname moz-fieldset\n * @property {string} label - The label for the fieldset's legend.\n * @property {string} description - The description for the fieldset.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n */\nexport default class MozFieldset extends MozLitElement {\n  static properties = {\n    label: { type: String, fluent: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n  };\n\n  descriptionTemplate() {\n    if (this.description) {\n      return html`<span id=\"description\" class=\"description text-deemphasized\">\n          ${this.description}\n        </span>\n        ${this.supportPageTemplate()}`;\n    }\n    return \"\";\n  }\n  supportPageTemplate() {\n    if (this.supportPage) {\n      return html`<a\n        is=\"moz-support-link\"\n        support-page=${this.supportPage}\n        part=\"support-link\"\n      ></a>`;\n    }\n    return html`<slot name=\"support-link\"></slot>`;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozfieldsetStyles}\"\n      />\n      <fieldset\n        aria-describedby=${ifDefined(this.description ? \"description\" : null)}\n      >\n        <legend part=\"label\">${this.label}</legend>\n        ${!this.description ? this.supportPageTemplate() : \"\"}\n        ${this.descriptionTemplate()}\n        <div id=\"inputs\" part=\"inputs\">\n          <slot></slot>\n        </div>\n      </fieldset>\n    `;\n  }\n}\ncustomElements.define(\"moz-fieldset\", MozFieldset);\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.formatAccessKey();\n      }).observe(this, { characterData: true, childList: true, subtree: true });\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#observer.disconnect();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement, MozBaseInputElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-fieldset.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-support-link.mjs\";\n\nconst NAVIGATION_FORWARD = \"forward\";\nconst NAVIGATION_BACKWARD = \"backward\";\n\nconst NAVIGATION_VALUE = {\n  [NAVIGATION_FORWARD]: 1,\n  [NAVIGATION_BACKWARD]: -1,\n};\n\nconst DIRECTION_RIGHT = \"Right\";\nconst DIRECTION_LEFT = \"Left\";\n\nconst NAVIGATION_DIRECTIONS = {\n  LTR: {\n    FORWARD: DIRECTION_RIGHT,\n    BACKWARD: DIRECTION_LEFT,\n  },\n  RTL: {\n    FORWARD: DIRECTION_LEFT,\n    BACKWARD: DIRECTION_RIGHT,\n  },\n};\n\n/**\n * Element used to group and associate moz-radio buttons so that they function\n * as a single form-control element.\n *\n * @tagname moz-radio-group\n * @property {boolean} disabled - Whether or not the fieldset is disabled.\n * @property {string} label - Label for the group of moz-radio elements.\n * @property {string} description - Description for the group of moz-radio elements.\n * @property {string} supportPage - Support page for the group of moz-radio elements.\n * @property {string} name\n *  Input name of the radio group. Propagates to moz-radio children.\n * @property {string} value\n *  Selected value for the group. Changing the value updates the checked\n *  state of moz-radio children and vice versa.\n * @slot default - The radio group's content, intended for moz-radio elements.\n * @slot support-link - The radio group's support link intended for moz-radio elements.\n */\nexport class MozRadioGroup extends MozLitElement {\n  #radioButtons;\n  #value;\n\n  static properties = {\n    disabled: { type: Boolean, reflect: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    label: { type: String, fluent: true },\n    name: { type: String },\n    value: { type: String },\n  };\n\n  static queries = {\n    fieldset: \"moz-fieldset\",\n  };\n\n  set value(newValue) {\n    this.#value = newValue;\n    this.radioButtons.forEach(button => {\n      button.checked = this.value === button.value;\n    });\n    this.syncFocusState();\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  get focusableIndex() {\n    if (this.#value) {\n      let selectedIndex = this.radioButtons.findIndex(\n        button => button.value === this.#value && !button.disabled\n      );\n      if (selectedIndex !== -1) {\n        return selectedIndex;\n      }\n    }\n    return this.radioButtons.findIndex(button => !button.disabled);\n  }\n\n  // Query for moz-radio elements the first time they are needed + ensure they\n  // have been upgraded so we can access properties.\n  get radioButtons() {\n    if (!this.#radioButtons) {\n      this.#radioButtons = (\n        this.shadowRoot\n          ?.querySelector(\"slot:not([name])\")\n          ?.assignedElements() || [...this.children]\n      )?.filter(el => el.localName === \"moz-radio\" && !el.slot);\n      this.#radioButtons.forEach(button => customElements.upgrade(button));\n    }\n    return this.#radioButtons;\n  }\n\n  constructor() {\n    super();\n    this.disabled = false;\n    this.addEventListener(\"keydown\", e => this.handleKeydown(e));\n  }\n\n  firstUpdated() {\n    this.syncStateToRadioButtons();\n  }\n\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await Promise.all(this.radioButtons.map(button => button.updateComplete));\n  }\n\n  syncStateToRadioButtons() {\n    this.radioButtons.forEach(button => {\n      if (button.checked && this.value == undefined) {\n        this.value = button.value;\n      }\n      button.name = this.name;\n    });\n    this.syncFocusState();\n  }\n\n  syncFocusState() {\n    let focusableIndex = this.focusableIndex;\n    this.radioButtons.forEach((button, index) => {\n      button.inputTabIndex = focusableIndex === index ? 0 : -1;\n    });\n  }\n\n  // NB: We may need to revise this to avoid bugs when we add more focusable\n  // elements to moz-radio-group / moz-radio.\n  handleKeydown(event) {\n    let directions = this.getNavigationDirections();\n    switch (event.key) {\n      case \"Down\":\n      case \"ArrowDown\":\n      case directions.FORWARD:\n      case `Arrow${directions.FORWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_FORWARD);\n        break;\n      }\n      case \"Up\":\n      case \"ArrowUp\":\n      case directions.BACKWARD:\n      case `Arrow${directions.BACKWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_BACKWARD);\n        break;\n      }\n    }\n  }\n\n  getNavigationDirections() {\n    if (this.isDocumentRTL) {\n      return NAVIGATION_DIRECTIONS.RTL;\n    }\n    return NAVIGATION_DIRECTIONS.LTR;\n  }\n\n  get isDocumentRTL() {\n    if (typeof Services !== \"undefined\") {\n      return Services.locale.isAppLocaleRTL;\n    }\n    return document.dir === \"rtl\";\n  }\n\n  navigate(direction) {\n    let currentIndex = this.focusableIndex;\n    let indexStep = this.radioButtons.length + NAVIGATION_VALUE[direction];\n\n    for (let i = 1; i < this.radioButtons.length; i++) {\n      let nextIndex = (currentIndex + indexStep * i) % this.radioButtons.length;\n      if (!this.radioButtons[nextIndex].disabled) {\n        this.radioButtons[nextIndex].click();\n        return;\n      }\n    }\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"name\")) {\n      this.handleSetName();\n    }\n    if (changedProperties.has(\"disabled\")) {\n      this.radioButtons.forEach(button => {\n        button.requestUpdate();\n      });\n    }\n  }\n\n  handleSetName() {\n    this.radioButtons.forEach(button => {\n      button.name = this.name;\n    });\n  }\n\n  // Re-dispatch change event so it's re-targeted to moz-radio-group.\n  handleChange(event) {\n    event.stopPropagation();\n    this.dispatchEvent(new Event(event.type));\n  }\n\n  handleSlotChange() {\n    this.#radioButtons = null;\n    this.syncStateToRadioButtons();\n  }\n\n  render() {\n    return html`\n      <moz-fieldset\n        part=\"fieldset\"\n        description=${ifDefined(this.description)}\n        support-page=${ifDefined(this.supportPage)}\n        role=\"radiogroup\"\n        ?disabled=${this.disabled}\n        label=${this.label}\n        exportparts=\"inputs, support-link\"\n      >\n        ${!this.supportPage\n          ? html`<slot slot=\"support-link\" name=\"support-link\"></slot>`\n          : \"\"}\n        <slot\n          @slotchange=${this.handleSlotChange}\n          @change=${this.handleChange}\n        ></slot>\n      </moz-fieldset>\n    `;\n  }\n}\ncustomElements.define(\"moz-radio-group\", MozRadioGroup);\n\n/**\n * Input element that allows a user to select one option from a group of options.\n *\n * @tagname moz-radio\n * @property {boolean} checked - Whether or not the input is selected.\n * @property {string} description - Description for the input.\n * @property {boolean} disabled - Whether or not the input is disabled.\n * @property {string} iconSrc - Path to an icon displayed next to the input.\n * @property {number} inputTabIndex - Tabindex of the input element.\n * @property {string} label - Label for the radio input.\n * @property {string} name\n *  Name of the input control, set by the associated moz-radio-group element.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {number} value - Value of the radio input.\n */\nexport class MozRadio extends MozBaseInputElement {\n  #controller;\n\n  static properties = {\n    checked: { type: Boolean, reflect: true },\n    inputTabIndex: { type: Number, state: true },\n  };\n\n  constructor() {\n    super();\n    this.checked = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    let hostRadioGroup = this.parentElement || this.getRootNode().host;\n    if (!(hostRadioGroup instanceof MozRadioGroup)) {\n      console.error(\"moz-radio can only be used in moz-radio-group element.\");\n    }\n\n    this.#controller = hostRadioGroup;\n    if (this.#controller.value) {\n      this.checked = this.value === this.#controller.value;\n    }\n  }\n\n  willUpdate(changedProperties) {\n    super.willUpdate(changedProperties);\n    // Handle setting checked directly via JS.\n    if (\n      changedProperties.has(\"checked\") &&\n      this.checked &&\n      this.#controller.value &&\n      this.value !== this.#controller.value\n    ) {\n      this.#controller.value = this.value;\n    }\n    // Handle un-checking directly via JS. If the checked input is un-checked,\n    // the value of the associated moz-radio-group needs to be un-set.\n    if (\n      changedProperties.has(\"checked\") &&\n      !this.checked &&\n      this.#controller.value &&\n      this.value === this.#controller.value\n    ) {\n      this.#controller.value = \"\";\n    }\n\n    if (changedProperties.has(\"disabled\")) {\n      // Prevent enabling a radio button if containing radio-group is disabled.\n      if (this.disabled === false && this.#controller.disabled) {\n        this.disabled = true;\n      } else if (this.checked || !this.#controller.value) {\n        // Update buttons via moz-radio-group for proper keyboard nav behavior.\n        this.#controller.syncFocusState();\n      }\n    }\n  }\n\n  handleClick() {\n    this.#controller.value = this.value;\n    this.focus();\n  }\n\n  // Re-dispatch change event so it propagates out of moz-radio.\n  handleChange(e) {\n    this.dispatchEvent(new Event(e.type, e));\n  }\n\n  inputTemplate() {\n    return html`<input\n      type=\"radio\"\n      id=\"input\"\n      value=${this.value}\n      name=${this.name}\n      .checked=${this.checked}\n      aria-checked=${this.checked}\n      aria-describedby=\"description\"\n      tabindex=${this.inputTabIndex}\n      ?disabled=${this.disabled || this.#controller.disabled}\n      accesskey=${ifDefined(this.accessKey)}\n      @click=${this.handleClick}\n      @change=${this.handleChange}\n    />`;\n  }\n}\ncustomElements.define(\"moz-radio\", MozRadio);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport \"./moz-radio-group.mjs\";\n\nlet greetings = [\"hello\", \"howdy\", \"hola\"];\nlet icons = [\n  \"chrome://global/skin/icons/highlights.svg\",\n  \"chrome://global/skin/icons/delete.svg\",\n  \"chrome://global/skin/icons/defaultFavicon.svg\",\n];\nlet accesskeyOptions = [\"h\", \"w\", \"X\"];\n\nlet defaultLabelIds = [\"moz-radio-0\", \"moz-radio-1\", \"moz-radio-2\"];\nlet wrappedLabelIds = [\n  \"moz-radio-long-0\",\n  \"moz-radio-long-1\",\n  \"moz-radio-long-2\",\n];\n\nexport default {\n  title: \"UI Widgets/Radio Group\",\n  component: \"moz-radio-group\",\n  argTypes: {\n    disabledButtons: {\n      options: greetings,\n      control: { type: \"check\" },\n    },\n    buttonLabels: {\n      options: [\"default\", \"wrapped\"],\n      mapping: {\n        default: defaultLabelIds,\n        wrapped: wrappedLabelIds,\n      },\n      control: { type: \"radio\" },\n    },\n    accesskeys: {\n      if: { arg: \"showAccesskeys\", truthy: true },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: [\"click\", \"input\", \"change\"],\n    },\n    status: \"in-development\",\n    fluent: `\nmoz-radio-group =\n  .label = This is the group label\nmoz-radio-0 =\n  .label = Hello\nmoz-radio-1 =\n  .label = Howdy\nmoz-radio-2 =\n  .label = Hola\nmoz-radio-long-0 =\n  .label = Hello ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\nmoz-radio-long-1 =\n  .label = Howdy ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\nmoz-radio-long-2 =\n  .label = Hola ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\nmoz-radio-described-0 =\n  .label = Hello\n  .description = This is the first option.\nmoz-radio-described-1 =\n  .label = Howdy\n  .description = This is the second option.\nmoz-radio-described-2 =\n  .label = Hola\n  .description = This is the third option.\nmoz-radio-described-long-0 =\n  .label = Hello ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\n  .description = This is the first option.\nmoz-radio-described-long-1 =\n  .label = Howdy ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\n  .description = This is the second option.\nmoz-radio-described-long-2 =\n  .label = Hola ipsum dolor sit amet, consectetur adipiscing elit. Cras tincidunt diam id ligula faucibus volutpat. Integer quis ultricies elit. In in dolor luctus velit sollicitudin efficitur vel id massa.\n  .description = This is the third option.\nmoz-radio-group-description =\n  .label = This is the group label\n  .description = This is the group description\n    `,\n  },\n};\n\nconst Template = ({\n  value = greetings[0],\n  groupL10nId = \"moz-radio-group\",\n  buttonLabels,\n  groupName,\n  showIcons,\n  disabled,\n  disabledButtons,\n  showDescriptions,\n  showAccesskeys,\n  accesskeys,\n  supportPage,\n  groupSupportPage,\n  hasSlottedSupportLinks,\n  groupSlottedSupportLink,\n}) => html`\n  <moz-radio-group\n    name=${groupName}\n    data-l10n-id=${groupL10nId}\n    support-page=${ifDefined(groupSupportPage)}\n    ?disabled=${disabled}\n    value=${value}\n  >\n    ${groupSlottedSupportLink\n      ? html`<a href=\"/\" slot=\"support-link\">Slotted support link</a>`\n      : \"\"}\n    ${greetings.map(\n      (greeting, i) => html`\n        <moz-radio\n          ?disabled=${disabledButtons.includes(greeting)}\n          value=${greeting}\n          data-l10n-id=${showDescriptions\n            ? buttonLabels[i].replace(\"moz-radio\", \"moz-radio-described\")\n            : buttonLabels[i]}\n          iconSrc=${ifDefined(showIcons ? icons[i] : \"\")}\n          accesskey=${ifDefined(showAccesskeys ? accesskeys[i] : \"\")}\n          support-page=${ifDefined(supportPage)}\n        >\n          ${hasSlottedSupportLinks\n            ? html`<a slot=\"support-link\" href=\"www.example.com\">\n                Click me!\n              </a>`\n            : \"\"}\n        </moz-radio>\n      `\n    )}\n  </moz-radio-group>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  label: \"\",\n  buttonLabels: \"default\",\n  groupName: \"greeting\",\n  unchecked: false,\n  showIcons: false,\n  disabled: false,\n  disabledButtons: [],\n  showDescriptions: false,\n  showAccesskeys: false,\n  accesskeys: accesskeyOptions,\n  supportPage: \"\",\n  groupSupportPage: \"\",\n  hasSlottedSupportLinks: false,\n  groupSlottedSupportLink: false,\n};\n\nexport const AllUnchecked = Template.bind({});\nAllUnchecked.args = {\n  ...Default.args,\n  value: \"\",\n};\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = {\n  ...Default.args,\n  showIcons: true,\n};\n\nexport const DisabledRadioGroup = Template.bind({});\nDisabledRadioGroup.args = {\n  ...Default.args,\n  disabled: true,\n};\n\nexport const DisabledRadioButton = Template.bind({});\nDisabledRadioButton.args = {\n  ...Default.args,\n  disabledButtons: [\"hello\"],\n};\n\nexport const WithDescriptions = Template.bind({});\nWithDescriptions.args = {\n  ...Default.args,\n  showDescriptions: true,\n};\n\nexport const WithAccesskeys = Template.bind({});\nWithAccesskeys.args = {\n  ...Default.args,\n  showAccesskeys: true,\n};\n\nexport const WithSupportLinks = Template.bind({});\nWithSupportLinks.args = {\n  ...Default.args,\n  supportPage: \"test\",\n};\n\nexport const WithSlottedSupportLinks = Template.bind({});\nWithSlottedSupportLinks.args = {\n  ...Default.args,\n  hasSlottedSupportLinks: true,\n};\n\nexport const WithRadioGroupDescription = Template.bind({});\nWithRadioGroupDescription.args = {\n  ...Default.args,\n  groupL10nId: \"moz-radio-group-description\",\n};\n\nexport const WithRadioGroupSupportLink = Template.bind({});\nWithRadioGroupSupportLink.args = {\n  ...Default.args,\n  groupL10nId: \"moz-radio-group-description\",\n  groupSupportPage: \"this is the group support page\",\n};\n\nexport const WithRadioGroupSlottedSupportLink = Template.bind({});\nWithRadioGroupSlottedSupportLink.args = {\n  ...Default.args,\n  groupL10nId: \"moz-radio-group-description\",\n  groupSlottedSupportLink: true,\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozSupportLink.ftl\");\n\n/**\n * An extension of the anchor element that helps create links to Mozilla's\n * support documentation. This should be used for SUMO links only - other \"Learn\n * more\" links can use the regular anchor element.\n *\n * @tagname moz-support-link\n * @attribute {string} support-page - Short-hand string from SUMO to the specific support page.\n * @attribute {string} utm-content - UTM parameter for a URL, if it is an AMO URL.\n * @attribute {string} data-l10n-id - Fluent ID used to generate the text content.\n */\nexport default class MozSupportLink extends HTMLAnchorElement {\n  static SUPPORT_URL = \"https://www.mozilla.org/\";\n  static get observedAttributes() {\n    return [\"support-page\", \"utm-content\"];\n  }\n\n  /**\n   * Handles setting up the SUPPORT_URL preference getter.\n   * Without this, the tests for this component may not behave\n   * as expected.\n   * @private\n   * @memberof MozSupportLink\n   */\n  #register() {\n    if (window.document.nodePrincipal?.isSystemPrincipal) {\n      ChromeUtils.defineESModuleGetters(MozSupportLink, {\n        BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n      });\n\n      // eslint-disable-next-line no-shadow\n      let { XPCOMUtils } = window.XPCOMUtils\n        ? window\n        : ChromeUtils.importESModule(\n            \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n          );\n      XPCOMUtils.defineLazyPreferenceGetter(\n        MozSupportLink,\n        \"SUPPORT_URL\",\n        \"app.support.baseURL\",\n        \"\",\n        null,\n        val => Services.urlFormatter.formatURL(val)\n      );\n    } else if (!window.IS_STORYBOOK) {\n      MozSupportLink.SUPPORT_URL = window.RPMGetFormatURLPref(\n        \"app.support.baseURL\"\n      );\n    }\n  }\n\n  connectedCallback() {\n    this.#register();\n    this.#setHref();\n    this.setAttribute(\"target\", \"_blank\");\n    this.addEventListener(\"click\", this);\n    if (\n      !this.getAttribute(\"data-l10n-id\") &&\n      !this.getAttribute(\"data-l10n-name\") &&\n      !this.childElementCount\n    ) {\n      document.l10n.setAttributes(this, \"moz-support-link-text\");\n    }\n    document.l10n.translateFragment(this);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"click\", this);\n  }\n\n  handleEvent(e) {\n    if (e.type == \"click\") {\n      if (window.openTrustedLinkIn) {\n        let where = MozSupportLink.BrowserUtils.whereToOpenLink(e, false, true);\n        if (where == \"current\") {\n          where = \"tab\";\n        }\n        e.preventDefault();\n        openTrustedLinkIn(this.href, where);\n      }\n    }\n  }\n\n  attributeChangedCallback(attrName) {\n    if (attrName === \"support-page\" || attrName === \"utm-content\") {\n      this.#setHref();\n    }\n  }\n\n  #setHref() {\n    let supportPage = this.getAttribute(\"support-page\") ?? \"\";\n    let base = MozSupportLink.SUPPORT_URL + supportPage;\n    this.href = this.hasAttribute(\"utm-content\")\n      ? formatUTMParams(this.getAttribute(\"utm-content\"), base)\n      : base;\n  }\n}\ncustomElements.define(\"moz-support-link\", MozSupportLink, { extends: \"a\" });\n\n/**\n * Adds UTM parameters to a given URL, if it is an AMO URL.\n *\n * @param {string} contentAttribute\n *        Identifies the part of the UI with which the link is associated.\n * @param {string} url\n * @returns {string}\n *          The url with UTM parameters if it is an AMO URL.\n *          Otherwise the url in unmodified form.\n */\nexport function formatUTMParams(contentAttribute, url) {\n  if (!contentAttribute) {\n    return url;\n  }\n  let parsedUrl = new URL(url);\n  let domain = `.${parsedUrl.hostname}`;\n  if (\n    !domain.endsWith(\".mozilla.org\") &&\n    // For testing: addons-dev.allizom.org and addons.allizom.org\n    !domain.endsWith(\".allizom.org\")\n  ) {\n    return url;\n  }\n\n  parsedUrl.searchParams.set(\"utm_source\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_medium\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_content\", contentAttribute);\n  return parsedUrl.href;\n}\n"],"names":[],"sourceRoot":""}