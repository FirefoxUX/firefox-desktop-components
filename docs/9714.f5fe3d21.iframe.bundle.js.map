{"version":3,"file":"9714.f5fe3d21.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjQA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAKA;AAQA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-page-nav/moz-page-nav.mjs","webpack:///../../../toolkit/content/widgets/moz-support-link/moz-support-link.mjs"],"sourcesContent":["import __chrome_styles_loader__mozpagenavbuttonStyles from \"toolkit/content/widgets/moz-page-nav/moz-page-nav-button.css\";\nimport __chrome_styles_loader__mozpagenavStyles from \"toolkit/content/widgets/moz-page-nav/moz-page-nav.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, when } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-support-link.mjs\";\n\n/**\n * A grouping of navigation buttons that is displayed at the page level,\n * intended to change the selected view, provide a heading, and have links\n * to external resources.\n *\n * @tagname moz-page-nav\n * @property {string} currentView - The currently selected view.\n * @property {string} heading - A heading to be displayed at the top of the navigation.\n * @slot [default] - Used to append moz-page-nav-button elements to the navigation.\n * @slot [subheading] - Used to append page specific search input or notification to the nav.\n */\nexport default class MozPageNav extends MozLitElement {\n  static properties = {\n    currentView: { type: String },\n    heading: { type: String, fluent: true },\n  };\n\n  static queries = {\n    headingEl: \"#page-nav-heading\",\n    primaryNavGroupSlot: \".primary-nav-group slot\",\n    secondaryNavGroupSlot: \"#secondary-nav-group slot\",\n  };\n\n  get pageNavButtons() {\n    return this.getVisibleSlottedChildren(this.primaryNavGroupSlot);\n  }\n\n  get secondaryNavButtons() {\n    return this.getVisibleSlottedChildren(this.secondaryNavGroupSlot);\n  }\n\n  getVisibleSlottedChildren(el) {\n    return el\n      ?.assignedElements()\n      .filter(\n        element =>\n          element?.localName === \"moz-page-nav-button\" &&\n          this.checkElementVisibility(element)\n      );\n  }\n\n  checkElementVisibility(element) {\n    let computedStyles = window.getComputedStyle(element);\n    return (\n      !element.hidden &&\n      computedStyles.getPropertyValue(\"display\") !== \"none\" &&\n      computedStyles.getPropertyValue(\"visibility\") !== \"hidden\" &&\n      computedStyles.getPropertyValue(\"opacity\") > 0\n    );\n  }\n\n  onChangeView(e) {\n    this.currentView = e.target.view;\n  }\n\n  handleFocus(e) {\n    if (e.key == \"ArrowDown\" || e.key == \"ArrowRight\") {\n      e.preventDefault();\n      this.focusNextView();\n    } else if (e.key == \"ArrowUp\" || e.key == \"ArrowLeft\") {\n      e.preventDefault();\n      this.focusPreviousView();\n    }\n  }\n\n  focusPreviousView() {\n    let pageNavButtons = this.pageNavButtons;\n    let currentIndex = pageNavButtons.findIndex(b => b.selected);\n    let prev = pageNavButtons[currentIndex - 1];\n    if (prev) {\n      prev.activate();\n      prev.buttonEl.focus();\n    }\n  }\n\n  focusNextView() {\n    let pageNavButtons = this.pageNavButtons;\n    let currentIndex = pageNavButtons.findIndex(b => b.selected);\n    let next = pageNavButtons[currentIndex + 1];\n    if (next) {\n      next.activate();\n      next.buttonEl.focus();\n    }\n  }\n\n  onSecondaryNavChange(event) {\n    let secondaryNavElements = event.target.assignedElements();\n    this.hasSecondaryNav = !!secondaryNavElements.length;\n    secondaryNavElements?.forEach(el => {\n      el.classList.add(\"secondary-nav-item\");\n    });\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozpagenavStyles}\"\n      />\n      <div class=\"page-nav-heading-wrapper\">\n        <div class=\"logo\"></div>\n        <h1 class=\"page-nav-heading\" id=\"page-nav-heading\">${this.heading}</h1>\n      </div>\n      <slot name=\"subheading\"></slot>\n      <nav>\n        <div\n          class=\"primary-nav-group\"\n          role=\"tablist\"\n          aria-orientation=\"vertical\"\n          aria-labelledby=\"page-nav-heading\"\n        >\n          <slot\n            @change-view=${this.onChangeView}\n            @keydown=${this.handleFocus}\n          ></slot>\n        </div>\n        ${when(this.hasSecondaryNav, () => html`<hr />`)}\n        <div id=\"secondary-nav-group\" role=\"group\">\n          <slot\n            name=\"secondary-nav\"\n            @slotchange=${this.onSecondaryNavChange}\n          ></slot>\n        </div>\n      </nav>\n    `;\n  }\n\n  updated() {\n    let isViewSelected = false;\n    let assignedPageNavButtons = this.pageNavButtons;\n    for (let button of assignedPageNavButtons) {\n      button.selected = button.view == this.currentView;\n      isViewSelected = isViewSelected || button.selected;\n    }\n    if (!isViewSelected && assignedPageNavButtons.length) {\n      // Current page nav has no matching view, reset to the first view.\n      assignedPageNavButtons[0].activate();\n    }\n  }\n}\ncustomElements.define(\"moz-page-nav\", MozPageNav);\n\n/**\n * A navigation button intended to change the selected view within a page.\n *\n * @tagname moz-page-nav-button\n * @property {string} href - (optional) The url for an external link if not a support page URL\n * @property {string} iconSrc - The chrome:// url for the icon used for the button.\n * @property {boolean} selected - Whether or not the button is currently selected.\n * @property {string} supportPage - (optional) The short name for the support page a secondary link should launch to\n * @slot [default] - Used to append the l10n string to the button.\n */\nexport class MozPageNavButton extends MozLitElement {\n  static properties = {\n    iconSrc: { type: String, reflect: true },\n    href: { type: String },\n    selected: { type: Boolean },\n    supportPage: { type: String, attribute: \"support-page\" },\n  };\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n  }\n\n  static queries = {\n    buttonEl: \"button\",\n    linkEl: \"a\",\n  };\n\n  get view() {\n    return this.getAttribute(\"view\");\n  }\n\n  activate() {\n    this.dispatchEvent(\n      new CustomEvent(\"change-view\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  itemTemplate() {\n    if (this.href || this.supportPage) {\n      return this.linkTemplate();\n    }\n    return this.buttonTemplate();\n  }\n\n  buttonTemplate() {\n    return html`\n      <button\n        aria-selected=${this.selected}\n        tabindex=${this.selected ? 0 : -1}\n        role=\"tab\"\n        ?selected=${this.selected}\n        @click=${this.activate}\n      >\n        ${this.innerContentTemplate()}\n      </button>\n    `;\n  }\n\n  linkTemplate() {\n    if (this.supportPage) {\n      return html`\n        <a\n          is=\"moz-support-link\"\n          class=\"moz-page-nav-link\"\n          support-page=${this.supportPage}\n        >\n          ${this.innerContentTemplate()}\n        </a>\n      `;\n    }\n    return html`\n      <a href=${this.href} class=\"moz-page-nav-link\" target=\"_blank\">\n        ${this.innerContentTemplate()}\n      </a>\n    `;\n  }\n\n  innerContentTemplate() {\n    return html`\n      ${this.iconSrc\n        ? html`<img\n            class=\"page-nav-icon\"\n            src=${this.iconSrc}\n            role=\"presentation\"\n          />`\n        : \"\"}\n      <slot></slot>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozpagenavbuttonStyles}\"\n      />\n      ${this.itemTemplate()}\n    `;\n  }\n}\ncustomElements.define(\"moz-page-nav-button\", MozPageNavButton);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozSupportLink.ftl\");\n\n/**\n * An extension of the anchor element that helps create links to Mozilla's\n * support documentation. This should be used for SUMO links only - other \"Learn\n * more\" links can use the regular anchor element.\n *\n * @tagname moz-support-link\n * @attribute {string} support-page - Short-hand string from SUMO to the specific support page.\n * @attribute {string} utm-content - UTM parameter for a URL, if it is an AMO URL.\n * @attribute {string} data-l10n-id - Fluent ID used to generate the text content.\n */\nexport default class MozSupportLink extends HTMLAnchorElement {\n  static SUPPORT_URL = \"https://www.mozilla.org/\";\n  static get observedAttributes() {\n    return [\"support-page\", \"utm-content\"];\n  }\n\n  /**\n   * Handles setting up the SUPPORT_URL preference getter.\n   * Without this, the tests for this component may not behave\n   * as expected.\n   * @private\n   * @memberof MozSupportLink\n   */\n  #register() {\n    if (window.document.nodePrincipal?.isSystemPrincipal) {\n      ChromeUtils.defineESModuleGetters(MozSupportLink, {\n        BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n      });\n\n      // eslint-disable-next-line no-shadow\n      let { XPCOMUtils } = window.XPCOMUtils\n        ? window\n        : ChromeUtils.importESModule(\n            \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n          );\n      XPCOMUtils.defineLazyPreferenceGetter(\n        MozSupportLink,\n        \"SUPPORT_URL\",\n        \"app.support.baseURL\",\n        \"\",\n        null,\n        val => Services.urlFormatter.formatURL(val)\n      );\n    } else if (!window.IS_STORYBOOK) {\n      MozSupportLink.SUPPORT_URL = window.RPMGetFormatURLPref(\n        \"app.support.baseURL\"\n      );\n    }\n  }\n\n  connectedCallback() {\n    this.#register();\n    this.#setHref();\n    this.setAttribute(\"target\", \"_blank\");\n    this.addEventListener(\"click\", this);\n    if (\n      !this.getAttribute(\"data-l10n-id\") &&\n      !this.getAttribute(\"data-l10n-name\") &&\n      !this.childElementCount\n    ) {\n      document.l10n.setAttributes(this, \"moz-support-link-text\");\n    }\n    document.l10n.translateFragment(this);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"click\", this);\n  }\n\n  get supportPage() {\n    return this.getAttribute(\"support-page\");\n  }\n\n  set supportPage(val) {\n    this.setAttribute(\"support-page\", val);\n  }\n\n  handleEvent(e) {\n    if (e.type == \"click\") {\n      if (window.openTrustedLinkIn) {\n        let where = MozSupportLink.BrowserUtils.whereToOpenLink(e, false, true);\n        if (where == \"current\") {\n          where = \"tab\";\n        }\n        e.preventDefault();\n        openTrustedLinkIn(this.href, where);\n      }\n    }\n  }\n\n  attributeChangedCallback(attrName) {\n    if (attrName === \"support-page\" || attrName === \"utm-content\") {\n      this.#setHref();\n    }\n  }\n\n  #setHref() {\n    let supportPage = this.getAttribute(\"support-page\") ?? \"\";\n    let base = MozSupportLink.SUPPORT_URL + supportPage;\n    this.href = this.hasAttribute(\"utm-content\")\n      ? formatUTMParams(this.getAttribute(\"utm-content\"), base)\n      : base;\n  }\n}\ncustomElements.define(\"moz-support-link\", MozSupportLink, { extends: \"a\" });\n\n/**\n * Adds UTM parameters to a given URL, if it is an AMO URL.\n *\n * @param {string} contentAttribute\n *        Identifies the part of the UI with which the link is associated.\n * @param {string} url\n * @returns {string}\n *          The url with UTM parameters if it is an AMO URL.\n *          Otherwise the url in unmodified form.\n */\nexport function formatUTMParams(contentAttribute, url) {\n  if (!contentAttribute) {\n    return url;\n  }\n  let parsedUrl = new URL(url);\n  let domain = `.${parsedUrl.hostname}`;\n  if (\n    !domain.endsWith(\".mozilla.org\") &&\n    // For testing: addons-dev.allizom.org and addons.allizom.org\n    !domain.endsWith(\".allizom.org\")\n  ) {\n    return url;\n  }\n\n  parsedUrl.searchParams.set(\"utm_source\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_medium\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_content\", contentAttribute);\n  return parsedUrl.href;\n}\n"],"names":[],"sourceRoot":""}