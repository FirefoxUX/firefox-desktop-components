{"version":3,"file":"moz-fieldset-moz-fieldset-stories.326e8c02.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrQA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5VA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAKA;AACA;AAEA;AAKA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9aA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1JA;AACA;AACA;;AAEA;AACA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-fieldset/moz-fieldset.mjs","webpack:///../../../toolkit/content/widgets/moz-toggle/moz-toggle.mjs","webpack:///../../../toolkit/content/widgets/moz-button/moz-button.mjs","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///../../../toolkit/content/widgets/lit-select-control.mjs","webpack:///../../../toolkit/content/widgets/moz-fieldset/moz-fieldset.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-radio-group/moz-radio-group.mjs"],"sourcesContent":["import __chrome_styles_loader__mozfieldsetStyles from \"toolkit/content/widgets/moz-fieldset/moz-fieldset.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n// Functions to wrap a string in a heading.\nconst HEADING_LEVEL_TEMPLATES = {\n  1: label => html`<h1>${label}</h1>`,\n  2: label => html`<h2>${label}</h2>`,\n  3: label => html`<h3>${label}</h3>`,\n  4: label => html`<h4>${label}</h4>`,\n  5: label => html`<h5>${label}</h5>`,\n  6: label => html`<h6>${label}</h6>`,\n};\n\n/**\n * Fieldset wrapper to lay out form inputs consistently.\n *\n * @tagname moz-fieldset\n * @property {string} label - The label for the fieldset's legend.\n * @property {string} description - The description for the fieldset.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {number} headingLevel - Render the legend in a heading of this level.\n * @property {boolean} disabled - Whether the fieldset and its children are disabled.\n * @property {string} iconSrc - The src for an optional icon.\n */\nexport default class MozFieldset extends MozLitElement {\n  static properties = {\n    label: { type: String, fluent: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    ariaLabel: { type: String, fluent: true, mapped: true },\n    ariaOrientation: { type: String, mapped: true },\n    headingLevel: { type: Number },\n    disabled: { type: Boolean, reflect: true },\n    iconSrc: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.headingLevel = -1;\n    this.disabled = false;\n    this.iconSrc = \"\";\n  }\n\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"disabled\")) {\n      this.#updateChildDisabledState();\n    }\n  }\n\n  #updateChildDisabledState() {\n    const formControls = [...this.querySelectorAll(\"*\")].filter(\n      element => \"disabled\" in element || \"parentDisabled\" in element\n    );\n\n    formControls.forEach(control => {\n      if (\"parentDisabled\" in control) {\n        control.parentDisabled = this.disabled;\n      }\n\n      if (this.disabled) {\n        control.setAttribute(\"disabled\", \"\");\n      } else {\n        control.removeAttribute(\"disabled\");\n      }\n    });\n  }\n\n  descriptionTemplate() {\n    if (this.description) {\n      return html`<span id=\"description\" class=\"description text-deemphasized\">\n          ${this.description}\n        </span>\n        ${this.supportPageTemplate()}`;\n    }\n    return \"\";\n  }\n\n  supportPageTemplate() {\n    if (this.supportPage) {\n      return html`<a\n        is=\"moz-support-link\"\n        support-page=${this.supportPage}\n        part=\"support-link\"\n      ></a>`;\n    }\n    return html`<slot name=\"support-link\"></slot>`;\n  }\n\n  legendTemplate() {\n    let label =\n      HEADING_LEVEL_TEMPLATES[this.headingLevel]?.(this.label) || this.label;\n    return html`<legend part=\"label\">${this.iconTemplate()}${label}</legend>`;\n  }\n\n  iconTemplate() {\n    if (!this.iconSrc) {\n      return \"\";\n    }\n    return html`<img src=${this.iconSrc} role=\"presentation\" class=\"icon\" />`;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozfieldsetStyles}\"\n      />\n      <fieldset\n        ?disabled=${this.disabled}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-describedby=${ifDefined(\n          this.description ? \"description\" : undefined\n        )}\n        aria-orientation=${ifDefined(this.ariaOrientation)}\n      >\n        ${this.label ? this.legendTemplate() : \"\"}\n        ${!this.description ? this.supportPageTemplate() : \"\"}\n        ${this.descriptionTemplate()}\n        <div id=\"inputs\" part=\"inputs\">\n          <slot></slot>\n        </div>\n      </fieldset>\n    `;\n  }\n}\ncustomElements.define(\"moz-fieldset\", MozFieldset);\n","import __chrome_styles_loader__moztoggleStyles from \"toolkit/content/widgets/moz-toggle/moz-toggle.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at htp://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * A simple toggle element that can be used to switch between two states.\n *\n * @tagname moz-toggle\n * @property {boolean} pressed - Whether or not the element is pressed.\n * @property {boolean} disabled - Whether or not the element is disabled.\n * @property {string} label - The label text.\n * @property {string} description - The description text.\n * @property {string} ariaLabel\n *  The aria-label text for cases where there is no visible label.\n * @slot support-link - Used to append a moz-support-link to the description.\n * @fires toggle\n *  Custom event indicating that the toggle's pressed state has changed.\n */\nexport default class MozToggle extends MozBaseInputElement {\n  static properties = {\n    pressed: { type: Boolean, reflect: true },\n  };\n\n  static activatedProperty = \"pressed\";\n\n  get buttonEl() {\n    return this.inputEl;\n  }\n\n  constructor() {\n    super();\n    this.pressed = false;\n  }\n\n  handleClick() {\n    this.pressed = !this.pressed;\n    this.dispatchOnUpdateComplete(\n      new CustomEvent(\"toggle\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  inputTemplate() {\n    const { pressed, disabled, ariaLabel, handleClick } = this;\n    return html`<button\n      id=\"input\"\n      part=\"button\"\n      type=\"button\"\n      class=\"toggle-button\"\n      name=${this.name}\n      value=${this.value}\n      ?disabled=${disabled}\n      aria-pressed=${pressed}\n      aria-describedby=\"description\"\n      aria-label=${ifDefined(ariaLabel ?? undefined)}\n      accesskey=${ifDefined(this.accessKey)}\n      @click=${handleClick}\n    ></button>`;\n  }\n\n  inputStylesTemplate() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__moztoggleStyles}\"\n    />`;\n  }\n}\ncustomElements.define(\"moz-toggle\", MozToggle);\n","import __chrome_styles_loader__mozbuttonStyles from \"toolkit/content/widgets/moz-button/moz-button.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * Controls moz-button behavior when menuId property is set.\n * Helps to integrate moz-button with panel-list.\n */\nclass MenuController {\n  /** @type {HTMLElement} */\n  host;\n\n  /** @type {string} */\n  #menuId;\n\n  /** @type {HTMLElement | null} */\n  #menuEl;\n\n  constructor(host) {\n    this.host = host;\n    host.addController(this);\n  }\n\n  hostConnected() {\n    this.hostUpdated();\n  }\n\n  hostDisconnected() {\n    this.#menuId = null;\n    this.#menuEl = null;\n    this.host.removeEventListener(\"click\", this.openPanelList);\n    this.host.removeEventListener(\"mousedown\", this.openPanelList);\n  }\n\n  hostUpdated() {\n    if (this.#menuId === this.host.menuId) {\n      return;\n    }\n    if (this.#menuEl?.localName == \"panel-list\") {\n      this.panelListCleanUp();\n    }\n\n    this.#menuId = this.host.menuId;\n\n    // Check to see if a menuId has been added to host, or changed\n    if (this.#menuId) {\n      this.#menuEl = this.host.getRootNode().querySelector(`#${this.#menuId}`);\n\n      if (this.#menuEl?.localName == \"panel-list\") {\n        this.panelListSetUp();\n      }\n    }\n\n    // Check to see if menuId has been removed from host\n    if (!this.#menuId) {\n      this.#menuEl = null;\n      this.host.removeController(this);\n    }\n  }\n\n  /**\n   * Handles opening/closing the panel-list when the host is clicked or activated via keyboard.\n   * @param {MouseEvent|KeyboardEvent} event\n   */\n  openPanelList = event => {\n    if (\n      (event.type == \"mousedown\" && event.button == 0) ||\n      event.inputSource == MouseEvent.MOZ_SOURCE_KEYBOARD ||\n      !event.detail\n    ) {\n      this.#menuEl?.toggle(event, this.host);\n    }\n  };\n\n  /**\n   * Sets up the host for integration with panel-list,\n   * adding necessary event listeners and ARIA attributes.\n   */\n  panelListSetUp() {\n    this.host.addEventListener(\"click\", this.openPanelList);\n    this.host.addEventListener(\"mousedown\", this.openPanelList);\n    this.host.ariaHasPopup = \"menu\";\n    this.host.ariaExpanded = this.#menuEl?.open ? \"true\" : \"false\";\n  }\n\n  /**\n   * Cleans up panel-list integration,\n   * removing event listeners and clearing ARIA attributes.\n   */\n  panelListCleanUp() {\n    this.host.removeEventListener(\"click\", this.openPanelList);\n    this.host.removeEventListener(\"mousedown\", this.openPanelList);\n    this.host.ariaHasPopup = null;\n    this.host.ariaExpanded = null;\n  }\n}\n\n/**\n * A button with multiple types and two sizes.\n *\n * @tagname moz-button\n * @property {string} label - The button's label, will be overridden by slotted content.\n * @property {string} type - The button type.\n *   Options: default, primary, destructive, icon, icon ghost, ghost.\n * @property {string} size - The button size.\n *   Options: default, small.\n * @property {boolean} disabled - The disabled state.\n * @property {string} title - The button's title attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} titleAttribute - Internal, map title attribute to the title JS property.\n * @property {string} tooltipText - Set the title property, the title attribute will be used first.\n * @property {string} ariaLabel - The button's aria-label attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} ariaHasPopup - The button's aria-haspopup attribute, that indicates that a popup element can be triggered by the button.\n * @property {string} ariaExpanded - The button's aria-expanded attribute, that indicates whether or not the controlled elements are displayed or hidden.\n * @property {string} iconSrc - Path to the icon that should be displayed in the button.\n * @property {string} ariaLabelAttribute - Internal, map aria-label attribute to the ariaLabel JS property.\n * @property {string} ariaHasPopupAttribute - Internal, map aria-haspopup attribute to the ariaHasPopup JS property.\n * @property {string} ariaExpandedAttribute - Internal, map aria-expanded attribute to the ariaExpanded JS property.\n * @property {string} hasVisibleLabel - Internal, tracks whether or not the button has a visible label.\n * @property {boolean} attention - Show a dot notification on the button if true.\n * @property {boolean} parentDisabled - When the parent of this component is disabled.\n * @property {string} iconPosition - The icon's position relative to the button label.\n *   Options: start, end.\n * @property {string} menuId - A CSS selector string that identifies the associated menu element controlled by the button.\n * @property {HTMLButtonElement} buttonEl - The internal button element in the shadow DOM.\n * @property {HTMLButtonElement} slotEl - The internal slot element in the shadow DOM.\n * @cssproperty [--button-outer-padding-inline] - Used to set the outer inline padding of toolbar style buttons\n * @csspropert [--button-outer-padding-block] - Used to set the outer block padding of toolbar style buttons.\n * @cssproperty [--button-outer-padding-inline-start] - Used to set the outer inline-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-inline-end] - Used to set the outer inline-end padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-start] - Used to set the outer block-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-end] - Used to set the outer block-end padding of toolbar style buttons\n * @slot default - The button's content, overrides label property.\n * @fires click - The click event.\n */\nexport default class MozButton extends MozLitElement {\n  static shadowRootOptions = {\n    ...MozLitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  static properties = {\n    label: { type: String, reflect: true, fluent: true },\n    type: { type: String, reflect: true },\n    size: { type: String, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    title: { type: String, mapped: true },\n    tooltipText: { type: String, fluent: true },\n    ariaLabel: { type: String, mapped: true },\n    ariaHasPopup: { type: String, mapped: true },\n    ariaExpanded: { type: String, mapped: true },\n    iconSrc: { type: String },\n    hasVisibleLabel: { type: Boolean, state: true },\n    accessKey: { type: String, mapped: true },\n    attention: { type: Boolean },\n    iconPosition: { type: String, reflect: true },\n    menuId: { type: String, reflect: true },\n    parentDisabled: { type: Boolean },\n  };\n\n  static queries = {\n    buttonEl: \"button\",\n    slotEl: \"slot\",\n    backgroundEl: \".button-background\",\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.size = \"default\";\n    this.disabled = false;\n    this.hasVisibleLabel = !!this.label;\n    this.attention = false;\n    this.iconPosition = \"start\";\n    this.menuId = \"\";\n    this.parentDisabled = undefined;\n  }\n\n  willUpdate(changedProperties) {\n    super.willUpdate(changedProperties);\n\n    if (changedProperties.has(\"menuId\")) {\n      if (this.menuId && !this._menuController) {\n        this._menuController = new MenuController(this);\n      }\n      if (!this.menuId && this._menuController) {\n        this._menuController = null;\n      }\n    }\n  }\n\n  // Delegate clicks on host to the button element.\n  click() {\n    this.buttonEl.click();\n  }\n\n  checkForLabelText() {\n    this.hasVisibleLabel = this.slotEl\n      ?.assignedNodes()\n      .some(node => node.textContent.trim());\n  }\n\n  labelTemplate() {\n    if (this.label) {\n      return this.label;\n    }\n    return html`<slot @slotchange=${this.checkForLabelText}></slot>`;\n  }\n\n  iconTemplate(position) {\n    if (this.iconSrc && position == this.iconPosition) {\n      return html`<img src=${this.iconSrc} role=\"presentation\" />`;\n    }\n    return null;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttonStyles}\"\n      />\n      <button\n        ?disabled=${this.disabled || this.parentDisabled}\n        title=${ifDefined(this.title || this.tooltipText)}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-expanded=${ifDefined(this.ariaExpanded)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        accesskey=${ifDefined(this.accessKey)}\n      >\n        <span\n          class=${classMap({\n            labelled: this.label || this.hasVisibleLabel,\n            \"button-background\": true,\n            badged:\n              (this.iconSrc || this.type.includes(\"icon\")) && this.attention,\n          })}\n          part=\"button\"\n          type=${this.type}\n          size=${this.size}\n        >\n          ${this.iconTemplate(\"start\")}\n          <label\n            is=\"moz-label\"\n            shownaccesskey=${ifDefined(this.accessKey)}\n            part=\"moz-button-label\"\n          >\n            ${this.labelTemplate()}\n          </label>\n          ${this.iconTemplate(\"end\")}\n        </span>\n      </button>\n    `;\n  }\n}\ncustomElements.define(\"moz-button\", MozButton);\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  #startMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.observe(this, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  #stopMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.disconnect();\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.#lastFormattedAccessKey = null;\n        this.formatAccessKey();\n      });\n      this.#startMutationObserver();\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#stopMutationObserver();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#stopMutationObserver();\n    try {\n      this.#formatAccessKey(accessKey);\n    } finally {\n      queueMicrotask(() => this.#startMutationObserver());\n    }\n  }\n\n  #formatAccessKey(accessKey) {\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"./vendor/lit.all.mjs\";\nimport { MozLitElement } from \"./lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-fieldset.mjs\";\n\nconst NAVIGATION_FORWARD = \"forward\";\nconst NAVIGATION_BACKWARD = \"backward\";\n\nconst NAVIGATION_VALUE = {\n  [NAVIGATION_FORWARD]: 1,\n  [NAVIGATION_BACKWARD]: -1,\n};\n\nconst DIRECTION_RIGHT = \"Right\";\nconst DIRECTION_LEFT = \"Left\";\n\nconst NAVIGATION_DIRECTIONS = {\n  LTR: {\n    FORWARD: DIRECTION_RIGHT,\n    BACKWARD: DIRECTION_LEFT,\n  },\n  RTL: {\n    FORWARD: DIRECTION_LEFT,\n    BACKWARD: DIRECTION_RIGHT,\n  },\n};\n\n/**\n * Class that can be extended to handle managing the selected and focus states\n * of child elements using a roving tabindex. For more information on this focus\n * management pattern, see:\n * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex\n *\n * Child elements must use SelectControlItemMixin for behavior to work as\n * expected.\n */\nexport class SelectControlBaseElement extends MozLitElement {\n  #childElements;\n  #value;\n  #checkedIndex;\n  #focusedIndex;\n\n  static properties = {\n    type: { type: String },\n    disabled: { type: Boolean, reflect: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    label: { type: String, fluent: true },\n    name: { type: String },\n    value: { type: String },\n  };\n\n  static queries = {\n    fieldset: \"moz-fieldset\",\n  };\n\n  set value(newValue) {\n    this.#value = newValue;\n    this.childElements.forEach((item, index) => {\n      let isChecked = this.value === item.value;\n      item.checked = isChecked;\n      if (isChecked && !item.disabled) {\n        this.#checkedIndex = index;\n      }\n    });\n    this.syncFocusState();\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  get hasValue() {\n    return this.value === 0 || !!this.value;\n  }\n\n  set focusedIndex(newIndex) {\n    if (this.#focusedIndex !== newIndex) {\n      this.#focusedIndex = newIndex;\n      this.syncFocusState();\n    }\n  }\n\n  get checkedIndex() {\n    return this.#checkedIndex;\n  }\n\n  set checkedIndex(newIndex) {\n    if (this.#checkedIndex !== newIndex) {\n      this.#checkedIndex = newIndex;\n      this.syncFocusState();\n    }\n  }\n\n  get focusableIndex() {\n    let activeEl = this.getRootNode().activeElement;\n    let childElFocused =\n      activeEl?.localName == this.constructor.childElementName;\n\n    if (\n      this.#checkedIndex != undefined &&\n      this.#value &&\n      (this.type == \"radio\" || !childElFocused)\n    ) {\n      return this.#checkedIndex;\n    }\n\n    if (\n      this.#focusedIndex != undefined &&\n      this.type === \"listbox\" &&\n      childElFocused\n    ) {\n      return this.#focusedIndex;\n    }\n\n    return this.childElements.findIndex(item => !item.disabled);\n  }\n\n  // Query for child elements the first time they are needed + ensure they\n  // have been upgraded so we can access properties.\n  get childElements() {\n    if (!this.#childElements) {\n      this.#childElements = (\n        this.shadowRoot\n          ?.querySelector(\"slot:not([name])\")\n          ?.assignedElements() || [...this.children]\n      )?.filter(\n        el => el.localName === this.constructor.childElementName && !el.slot\n      );\n      this.#childElements.forEach(item => customElements.upgrade(item));\n    }\n    return this.#childElements;\n  }\n\n  constructor() {\n    super();\n    this.type = \"radio\";\n    this.disabled = false;\n    this.addEventListener(\"blur\", e => this.handleBlur(e), true);\n    this.addEventListener(\"keydown\", e => this.handleKeydown(e));\n  }\n\n  firstUpdated() {\n    this.syncStateToChildElements();\n  }\n\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await Promise.all(this.childElements.map(item => item.updateComplete));\n  }\n\n  syncStateToChildElements() {\n    this.childElements.forEach((item, index) => {\n      item.position = index;\n\n      if (item.checked && this.value == undefined) {\n        this.value = item.value;\n      }\n\n      if (this.value == item.value && !item.disabled) {\n        this.#checkedIndex = item.position;\n      }\n\n      item.name = this.name;\n    });\n    this.syncFocusState();\n  }\n\n  syncFocusState() {\n    let focusableIndex = this.focusableIndex;\n    this.childElements.forEach((item, index) => {\n      item.itemTabIndex = focusableIndex === index ? 0 : -1;\n    });\n  }\n\n  handleBlur(event) {\n    if (this.contains(event.relatedTarget)) {\n      return;\n    }\n    this.focusedIndex = undefined;\n  }\n\n  // NB: We may need to revise this to avoid bugs when we add more focusable\n  // elements to select control base/items.\n  handleKeydown(event) {\n    let directions = this.getNavigationDirections();\n    switch (event.key) {\n      case \"Down\":\n      case \"ArrowDown\":\n      case directions.FORWARD:\n      case `Arrow${directions.FORWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_FORWARD);\n        break;\n      }\n      case \"Up\":\n      case \"ArrowUp\":\n      case directions.BACKWARD:\n      case `Arrow${directions.BACKWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_BACKWARD);\n        break;\n      }\n    }\n  }\n\n  getNavigationDirections() {\n    if (this.isDocumentRTL) {\n      return NAVIGATION_DIRECTIONS.RTL;\n    }\n    return NAVIGATION_DIRECTIONS.LTR;\n  }\n\n  get isDocumentRTL() {\n    if (typeof Services !== \"undefined\") {\n      return Services.locale.isAppLocaleRTL;\n    }\n    return document.dir === \"rtl\";\n  }\n\n  navigate(direction) {\n    let currentIndex = this.focusableIndex;\n    let children = this.childElements;\n    let step = NAVIGATION_VALUE[direction];\n    let isRadio = this.type == \"radio\";\n\n    for (let i = 1; i < children.length; i++) {\n      // Support focus wrapping for type=\"radio\" only.\n      let nextIndex = isRadio\n        ? (currentIndex + children.length + step * i) % children.length\n        : currentIndex + step * i;\n\n      let nextItem = children[nextIndex];\n\n      if (nextItem && !nextItem.disabled) {\n        if (isRadio) {\n          this.value = nextItem.value;\n          this.dispatchEvent(\n            new Event(\"input\", {\n              bubbles: true,\n              composed: true,\n            })\n          );\n          this.dispatchEvent(new Event(\"change\", { bubbles: true }));\n        }\n        nextItem.focus();\n        return;\n      }\n    }\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"name\")) {\n      this.handleSetName();\n    }\n    if (changedProperties.has(\"disabled\")) {\n      this.childElements.forEach(item => {\n        item.requestUpdate();\n      });\n    }\n    if (changedProperties.has(\"type\")) {\n      let childRole = this.type == \"radio\" ? \"radio\" : \"option\";\n      this.childElements.forEach(item => {\n        item.role = childRole;\n      });\n    }\n  }\n\n  handleSetName() {\n    this.childElements.forEach(item => {\n      item.name = this.name;\n    });\n  }\n\n  // Re-dispatch change event so it's re-targeted to the custom element.\n  handleChange(event) {\n    event.stopPropagation();\n    this.dispatchEvent(new Event(event.type, event));\n  }\n\n  handleSlotChange() {\n    this.#childElements = null;\n    this.#focusedIndex = undefined;\n    this.#checkedIndex = undefined;\n    this.syncStateToChildElements();\n  }\n\n  render() {\n    return html`\n      <moz-fieldset\n        part=\"fieldset\"\n        description=${ifDefined(this.description)}\n        support-page=${ifDefined(this.supportPage)}\n        role=${this.type == \"radio\" ? \"radiogroup\" : \"listbox\"}\n        ?disabled=${this.disabled}\n        label=${this.label}\n        exportparts=\"inputs, support-link\"\n        aria-orientation=${ifDefined(this.constructor.orientation)}\n      >\n        ${!this.supportPage\n          ? html`<slot slot=\"support-link\" name=\"support-link\"></slot>`\n          : \"\"}\n        <slot\n          @slotchange=${this.handleSlotChange}\n          @change=${this.handleChange}\n        ></slot>\n      </moz-fieldset>\n    `;\n  }\n}\n\n/**\n * Class that can be extended by items nested in a subclass of\n * SelectControlBaseElement to handle selection, focus management, and keyboard\n * navigation. Implemented as a mixin to enable use with elements that inherit\n * from something other than MozLitElement.\n *\n * @param {LitElement} superClass\n * @returns LitElement\n */\nexport const SelectControlItemMixin = superClass =>\n  class extends superClass {\n    #controller;\n\n    static properties = {\n      name: { type: String },\n      value: { type: String },\n      disabled: { type: Boolean, reflect: true },\n      checked: { type: Boolean, reflect: true },\n      itemTabIndex: { type: Number, state: true },\n      role: { type: String, state: true },\n      position: { type: Number, state: true },\n    };\n\n    get controller() {\n      return this.#controller;\n    }\n\n    get isDisabled() {\n      return this.disabled || this.#controller.disabled;\n    }\n\n    constructor() {\n      super();\n      this.checked = false;\n      this.addEventListener(\"focus\", () => {\n        if (!this.disabled) {\n          this.controller.focusedIndex = this.position;\n        }\n      });\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      let hostElement = this.parentElement || this.getRootNode().host;\n      if (!(hostElement instanceof SelectControlBaseElement)) {\n        console.error(\n          `${this.localName} should only be used in an element that extends SelectControlBaseElement.`\n        );\n      }\n\n      this.#controller = hostElement;\n      this.role = this.#controller.type == \"radio\" ? \"radio\" : \"option\";\n      if (this.#controller.hasValue) {\n        this.checked = this.value === this.#controller.value;\n      }\n    }\n\n    willUpdate(changedProperties) {\n      super.willUpdate(changedProperties);\n      // Handle setting checked directly via JS.\n      if (\n        changedProperties.has(\"checked\") &&\n        this.checked &&\n        this.#controller.hasValue &&\n        this.value !== this.#controller.value\n      ) {\n        this.#controller.value = this.value;\n      }\n      // Handle un-checking directly via JS. If the checked item is un-checked,\n      // the value of the associated focus manager parent needs to be un-set.\n      if (\n        changedProperties.has(\"checked\") &&\n        !this.checked &&\n        this.#controller.hasValue &&\n        this.value === this.#controller.value\n      ) {\n        this.#controller.value = \"\";\n      }\n\n      if (changedProperties.has(\"disabled\")) {\n        // Prevent enabling a items if containing focus manager is disabled.\n        if (this.disabled === false && this.#controller.disabled) {\n          this.disabled = true;\n          return;\n        }\n\n        // Update items via focus manager parent for proper keyboard nav behavior.\n        if (this.checked || !this.#controller.hasValue) {\n          if (this.controller.checkedIndex != this.position) {\n            this.#controller.syncFocusState();\n          } else {\n            // If the newly disabled element was checked unset the checkedIndex\n            // to recompute which element should be focusable.\n            this.controller.checkedIndex = undefined;\n          }\n        }\n      }\n    }\n\n    handleClick() {\n      if (this.isDisabled || this.checked) {\n        return;\n      }\n\n      this.#controller.value = this.value;\n      if (this.getRootNode().activeElement?.localName == this.localName) {\n        this.focus();\n      }\n    }\n\n    // Re-dispatch change event so it propagates out of the element.\n    handleChange(e) {\n      this.dispatchEvent(new Event(e.type, e));\n    }\n  };\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"./moz-fieldset.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"../moz-toggle/moz-toggle.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"../moz-button/moz-button.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"../moz-radio-group/moz-radio-group.mjs\";\n\nexport default {\n  title: \"UI Widgets/Fieldset\",\n  component: \"moz-fieldset\",\n  argTypes: {\n    headingLevel: {\n      options: [\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n      control: { type: \"select\" },\n    },\n    l10nId: {\n      options: [\"moz-fieldset-label\", \"moz-fieldset-description\"],\n      control: { type: \"select\" },\n    },\n    iconSrc: {\n      options: [\n        \"\",\n        \"chrome://global/skin/icons/info.svg\",\n        \"chrome://global/skin/icons/highlights.svg\",\n        \"chrome://global/skin/icons/warning.svg\",\n        \"chrome://global/skin/icons/heart.svg\",\n        \"chrome://global/skin/icons/edit.svg\",\n      ],\n      control: { type: \"select\" },\n    },\n  },\n  parameters: {\n    status: \"in-development\",\n    fluent: `\nmoz-fieldset-label =\n  .label = Related Settings\nmoz-fieldset-description =\n  .label = Some Settings\n  .description = Perhaps you want to have a longer description of what these settings do. Width is set explicitly for emphasis.\n  `,\n  },\n};\n\nconst Template = ({\n  label,\n  description,\n  l10nId,\n  supportPage,\n  hasSlottedSupportLinks,\n  headingLevel,\n  disabled,\n  iconSrc,\n}) => html`\n  <moz-fieldset\n    data-l10n-id=${l10nId}\n    .label=${label}\n    .description=${description}\n    .headingLevel=${headingLevel}\n    .disabled=${disabled}\n    support-page=${supportPage}\n    style=\"width: 400px;\"\n    iconsrc=${ifDefined(iconSrc)}\n  >\n    <moz-toggle\n      pressed\n      label=\"First setting\"\n      description=\"These could have descriptions too.\"\n    ></moz-toggle>\n    <moz-checkbox label=\"Second setting\"></moz-checkbox>\n    <moz-checkbox\n      label=\"Third setting\"\n      description=\"Checkbox with a description.\"\n      support-page=\"foo\"\n    ></moz-checkbox>\n    <moz-select label=\"Make a choice\">\n      <moz-option label=\"Option One\" value=\"1\"></moz-option>\n      <moz-option label=\"Option A\" value=\"a\"></moz-option>\n    </moz-select>\n    <moz-radio-group label=\"Radio group setting\">\n      <moz-radio label=\"Option 1\" value=\"1\"></moz-radio>\n      <moz-radio label=\"Option 2\" value=\"2\"></moz-radio>\n      <moz-radio label=\"Option 3\" value=\"3\"></moz-radio>\n    </moz-radio-group>\n    <moz-button label=\"Button\"></moz-button>\n    ${hasSlottedSupportLinks\n      ? html`<a slot=\"support-link\" href=\"www.example.com\"> Click me! </a>`\n      : \"\"}\n  </moz-fieldset>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  label: \"\",\n  description: \"\",\n  supportPage: \"\",\n  l10nId: \"moz-fieldset-label\",\n  hasSlottedSupportLinks: false,\n  disabled: false,\n  iconSrc: \"\",\n};\n\nexport const WithDescription = Template.bind({});\nWithDescription.args = {\n  ...Default.args,\n  l10nId: \"moz-fieldset-description\",\n};\n\nexport const WithSupportLink = Template.bind({});\nWithSupportLink.args = {\n  ...Default.args,\n  supportPage: \"test\",\n};\n\nexport const WithDescriptionAndSupportLink = Template.bind({});\nWithDescriptionAndSupportLink.args = {\n  ...WithSupportLink.args,\n  l10nId: \"moz-fieldset-description\",\n};\n\nexport const WithSlottedSupportLink = Template.bind({});\nWithSlottedSupportLink.args = {\n  ...Default.args,\n  hasSlottedSupportLinks: true,\n};\n\nexport const WithDescriptionAndSlottedSupportLink = Template.bind({});\nWithDescriptionAndSlottedSupportLink.args = {\n  ...WithDescription.args,\n  hasSlottedSupportLinks: true,\n};\n\nexport const WithHeadingLegend = Template.bind({});\nWithHeadingLegend.args = {\n  ...WithDescription.args,\n  headingLevel: \"2\",\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  ...WithDescription.args,\n  disabled: true,\n};\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = {\n  ...WithSupportLink.args,\n  iconSrc: \"chrome://global/skin/icons/info.svg\",\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport {\n  SelectControlBaseElement,\n  SelectControlItemMixin,\n} from \"../lit-select-control.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n/**\n * Element used to group and associate moz-radio buttons so that they function\n * as a single form-control element.\n *\n * @tagname moz-radio-group\n * @property {boolean} disabled - Whether or not the fieldset is disabled.\n * @property {string} label - Label for the group of moz-radio elements.\n * @property {string} description - Description for the group of moz-radio elements.\n * @property {string} supportPage - Support page for the group of moz-radio elements.\n * @property {string} name\n *  Input name of the radio group. Propagates to moz-radio children.\n * @property {string} value\n *  Selected value for the group. Changing the value updates the checked\n *  state of moz-radio children and vice versa.\n * @slot default - The radio group's content, intended for moz-radio elements.\n * @slot support-link - The radio group's support link intended for moz-radio elements.\n */\nexport class MozRadioGroup extends SelectControlBaseElement {\n  static childElementName = \"moz-radio\";\n  static orientation = \"vertical\";\n\n  static properties = {\n    parentDisabled: { type: Boolean, state: true },\n  };\n}\ncustomElements.define(\"moz-radio-group\", MozRadioGroup);\n\n/**\n * Input element that allows a user to select one option from a group of options.\n *\n * @tagname moz-radio\n * @property {boolean} checked - Whether or not the input is selected.\n * @property {string} description - Description for the input.\n * @property {boolean} disabled - Whether or not the input is disabled.\n * @property {string} iconSrc - Path to an icon displayed next to the input.\n * @property {number} itemTabIndex - Tabindex of the input element.\n * @property {string} label - Label for the radio input.\n * @property {string} name\n *  Name of the input control, set by the associated moz-radio-group element.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} value - Value of the radio input.\n */\nexport class MozRadio extends SelectControlItemMixin(MozBaseInputElement) {\n  static activatedProperty = \"checked\";\n\n  get isDisabled() {\n    return (\n      super.isDisabled || this.parentDisabled || this.controller.parentDisabled\n    );\n  }\n\n  inputTemplate() {\n    return html`<input\n      type=\"radio\"\n      id=\"input\"\n      value=${this.value}\n      name=${this.name}\n      .checked=${this.checked}\n      aria-checked=${this.checked}\n      aria-describedby=\"description\"\n      tabindex=${this.itemTabIndex}\n      ?disabled=${this.isDisabled}\n      accesskey=${ifDefined(this.accessKey)}\n      aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n      @click=${this.handleClick}\n      @change=${this.handleChange}\n    />`;\n  }\n}\ncustomElements.define(\"moz-radio\", MozRadio);\n"],"names":[],"sourceRoot":""}