{"version":3,"file":"moz-toggle-README-stories-md.4d7ceaec.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzPA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/UA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-toggle/README.stories.md","webpack:///../../../toolkit/content/widgets/moz-toggle/moz-toggle.mjs","webpack:///./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack:///./node_modules/@mdx-js/react/index.js","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs","webpack:///./node_modules/react/jsx-runtime.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/firefox-desktop-components/firefox-desktop-components/gecko/browser/components/storybook/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Canvas, ArgTypes } from \"@storybook/addon-docs\";\nimport \"toolkit-widgets/moz-toggle/moz-toggle.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"UI Widgets/ Toggle/README\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        },\n        viewMode: \"docs\"\n      }\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n      id: \"moztoggle\",\n      children: \"MozToggle\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-toggle\"\n      }), \" is a toggle element that can be used to switch between two states.\\nIt may be helpful to think of it as a button that can be pressed or unpressed,\\ncorresponding with \\\"on\\\" and \\\"off\\\" states.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-toggle pressed label=\\\"Toggle label\\\" description=\\\"This is a demo toggle for the docs.\\\" /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-toggle\", {\n          pressed: true,\n          label: \"Toggle label\",\n          description: \"This is a demo toggle for the docs.\"\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"when-to-use\",\n      children: \"When to use\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Use a toggle for binary controls like on/off or enabled/disabled.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Use when the action is performed immediately and doesn't require confirmation\\nor form submission.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"A toggle is like a switch. If it would be appropriate to use a switch in the\\nphysical world for this action, it is likely appropriate to use a toggle in\\nsoftware.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"when-not-to-use\",\n      children: \"When not to use\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"If another action is required to execute the choice, use a checkbox (i.e. a\\ntoggle should not generally be used as part of a form).\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"code\",\n      children: \"Code\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The source for \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-toggle\"\n      }), \" can be found under\\n\", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/content/widgets/moz-toggle/moz-toggle.mjs\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"toolkit/content/widgets/moz-toggle\"\n      }), \".\\nYou can find an examples of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-toggle\"\n      }), \" in use in the Firefox codebase in both\\n\", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/browser/components/preferences/privacy.inc.xhtml#696\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"about:preferences\"\n      }), \"\\nand \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/mozapps/extensions/content/aboutaddons.html#182\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"about:addons\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-toggle\"\n      }), \" can be imported into \", /*#__PURE__*/_jsx(_components.code, {\n        children: \".html\"\n      }), \"/\", /*#__PURE__*/_jsx(_components.code, {\n        children: \".xhtml\"\n      }), \" files:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<script type=\\\"module\\\" src=\\\"chrome://global/content/elements/moz-toggle.mjs\\\"></script>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"And used as follows:\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-toggle pressed\\n            label=\\\"Label for the toggle\\\"\\n            description=\\\"Longer explanation of what the toggle is for\\\"\\n            aria-label=\\\"Toggle label if label text isn't visible\\\"></moz-toggle>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"fluent-usage\",\n      children: \"Fluent usage\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Generally the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"label\"\n      }), \", \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"description\"\n      }), \", and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" properties of\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-toggle\"\n      }), \" will be provided via \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://mozilla-l10n.github.io/localizer-documentation/tools/fluent/basic_syntax.html#attributes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Fluent attributes\"\n      }), \".\\nTo get this working you will need to specify a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-id\"\n      }), \" as well as\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-attrs\"\n      }), \" if you're providing a label and a description:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-toggle data-l10n-id=\\\"with-label-and-description\\\"\\n            data-l10n-attrs=\\\"label, description\\\"></moz-toggle>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"In which case your Fluent messages will look something like this:\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        children: \"with-label-and-description =\\n  .label = Label text goes here\\n  .description = Description text goes here\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"You do not have to specify \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-attrs\"\n      }), \" if you're only using an \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"aria-label\"\n      }), \":\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-toggle data-l10n-id=\\\"with-aria-label-only\\\"></moz-toggle>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        children: \"with-aria-label-only =\\n  .aria-label = aria-label text goes here\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"nested-fields\",\n      children: \"Nested fields\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-toggle\"\n      }), \" supports nested or dependent fields via a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"nested\"\n      }), \" named slot.\\nThese fields will be rendered below the toggle element, and will be indented to\\nvisually indicate dependence. Any nested fields will mirror the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state\\nof the toggle and will also become \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" whenever the toggle is not \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"pressed\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"When nesting fields it's important to wrap the elements in a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-fieldset\"\n      }), \" to\\nindicate to assistive technologies that the fields are related, and to provide a\\nlabel for the group of controls:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-fieldset label=\\\"Label for the group\\\">\\n  <moz-toggle label=\\\"Parent toggle\\\" pressed>\\n    <moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox one\\\" value=\\\"one\\\"></moz-checkbox>\\n    <moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox two\\\" value=\\\"two\\\" checked></moz-checkbox>\\n  </moz-toggle>\\n</moz-fieldset>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-fieldset label=\\\"Label for the group\\\"><moz-toggle label=\\\"Parent toggle\\\" pressed><moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox one\\\" value=\\\"one\\\" /><moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox two\\\" value=\\\"two\\\" checked /></moz-toggle></moz-fieldset></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-fieldset\", {\n          label: \"Label for the group\",\n          children: /*#__PURE__*/_jsxs(\"moz-toggle\", {\n            label: \"Parent toggle\",\n            pressed: true,\n            children: [/*#__PURE__*/_jsx(\"moz-checkbox\", {\n              slot: \"nested\",\n              label: \"Nested checkbox one\",\n              value: \"one\"\n            }), /*#__PURE__*/_jsx(\"moz-checkbox\", {\n              slot: \"nested\",\n              label: \"Nested checkbox two\",\n              value: \"two\",\n              checked: true\n            })]\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"args-table\",\n      children: \"Args Table\"\n    }), \"\\n\", /*#__PURE__*/_jsx(ArgTypes, {\n      of: \"moz-toggle\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'UI Widgets/ Toggle/README',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    },\n    viewMode: \"docs\"\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","import __chrome_styles_loader__moztoggleStyles from \"toolkit/content/widgets/moz-toggle/moz-toggle.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at htp://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * A simple toggle element that can be used to switch between two states.\n *\n * @tagname moz-toggle\n * @property {boolean} pressed - Whether or not the element is pressed.\n * @property {boolean} disabled - Whether or not the element is disabled.\n * @property {string} label - The label text.\n * @property {string} description - The description text.\n * @property {string} ariaLabel - The aria-label text when there is no visible label.\n * @property {string} ariaDescription - The aria-description text when there is no visible description.\n * @slot support-link - Used to append a moz-support-link to the description.\n * @fires toggle\n *  Custom event indicating that the toggle's pressed state has changed.\n */\nexport default class MozToggle extends MozBaseInputElement {\n  static properties = {\n    pressed: { type: Boolean, reflect: true },\n  };\n\n  static activatedProperty = \"pressed\";\n\n  get buttonEl() {\n    return this.inputEl;\n  }\n\n  constructor() {\n    super();\n    this.pressed = false;\n  }\n\n  handleClick() {\n    this.pressed = !this.pressed;\n    this.dispatchOnUpdateComplete(\n      new CustomEvent(\"toggle\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  inputTemplate() {\n    const { pressed, disabled, ariaLabel, handleClick } = this;\n    return html`<button\n      id=\"input\"\n      part=\"button\"\n      type=\"button\"\n      class=\"toggle-button\"\n      name=${this.name}\n      value=${this.value}\n      ?disabled=${disabled}\n      aria-pressed=${pressed}\n      aria-label=${ifDefined(ariaLabel ?? undefined)}\n      aria-describedby=\"description\"\n      aria-description=${ifDefined(\n        this.hasDescription ? undefined : this.ariaDescription\n      )}\n      accesskey=${ifDefined(this.accessKey)}\n      @click=${handleClick}\n    ></button>`;\n  }\n\n  inputStylesTemplate() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__moztoggleStyles}\"\n    />`;\n  }\n}\ncustomElements.define(\"moz-toggle\", MozToggle);\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","export {\n  MDXContext,\n  MDXProvider,\n  useMDXComponents,\n  withMDXComponents\n} from './lib/index.js'\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          this.#insertSeparator =\n            Services.locale.insertSeparatorBeforeAccesskeys;\n          this.#alwaysAppendAccessKey = Services.locale.alwaysAppendAccesskeys;\n        } catch {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  #startMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.observe(this, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  #stopMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.disconnect();\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.#lastFormattedAccessKey = null;\n        this.formatAccessKey();\n      });\n      this.#startMutationObserver();\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#stopMutationObserver();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#stopMutationObserver();\n    try {\n      this.#formatAccessKey(accessKey);\n    } finally {\n      queueMicrotask(() => this.#startMutationObserver());\n    }\n  }\n\n  #formatAccessKey(accessKey) {\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","export * from '@mdx-js/react';\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":[],"sourceRoot":""}