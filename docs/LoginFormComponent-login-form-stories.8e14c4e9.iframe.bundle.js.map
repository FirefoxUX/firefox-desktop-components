{"version":3,"file":"LoginFormComponent-login-form-stories.8e14c4e9.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AC3FA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AC9IA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA","sources":["webpack://browser-storybook/../aboutlogins/content/components/input-field/input-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/login-origin-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/login-password-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/input-field/login-username-field.mjs","webpack://browser-storybook/../aboutlogins/content/components/login-message-popup.mjs","webpack://browser-storybook/../../../toolkit/components/satchel/megalist/content/LoginFormComponent/login-form.mjs","webpack://browser-storybook/../../../toolkit/components/satchel/megalist/content/LoginFormComponent/login-form.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__inputfieldStyles from \"browser/components/aboutlogins/content/components/input-field/input-field.css\";\nimport __chrome_styles_loader__commonStyles from \"toolkit/themes/linux/global/in-content/common.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\n\nexport const stylesTemplate = () =>\n  html`\n    <link rel=\"stylesheet\" href=\"${__chrome_styles_loader__commonStyles}\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__inputfieldStyles}\"\n    />\n  `;\n\nexport const editableFieldTemplate = ({\n  type,\n  value,\n  disabled,\n  required,\n  onFocus,\n  onBlur,\n  labelL10nId,\n  noteL10nId,\n}) =>\n  html`\n    <label for=\"input\" class=\"field-label\" data-l10n-id=${labelL10nId}> </label>\n    <input\n      id=\"input\"\n      class=\"input-field\"\n      type=${type}\n      value=${value}\n      aria-describedby=\"explainer\"\n      ?disabled=${disabled}\n      ?required=${required}\n      @focus=${onFocus}\n      @blur=${onBlur}\n    />\n    <span\n      id=\"explainer\"\n      role=\"note\"\n      class=\"explainer text-deemphasized\"\n      data-l10n-id=${ifDefined(noteL10nId)}\n    ></span>\n  `;\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginOriginField extends MozLitElement {\n  static properties = {\n    value: { type: String, reflect: true },\n    name: { type: String },\n    readonly: { type: Boolean, reflect: true },\n    required: { type: Boolean, reflect: true },\n  };\n\n  static formAssociated = true;\n\n  static queries = {\n    input: \"input\",\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.internals.setFormValue(this.value);\n    this.addEventListener(\"input\", e => {\n      this.internals.setFormValue(e.composedTarget.value);\n    });\n  }\n\n  addHTTPSPrefix(e) {\n    const input = e.composedTarget;\n    let originValue = input.value.trim();\n    if (!originValue) {\n      return;\n    }\n\n    if (!originValue.match(/:\\/\\//)) {\n      input.value = \"https://\" + originValue;\n      input.dispatchEvent(\n        new InputEvent(\"input\", {\n          composed: true,\n          bubbles: true,\n        })\n      );\n    }\n  }\n\n  get readonlyTemplate() {\n    return html`\n      <label\n        for=\"origin\"\n        class=\"field-label\"\n        data-l10n-id=\"login-item-origin-label\"\n      >\n      </label>\n      <a\n        id=\"origin\"\n        class=\"origin-input\"\n        dir=\"auto\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        name=\"origin\"\n        href=${this.value}\n      >\n        ${this.value}\n      </a>\n    `;\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${this.readonly\n        ? this.readonlyTemplate\n        : editableFieldTemplate({\n            type: \"url\",\n            value: this.value,\n            required: this.required,\n            labelL10nId: \"login-item-origin-label\",\n            noteL10nId: \"passwords-origin-tooltip\",\n            onBlur: e => this.addHTTPSPrefix(e),\n          })}\n    `;\n  }\n}\n\ncustomElements.define(\"login-origin-field\", LoginOriginField);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginPasswordField extends MozLitElement {\n  static CONCEALED_PASSWORD_TEXT = \" \".repeat(8);\n\n  static properties = {\n    _value: { type: String, state: true },\n    name: { type: String },\n    readonly: { type: Boolean, reflect: true },\n    visible: { type: Boolean, reflect: true },\n    required: { type: Boolean, reflect: true },\n  };\n\n  static queries = {\n    input: \"input\",\n    button: \"button\",\n  };\n\n  static formAssociated = true;\n\n  constructor() {\n    super();\n    this._value = \"\";\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.internals.setFormValue(this._value);\n    this.addEventListener(\"input\", e => {\n      this.internals.setFormValue(e.composedTarget.value);\n    });\n  }\n\n  set value(newValue) {\n    this._value = newValue;\n  }\n\n  get #type() {\n    return this.visible ? \"text\" : \"password\";\n  }\n\n  get #password() {\n    return this.readonly && !this.visible\n      ? LoginPasswordField.CONCEALED_PASSWORD_TEXT\n      : this._value;\n  }\n\n  #revealIconSrc(concealed) {\n    return concealed\n      ? \"chrome://browser/content/aboutlogins/icons/password-hide.svg\"\n      : \"chrome://browser/content/aboutlogins/icons/password.svg\";\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${editableFieldTemplate({\n        type: this.#type,\n        value: this.#password,\n        labelId: \"login-item-password-label\",\n        disabled: this.readonly,\n        required: this.required,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        labelL10nId: \"login-item-password-label\",\n        noteL10nId: \"passwords-password-tooltip\",\n      })}\n      <moz-button\n        data-l10n-id=${this.visible\n          ? \"login-item-password-conceal-checkbox\"\n          : \"login-item-password-reveal-checkbox\"}\n        class=\"reveal-password-button\"\n        type=\"icon ghost\"\n        iconSrc=${this.#revealIconSrc(this.visible)}\n        @click=${this.toggleVisibility}\n      ></moz-button>\n    `;\n  }\n\n  handleFocus(ev) {\n    if (ev.relatedTarget !== this.button) {\n      this.visible = true;\n    }\n  }\n\n  handleBlur(ev) {\n    if (ev.relatedTarget !== this.button) {\n      this.visible = false;\n    }\n  }\n\n  toggleVisibility() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.onPasswordVisible?.();\n    }\n  }\n}\n\ncustomElements.define(\"login-password-field\", LoginPasswordField);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginUsernameField extends MozLitElement {\n  static properties = {\n    value: { type: String, reflect: true },\n    name: { type: String },\n    readonly: { type: Boolean, reflect: true },\n    required: { type: Boolean, reflect: true },\n  };\n\n  static formAssociated = true;\n\n  static queries = {\n    input: \"input\",\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.internals.setFormValue(this.value);\n    this.addEventListener(\"input\", e => {\n      this.internals.setFormValue(e.composedTarget.value);\n    });\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${editableFieldTemplate({\n        type: \"text\",\n        value: this.value,\n        disabled: this.readonly,\n        required: this.required,\n        labelL10nId: \"login-item-username-label\",\n        noteL10nId: \"passwords-username-tooltip\",\n      })}\n    `;\n  }\n}\n\ncustomElements.define(\"login-username-field\", LoginUsernameField);\n","import __chrome_styles_loader__loginmessagepopupStyles from \"browser/components/aboutlogins/content/components/login-message-popup.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nconst stylesTemplate = () => html` <link\n  rel=\"stylesheet\"\n  href=\"${__chrome_styles_loader__loginmessagepopupStyles}\"\n/>`;\n\nexport const MessagePopup = ({ l10nid, message, webTitle = \"\" }) => {\n  return html` <div class=\"tooltip-container\">\n    <div class=\"arrow-box\">\n      <p\n        class=\"tooltip-message\"\n        data-l10n-id=${ifDefined(l10nid)}\n        data-l10n-args=${JSON.stringify({ webTitle })}\n      >\n        ${ifDefined(message)}\n      </p>\n    </div>\n  </div>`;\n};\n\nexport class PasswordWarning extends MozLitElement {\n  static get properties() {\n    return {\n      isNewLogin: { type: Boolean, reflect: true },\n      webTitle: { type: String, reflect: true },\n      arrowDirection: { type: String },\n      message: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.isNewLogin = false;\n    this.arrowDirection = \"left\";\n  }\n  render() {\n    if (this.message) {\n      return html`${stylesTemplate()}\n      ${MessagePopup({\n        message: this.message,\n      })}`;\n    }\n\n    return this.isNewLogin\n      ? html`${stylesTemplate()}\n        ${MessagePopup({\n          l10nid: \"about-logins-add-password-tooltip\",\n        })}`\n      : html`${stylesTemplate()}\n        ${MessagePopup({\n          l10nid: \"about-logins-edit-password-tooltip\",\n          webTitle: this.webTitle,\n        })}`;\n  }\n}\n\nexport class OriginWarning extends MozLitElement {\n  static get properties() {\n    return {\n      l10nId: { type: String },\n      message: { type: String },\n      arrowDirection: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.arrowDirection = \"left\";\n  }\n\n  render() {\n    return html`${stylesTemplate()}\n    ${MessagePopup({ l10nid: this.l10nId, message: this.message })}`;\n  }\n}\n\ncustomElements.define(\"password-warning\", PasswordWarning);\ncustomElements.define(\"origin-warning\", OriginWarning);\n","import __chrome_styles_loader__loginformStyles from \"toolkit/components/satchel/megalist/content/LoginFormComponent/login-form.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, when } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/input-field/login-origin-field.mjs\";\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/input-field/login-username-field.mjs\";\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/input-field/login-password-field.mjs\";\n\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/login-message-popup.mjs\";\n\nexport class LoginForm extends MozLitElement {\n  static properties = {\n    type: { type: String, reflect: true },\n    onSaveClick: { type: Function },\n    onCancelClick: { type: Function },\n  };\n\n  static queries = {\n    formEl: \"form\",\n    originField: \"login-origin-field\",\n    passwordField: \"login-password-field\",\n    originWarning: \"origin-warning\",\n    passwordWarning: \"password-warning\",\n  };\n\n  #removeWarning(warning) {\n    if (warning.classList.contains(\"invalid-input\")) {\n      warning.classList.remove(\"invalid-input\");\n    }\n  }\n\n  #shouldShowWarning(input, warning) {\n    if (!input.checkValidity()) {\n      warning.setAttribute(\"message\", input.validationMessage);\n      warning.classList.add(\"invalid-input\");\n      return true;\n    }\n    this.#removeWarning(warning);\n    return false;\n  }\n\n  onInput(e) {\n    const field = e.target;\n    const warning =\n      field.name === \"origin\" ? this.originWarning : this.passwordWarning;\n\n    if (field.input.checkValidity()) {\n      this.#removeWarning(warning);\n    }\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (this.#shouldShowWarning(this.originField.input, this.originWarning)) {\n      return;\n    }\n\n    if (\n      this.#shouldShowWarning(this.passwordField.input, this.passwordWarning)\n    ) {\n      return;\n    }\n\n    this.onSaveClick(new FormData(e.target));\n  }\n\n  render() {\n    const heading =\n      this.type !== \"edit\" ? \"passwords-create-label\" : \"passwords-edit-label\";\n\n    return html`<link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__loginformStyles}\"\n      />\n      <moz-card>\n        ${when(\n          this.type === \"edit\",\n          () => html`\n            <div class=\"delete-login-button-container\">\n              <moz-button\n                class=\"delete-login-button\"\n                type=\"icon\"\n                iconSrc=\"chrome://global/skin/icons/delete.svg\"\n              ></moz-button>\n            </div>\n          `\n        )}\n\n        <form\n          role=\"region\"\n          aria-label=${heading}\n          @submit=${e => this.onSubmit(e)}\n        >\n          <moz-fieldset data-l10n-id=${heading}>\n            <div class=\"field-container\">\n              <login-origin-field\n                name=\"origin\"\n                required\n                @input=${e => this.onInput(e)}\n              >\n              </login-origin-field>\n              <origin-warning arrowdirection=\"down\"></origin-warning>\n            </div>\n            <login-username-field name=\"username\"></login-username-field>\n            <div class=\"field-container\">\n              <login-password-field\n                name=\"password\"\n                required\n                @input=${e => this.onInput(e)}\n              ></login-password-field>\n              <password-warning\n                isNewLogin\n                arrowdirection=\"down\"\n              ></password-warning>\n            </div>\n            <moz-button-group>\n              <moz-button\n                data-l10n-id=\"login-item-cancel-button\"\n                @click=${this.onCancelClick}\n              ></moz-button>\n              <moz-button\n                data-l10n-id=\"login-item-save-new-button\"\n                type=\"primary\"\n                @click=${() => this.formEl.requestSubmit()}\n              >\n              </moz-button>\n            </moz-button-group>\n          </moz-fieldset>\n        </form>\n      </moz-card>`;\n  }\n}\n\ncustomElements.define(\"login-form\", LoginForm);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\nimport \"./login-form.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Credential Management/Login Form\",\n  component: \"login-form\",\n};\n\nwindow.MozXULElement.insertFTLIfNeeded(\"preview/megalist.ftl\");\n\nexport const AddLoginForm = () => html`<login-form type=\"add\"></login-form>`;\nexport const EditLoginForm = () => html`<login-form type=\"edit\"></login-form>`;\n"],"names":[],"sourceRoot":""}