{"version":3,"file":"backup-settings-stories.534787f2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AC5hBA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AClvHA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AChOA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC7PA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACzsources":["webpack://browser-storybook/../backup/content/backup-settings.mjs","webpack://browser-storybook/../backup/content/backup-settings.stories.mjs","webpack://browser-storybook/../backup/content/disable-backup-encryption.mjs","webpack://browser-storybook/../backup/content/enable-backup-encryption.mjs","webpack://browser-storybook/../backup/content/password-rules-tooltip.mjs","webpack://browser-storybook/../backup/content/password-validation-inputs.mjs","webpack://browser-storybook/../backup/content/restore-from-backup.mjs","webpack://browser-storybook/../backup/content/turn-off-scheduled-backups.mjs","webpack://browser-storybook/../backup/content/turn-on-scheduled-backups.mjs"],"sourcesContent":["import __chrome_styles_loader__backupsettingsStyles from \"browser/components/backup/content/backup-settings.css\";\nimport __chrome_styles_loader__preferencesStyles from \"browser/themes/shared/preferences/preferences.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/turn-on-scheduled-backups.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/turn-off-scheduled-backups.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/restore-from-backup.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/enable-backup-encryption.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/disable-backup-encryption.mjs\";\n\n/**\n * The widget for managing the BackupService that is embedded within the main\n * document of about:settings / about:preferences.\n */\nexport default class BackupSettings extends MozLitElement {\n  #placeholderIconURL = \"chrome://global/skin/icons/page-portrait.svg\";\n\n  static properties = {\n    backupServiceState: { type: Object },\n    recoveryErrorCode: { type: Number },\n    recoveryInProgress: { type: Boolean },\n    _enableEncryptionTypeAttr: { type: String },\n  };\n\n  static get queries() {\n    return {\n      scheduledBackupsButtonEl: \"#backup-toggle-scheduled-button\",\n      changePasswordButtonEl: \"#backup-change-password-button\",\n      disableBackupEncryptionEl: \"disable-backup-encryption\",\n      disableBackupEncryptionDialogEl: \"#disable-backup-encryption-dialog\",\n      enableBackupEncryptionEl: \"enable-backup-encryption\",\n      enableBackupEncryptionDialogEl: \"#enable-backup-encryption-dialog\",\n      turnOnScheduledBackupsDialogEl: \"#turn-on-scheduled-backups-dialog\",\n      turnOnScheduledBackupsEl: \"turn-on-scheduled-backups\",\n      turnOffScheduledBackupsEl: \"turn-off-scheduled-backups\",\n      turnOffScheduledBackupsDialogEl: \"#turn-off-scheduled-backups-dialog\",\n      restoreFromBackupEl: \"restore-from-backup\",\n      restoreFromBackupButtonEl: \"#backup-toggle-restore-button\",\n      restoreFromBackupDescriptionEl: \"#backup-restore-description\",\n      restoreFromBackupDialogEl: \"#restore-from-backup-dialog\",\n      sensitiveDataCheckboxInputEl: \"#backup-sensitive-data-checkbox-input\",\n      passwordControlsEl: \"#backup-password-controls\",\n      lastBackupLocationInputEl: \"#last-backup-location\",\n      lastBackupFileNameEl: \"#last-backup-filename\",\n      lastBackupDateEl: \"#last-backup-date\",\n      backupLocationShowButtonEl: \"#backup-location-show\",\n      backupLocationEditButtonEl: \"#backup-location-edit\",\n      scheduledBackupsDescriptionEl: \"#scheduled-backups-description\",\n    };\n  }\n\n  /**\n   * Creates a BackupPreferences instance and sets the initial default\n   * state.\n   */\n  constructor() {\n    super();\n    this.backupServiceState = {\n      backupDirPath: \"\",\n      backupFileToRestore: null,\n      backupFileInfo: null,\n      defaultParent: {\n        fileName: \"\",\n        path: \"\",\n        iconURL: \"\",\n      },\n      encryptionEnabled: false,\n      scheduledBackupsEnabled: false,\n      lastBackupDate: null,\n      lastBackupFileName: \"\",\n      supportBaseLink: \"\",\n    };\n    this.recoveryInProgress = false;\n    this.recoveryErrorCode = 0;\n    this._enableEncryptionTypeAttr = \"\";\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n\n    this.addEventListener(\"turnOnScheduledBackups\", this);\n    this.addEventListener(\"turnOffScheduledBackups\", this);\n    this.addEventListener(\"dialogCancel\", this);\n    this.addEventListener(\"getBackupFileInfo\", this);\n    this.addEventListener(\"enableEncryption\", this);\n    this.addEventListener(\"rerunEncryption\", this);\n    this.addEventListener(\"disableEncryption\", this);\n    this.addEventListener(\"restoreFromBackupConfirm\", this);\n    this.addEventListener(\"restoreFromBackupChooseFile\", this);\n  }\n\n  handleEvent(event) {\n    switch (event.type) {\n      case \"turnOnScheduledBackups\":\n        this.turnOnScheduledBackupsDialogEl.close();\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:ToggleScheduledBackups\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              ...event.detail,\n              isScheduledBackupsEnabled: true,\n            },\n          })\n        );\n        break;\n      case \"turnOffScheduledBackups\":\n        this.turnOffScheduledBackupsDialogEl.close();\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:ToggleScheduledBackups\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              isScheduledBackupsEnabled: false,\n            },\n          })\n        );\n        break;\n      case \"dialogCancel\":\n        if (this.turnOnScheduledBackupsDialogEl.open) {\n          this.turnOnScheduledBackupsDialogEl.close();\n        } else if (this.turnOffScheduledBackupsDialogEl.open) {\n          this.turnOffScheduledBackupsDialogEl.close();\n        } else if (this.restoreFromBackupDialogEl.open) {\n          this.restoreFromBackupDialogEl.close();\n        } else if (this.disableBackupEncryptionDialogEl.open) {\n          this.disableBackupEncryptionDialogEl.close();\n        } else if (this.enableBackupEncryptionDialogEl.open) {\n          this.enableBackupEncryptionDialogEl.close();\n        }\n        break;\n      case \"restoreFromBackupConfirm\":\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:RestoreFromBackupFile\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              backupFile: event.detail.backupFile,\n              backupPassword: event.detail.backupPassword,\n            },\n          })\n        );\n        break;\n      case \"restoreFromBackupChooseFile\":\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:RestoreFromBackupChooseFile\", {\n            bubbles: true,\n            composed: true,\n          })\n        );\n        break;\n      case \"getBackupFileInfo\":\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:GetBackupFileInfo\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              backupFile: event.detail.backupFile,\n            },\n          })\n        );\n        break;\n      case \"enableEncryption\":\n        this.enableBackupEncryptionDialogEl.close();\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:ToggleEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              ...event.detail,\n              isEncryptionEnabled: true,\n            },\n          })\n        );\n        break;\n      case \"rerunEncryption\":\n        this.enableBackupEncryptionDialogEl.close();\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:RerunEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              ...event.detail,\n            },\n          })\n        );\n        break;\n      case \"disableEncryption\":\n        this.disableBackupEncryptionDialogEl.close();\n        this.dispatchEvent(\n          new CustomEvent(\"BackupUI:ToggleEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              isEncryptionEnabled: false,\n            },\n          })\n        );\n        break;\n    }\n  }\n\n  handleShowScheduledBackups() {\n    if (\n      !this.backupServiceState.scheduledBackupsEnabled &&\n      this.turnOnScheduledBackupsDialogEl\n    ) {\n      this.turnOnScheduledBackupsDialogEl.showModal();\n    } else if (\n      this.backupServiceState.scheduledBackupsEnabled &&\n      this.turnOffScheduledBackupsDialogEl\n    ) {\n      this.turnOffScheduledBackupsDialogEl.showModal();\n    }\n  }\n\n  async handleToggleBackupEncryption(event) {\n    event.preventDefault();\n\n    // Checkbox was unchecked, meaning encryption is already enabled and should be disabled.\n    let toggledToDisable =\n      !event.target.checked && this.backupServiceState.encryptionEnabled;\n\n    if (toggledToDisable && this.disableBackupEncryptionDialogEl) {\n      this.disableBackupEncryptionDialogEl.showModal();\n    } else {\n      this._enableEncryptionTypeAttr = \"set-password\";\n      await this.updateComplete;\n      this.enableBackupEncryptionDialogEl.showModal();\n    }\n  }\n\n  async handleChangePassword() {\n    if (this.enableBackupEncryptionDialogEl) {\n      this._enableEncryptionTypeAttr = \"change-password\";\n      await this.updateComplete;\n      this.enableBackupEncryptionDialogEl.showModal();\n    }\n  }\n\n  scheduledBackupsDescriptionTemplate() {\n    return html`\n      <div\n        id=\"scheduled-backups-description\"\n        data-l10n-id=\"settings-data-backup-scheduled-backups-description\"\n      >\n        <!--TODO: finalize support page links (bug 1900467)-->\n        <a\n          is=\"moz-support-link\"\n          support-page=\"todo-backup\"\n          data-l10n-name=\"support-link\"\n        ></a>\n      </div>\n    `;\n  }\n\n  turnOnScheduledBackupsDialogTemplate() {\n    let { fileName, path, iconURL } = this.backupServiceState.defaultParent;\n    return html`<dialog\n      id=\"turn-on-scheduled-backups-dialog\"\n      class=\"backup-dialog\"\n    >\n      <turn-on-scheduled-backups\n        defaultlabel=${fileName}\n        defaultpath=${path}\n        defaulticonurl=${iconURL}\n        .supportBaseLink=${this.backupServiceState.supportBaseLink}\n      ></turn-on-scheduled-backups>\n    </dialog>`;\n  }\n\n  turnOffScheduledBackupsDialogTemplate() {\n    return html`<dialog id=\"turn-off-scheduled-backups-dialog\">\n      <turn-off-scheduled-backups></turn-off-scheduled-backups>\n    </dialog>`;\n  }\n\n  restoreFromBackupDialogTemplate() {\n    let { backupFilePath, backupFileToRestore, backupFileInfo } =\n      this.backupServiceState;\n    return html`<dialog id=\"restore-from-backup-dialog\">\n      <restore-from-backup\n        .backupFilePath=${backupFilePath}\n        .backupFileToRestore=${backupFileToRestore}\n        .backupFileInfo=${backupFileInfo}\n        .recoveryInProgress=${this.recoveryInProgress}\n        .recoveryErrorCode=${this.recoveryErrorCode}\n      ></restore-from-backup>\n    </dialog>`;\n  }\n\n  restoreFromBackupTemplate() {\n    let descriptionL10nID = this.backupServiceState.scheduledBackupsEnabled\n      ? \"settings-data-backup-scheduled-backups-on-restore-description\"\n      : \"settings-data-backup-scheduled-backups-off-restore-description\";\n\n    let restoreButtonL10nID = this.backupServiceState.scheduledBackupsEnabled\n      ? \"settings-data-backup-scheduled-backups-on-restore-choose\"\n      : \"settings-data-backup-scheduled-backups-off-restore-choose\";\n\n    return html`<section id=\"restore-from-backup\"\">\n      ${this.restoreFromBackupDialogTemplate()}\n      <div class=\"backups-control\">\n        <span\n          id=\"restore-header\"\n          data-l10n-id=\"settings-data-backup-restore-header\"\n          class=\"heading-medium\"\n        ></span>\n        <moz-button\n          id=\"backup-toggle-restore-button\"\n          @click=${this.handleShowRestoreDialog}\n          data-l10n-id=\"${restoreButtonL10nID}\"\n        ></moz-button>\n        <div\n          id=\"backup-restore-description\"\n          data-l10n-id=\"${descriptionL10nID}\"\n        ></div>\n      </div>\n    </section>`;\n  }\n\n  handleShowRestoreDialog() {\n    if (this.restoreFromBackupDialogEl) {\n      this.restoreFromBackupDialogEl.showModal();\n    }\n  }\n\n  handleShowBackupLocation() {\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:ShowBackupLocation\", {\n        bubbles: true,\n      })\n    );\n  }\n\n  handleEditBackupLocation() {\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:EditBackupLocation\", {\n        bubbles: true,\n      })\n    );\n  }\n\n  enableBackupEncryptionDialogTemplate() {\n    return html`<dialog\n      id=\"enable-backup-encryption-dialog\"\n      class=\"backup-dialog\"\n    >\n      <enable-backup-encryption\n        type=${this._enableEncryptionTypeAttr}\n        .supportBaseLink=${this.backupServiceState.supportBaseLink}\n      ></enable-backup-encryption>\n    </dialog>`;\n  }\n\n  disableBackupEncryptionDialogTemplate() {\n    return html`<dialog id=\"disable-backup-encryption-dialog\">\n      <disable-backup-encryption></disable-backup-encryption>\n    </dialog>`;\n  }\n\n  lastBackupInfoTemplate() {\n    // The lastBackupDate is stored in preferences, which only accepts\n    // 32-bit signed values, so we automatically divide it by 1000 before\n    // storing it. We need to re-multiply it by 1000 to get Fluent to render\n    // the right time.\n    let backupDateArgs = {\n      date: this.backupServiceState.lastBackupDate * 1000,\n    };\n    let backupFileNameArgs = {\n      fileName: this.backupServiceState.lastBackupFileName,\n    };\n\n    return html`\n      <div id=\"last-backup-info\">\n        <div\n          id=\"last-backup-date\"\n          data-l10n-id=\"settings-data-backup-last-backup-date\"\n          data-l10n-args=\"${JSON.stringify(backupDateArgs)}\"\n        ></div>\n        <div\n          id=\"last-backup-filename\"\n          data-l10n-id=\"settings-data-backup-last-backup-filename\"\n          data-l10n-args=\"${JSON.stringify(backupFileNameArgs)}\"\n        ></div>\n      </div>\n    `;\n  }\n\n  backupLocationTemplate() {\n    let iconURL =\n      this.backupServiceState.defaultParent.iconURL || this.#placeholderIconURL;\n    let { backupDirPath } = this.backupServiceState;\n\n    return html`\n      <div id=\"last-backup-location-control\">\n        <span data-l10n-id=\"settings-data-backup-last-backup-location\"></span>\n        <input\n          id=\"last-backup-location\"\n          class=\"backup-location-filepicker-input\"\n          type=\"text\"\n          readonly\n          value=\"${backupDirPath}\"\n          style=${`background-image: url(${iconURL})`}></input>\n        <moz-button\n          id=\"backup-location-show\"\n          @click=${this.handleShowBackupLocation}\n          data-l10n-id=\"settings-data-backup-last-backup-location-show-in-folder\"\n        ></moz-button>\n        <moz-button\n          id=\"backup-location-edit\"\n          @click=${this.handleEditBackupLocation}\n          data-l10n-id=\"settings-data-backup-last-backup-location-edit\"\n        ></moz-button>\n      </div>\n    `;\n  }\n\n  sensitiveDataTemplate() {\n    return html`<section id=\"backup-password-controls\">\n      <!-- TODO: we can use the moz-checkbox reusable component once it is ready (bug 1901635)-->\n      <div id=\"backup-sensitive-data-checkbox\">\n        <label\n          id=\"backup-sensitive-data-checkbox-label\"\n          for=\"backup-sensitive-data-checkbox-input\"\n        >\n          <input\n            id=\"backup-sensitive-data-checkbox-input\"\n            @click=${this.handleToggleBackupEncryption}\n            type=\"checkbox\"\n            .checked=${this.backupServiceState.encryptionEnabled}\n          />\n          <span\n            id=\"backup-sensitive-data-checkbox-span\"\n            data-l10n-id=\"settings-data-toggle-encryption-label\"\n          ></span>\n        </label>\n        <div\n          id=\"backup-sensitive-data-checkbox-description\"\n          class=\"text-deemphasized\"\n        >\n          <span\n            id=\"backup-sensitive-data-checkbox-description-span\"\n            data-l10n-id=\"settings-data-toggle-encryption-description\"\n          ></span>\n          <!--TODO: finalize support page links (bug 1900467)-->\n          <a\n            id=\"settings-data-toggle-encryption-learn-more-link\"\n            is=\"moz-support-link\"\n            support-page=\"todo-backup\"\n            data-l10n-id=\"settings-data-toggle-encryption-support-link\"\n          ></a>\n        </div>\n      </div>\n      ${this.backupServiceState.encryptionEnabled\n        ? html`<moz-button\n            id=\"backup-change-password-button\"\n            @click=${this.handleChangePassword}\n            data-l10n-id=\"settings-data-change-password\"\n          ></moz-button>`\n        : null}\n    </section>`;\n  }\n\n  updated() {\n    if (this.backupServiceState.scheduledBackupsEnabled) {\n      let input = this.lastBackupLocationInputEl;\n      input.setSelectionRange(input.value.length, input.value.length);\n    }\n  }\n\n  render() {\n    let scheduledBackupsEnabledL10nID = this.backupServiceState\n      .scheduledBackupsEnabled\n      ? \"settings-data-backup-scheduled-backups-on\"\n      : \"settings-data-backup-scheduled-backups-off\";\n    return html`<link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__preferencesStyles}\"\n      />\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__backupsettingsStyles}\"\n      />\n      ${this.turnOnScheduledBackupsDialogTemplate()}\n      ${this.turnOffScheduledBackupsDialogTemplate()}\n      ${this.enableBackupEncryptionDialogTemplate()}\n      ${this.disableBackupEncryptionDialogTemplate()}\n\n      <section id=\"scheduled-backups\">\n        <div class=\"backups-control\">\n          <span\n            id=\"scheduled-backups-enabled\"\n            data-l10n-id=\"${scheduledBackupsEnabledL10nID}\"\n            class=\"heading-medium\"\n          ></span>\n\n          <moz-button\n            id=\"backup-toggle-scheduled-button\"\n            @click=${this.handleShowScheduledBackups}\n            data-l10n-id=\"settings-data-backup-toggle\"\n          ></moz-button>\n\n          ${this.backupServiceState.scheduledBackupsEnabled\n            ? null\n            : this.scheduledBackupsDescriptionTemplate()}\n        </div>\n\n        ${this.backupServiceState.lastBackupDate\n          ? this.lastBackupInfoTemplate()\n          : null}\n        ${this.backupServiceState.scheduledBackupsEnabled\n          ? this.backupLocationTemplate()\n          : null}\n        ${this.backupServiceState.scheduledBackupsEnabled\n          ? this.sensitiveDataTemplate()\n          : null}\n      </section>\n\n      ${this.restoreFromBackupTemplate()} `;\n  }\n}\n\ncustomElements.define(\"backup-settings\", BackupSettings);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\nimport \"./backup-settings.mjs\";\n\nwindow.MozXULElement.insertFTLIfNeeded(\"locales-preview/backupSettings.ftl\");\nwindow.MozXULElement.insertFTLIfNeeded(\"branding/brand.ftl\");\n\nexport default {\n  title: \"Domain-specific UI Widgets/Backup/Backup Settings\",\n  component: \"backup-settings\",\n  argTypes: {},\n};\n\nconst Template = ({ backupServiceState }) => html`\n  <backup-settings .backupServiceState=${backupServiceState}></backup-settings>\n`;\n\nexport const ScheduledBackupsDisabled = Template.bind({});\nScheduledBackupsDisabled.args = {\n  backupServiceState: {\n    backupDirPath: \"/Some/User/Documents\",\n    defaultParent: {\n      path: \"/Some/User/Documents\",\n      fileName: \"Documents\",\n    },\n    scheduledBackupsEnabled: false,\n  },\n};\n\nexport const ScheduledBackupsEnabled = Template.bind({});\nScheduledBackupsEnabled.args = {\n  backupServiceState: {\n    backupDirPath: \"/Some/User/Documents\",\n    defaultParent: {\n      path: \"/Some/User/Documents\",\n      fileName: \"Documents\",\n    },\n    scheduledBackupsEnabled: true,\n  },\n};\n\nexport const ExistingBackup = Template.bind({});\nExistingBackup.args = {\n  backupServiceState: {\n    backupDirPath: \"/Some/User/Documents\",\n    defaultParent: {\n      path: \"/Some/User/Documents\",\n      fileName: \"Documents\",\n    },\n    scheduledBackupsEnabled: true,\n    lastBackupDate: 1719625747,\n    lastBackupFileName: \"FirefoxBackup_default_123123123.html\",\n  },\n};\n\nexport const EncryptionEnabled = Template.bind({});\nEncryptionEnabled.args = {\n  backupServiceState: {\n    backupDirPath: \"/Some/User/Documents\",\n    defaultParent: {\n      path: \"/Some/User/Documents\",\n      fileName: \"Documents\",\n    },\n    scheduledBackupsEnabled: true,\n    encryptionEnabled: true,\n    lastBackupDate: 1719625747,\n    lastBackupFileName: \"FirefoxBackup_default_123123123.html\",\n  },\n};\n","import __chrome_styles_loader__disablebackupencryptionStyles from \"browser/components/backup/content/disable-backup-encryption.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * The widget for disabling password protection if the backup is already\n * encrypted.\n */\nexport default class DisableBackupEncryption extends MozLitElement {\n  static get queries() {\n    return {\n      cancelButtonEl: \"#backup-disable-encryption-cancel-button\",\n      confirmButtonEl: \"#backup-disable-encryption-confirm-button\",\n    };\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  handleConfirm() {\n    this.dispatchEvent(\n      new CustomEvent(\"disableEncryption\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  contentTemplate() {\n    return html`\n      <div\n        id=\"backup-disable-encryption-wrapper\"\n        aria-labelledby=\"backup-disable-encryption-header\"\n        aria-describedby=\"backup-disable-encryption-description\"\n      >\n        <h1\n          id=\"backup-disable-encryption-header\"\n          class=\"heading-medium\"\n          data-l10n-id=\"disable-backup-encryption-header\"\n        ></h1>\n        <main id=\"backup-disable-encryption-content\">\n          <div id=\"backup-disable-encryption-description\">\n            <span\n              id=\"backup-disable-encryption-description-span\"\n              data-l10n-id=\"disable-backup-encryption-description\"\n            >\n              <!--TODO: finalize support page links (bug 1900467)-->\n            </span>\n            <a\n              id=\"backup-disable-encryption-learn-more-link\"\n              is=\"moz-support-link\"\n              support-page=\"todo-backup\"\n              data-l10n-id=\"disable-backup-encryption-support-link\"\n            ></a>\n          </div>\n        </main>\n\n        <moz-button-group id=\"backup-disable-encryption-button-group\">\n          <moz-button\n            id=\"backup-disable-encryption-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"disable-backup-encryption-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"backup-disable-encryption-confirm-button\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=\"disable-backup-encryption-confirm-button\"\n          ></moz-button>\n        </moz-button-group>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__disablebackupencryptionStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"disable-backup-encryption\", DisableBackupEncryption);\n","import __chrome_styles_loader__enablebackupencryptionStyles from \"browser/components/backup/content/enable-backup-encryption.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/password-validation-inputs.mjs\";\n\n/**\n * Valid attributes for the enable-backup-encryption dialog type.\n *\n * @see EnableBackupEncryption.type\n */\nconst VALID_TYPES = Object.freeze({\n  SET_PASSWORD: \"set-password\",\n  CHANGE_PASSWORD: \"change-password\",\n});\n\nconst VALID_L10N_IDS = new Map([\n  [VALID_TYPES.SET_PASSWORD, \"enable-backup-encryption-header\"],\n  [VALID_TYPES.CHANGE_PASSWORD, \"change-backup-encryption-header\"],\n]);\n\n/**\n * The widget for enabling password protection if the backup is not yet\n * encrypted.\n */\nexport default class EnableBackupEncryption extends MozLitElement {\n  static properties = {\n    _inputPassValue: { type: String, state: true },\n    _passwordsMatch: { type: Boolean, state: true },\n    supportBaseLink: { type: String },\n    /**\n     * The \"type\" attribute changes the layout.\n     *\n     * @see VALID_TYPES\n     */\n    type: { type: String, reflect: true },\n  };\n\n  static get queries() {\n    return {\n      cancelButtonEl: \"#backup-enable-encryption-cancel-button\",\n      confirmButtonEl: \"#backup-enable-encryption-confirm-button\",\n      contentEl: \"#backup-enable-encryption-content\",\n      textHeaderEl: \"#backup-enable-encryption-header\",\n      textDescriptionEl: \"#backup-enable-encryption-description\",\n      passwordInputsEl: \"#backup-enable-encryption-password-inputs\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.supportBaseLink = \"\";\n    this.type = VALID_TYPES.SET_PASSWORD;\n    this._inputPassValue = \"\";\n    this._passwordsMatch = false;\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n\n    this.addEventListener(\"ValidPasswordsDetected\", this);\n    this.addEventListener(\"InvalidPasswordsDetected\", this);\n  }\n\n  handleEvent(event) {\n    if (event.type == \"ValidPasswordsDetected\") {\n      let { password } = event.detail;\n      this._passwordsMatch = true;\n      this._inputPassValue = password;\n    } else if (event.type == \"InvalidPasswordsDetected\") {\n      this._passwordsMatch = false;\n      this._inputPassValue = \"\";\n    }\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n    this.resetChanges();\n  }\n\n  handleConfirm() {\n    switch (this.type) {\n      case VALID_TYPES.SET_PASSWORD:\n        this.dispatchEvent(\n          new CustomEvent(\"enableEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              password: this._inputPassValue,\n            },\n          })\n        );\n        break;\n      case VALID_TYPES.CHANGE_PASSWORD:\n        this.dispatchEvent(\n          new CustomEvent(\"rerunEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              password: this._inputPassValue,\n            },\n          })\n        );\n        break;\n    }\n    this.resetChanges();\n  }\n\n  resetChanges() {\n    this._inputPassValue = \"\";\n    this._passwordsMatch = false;\n\n    this.passwordInputsEl.dispatchEvent(\n      new CustomEvent(\"resetInputs\", { bubbles: true, composed: true })\n    );\n  }\n\n  descriptionTemplate() {\n    return html`\n      <div id=\"backup-enable-encryption-description\">\n        <span\n          id=\"backup-enable-encryption-description-span\"\n          data-l10n-id=\"enable-backup-encryption-description\"\n        >\n          <!--TODO: finalize support page links (bug 1900467)-->\n        </span>\n        <a\n          id=\"backup-enable-encryption-learn-more-link\"\n          is=\"moz-support-link\"\n          support-page=\"todo-backup\"\n          data-l10n-id=\"enable-backup-encryption-support-link\"\n        ></a>\n      </div>\n    `;\n  }\n\n  buttonGroupTemplate() {\n    return html`\n      <moz-button-group id=\"backup-enable-encryption-button-group\">\n        <moz-button\n          id=\"backup-enable-encryption-cancel-button\"\n          @click=${this.handleCancel}\n          data-l10n-id=\"enable-backup-encryption-cancel-button\"\n        ></moz-button>\n        <moz-button\n          id=\"backup-enable-encryption-confirm-button\"\n          @click=${this.handleConfirm}\n          type=\"primary\"\n          data-l10n-id=\"enable-backup-encryption-confirm-button\"\n          ?disabled=${!this._passwordsMatch}\n        ></moz-button>\n      </moz-button-group>\n    `;\n  }\n\n  contentTemplate() {\n    return html`\n      <div\n        id=\"backup-enable-encryption-wrapper\"\n        aria-labelledby=\"backup-enable-encryption-header\"\n        aria-describedby=\"backup-enable-encryption-description\"\n      >\n        <h1\n          id=\"backup-enable-encryption-header\"\n          class=\"heading-medium\"\n          data-l10n-id=${ifDefined(VALID_L10N_IDS.get(this.type))}\n        ></h1>\n        <div id=\"backup-enable-encryption-content\">\n          ${this.type === VALID_TYPES.SET_PASSWORD\n            ? this.descriptionTemplate()\n            : null}\n          <password-validation-inputs\n            id=\"backup-enable-encryption-password-inputs\"\n            .supportBaseLink=${this.supportBaseLink}\n          >\n          </password-validation-inputs>\n        </div>\n        ${this.buttonGroupTemplate()}\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__enablebackupencryptionStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"enable-backup-encryption\", EnableBackupEncryption);\n","import __chrome_styles_loader__passwordrulestooltipStyles from \"browser/components/backup/content/password-rules-tooltip.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * The widget for enabling password protection if the backup is not yet\n * encrypted.\n */\nexport default class PasswordRulesTooltip extends MozLitElement {\n  static properties = {\n    hasCommon: { type: Boolean },\n    hasEmail: { type: Boolean },\n    tooShort: { type: Boolean },\n    supportBaseLink: { type: String },\n  };\n\n  static get queries() {\n    return {\n      passwordRulesEl: \"#password-rules-wrapper\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.hasCommon = false;\n    this.hasEmail = false;\n    this.tooShort = false;\n    this.supportBaseLink = \"\";\n  }\n\n  getRuleStateConstants(hasInvalidCondition) {\n    if (hasInvalidCondition) {\n      return {\n        class: \"warning\",\n        icon: \"chrome://global/skin/icons/warning.svg\",\n        l10nId: \"password-rules-a11y-warning\",\n      };\n    }\n\n    return {\n      class: \"success\",\n      icon: \"chrome://global/skin/icons/check-filled.svg\",\n      l10nId: \"password-rules-a11y-success\",\n    };\n  }\n\n  render() {\n    let lengthConstants = this.getRuleStateConstants(this.tooShort);\n    let emailConstants = this.getRuleStateConstants(this.hasEmail);\n    // TODO: (bug 1905140) read list of common passwords - default to success state for now\n    let commonConstants = this.getRuleStateConstants(this.hasCommon);\n\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__passwordrulestooltipStyles}\"\n      />\n      <div id=\"password-rules-wrapper\" aria-live=\"polite\">\n        <h2\n          id=\"password-rules-header\"\n          data-l10n-id=\"password-rules-header\"\n        ></h2>\n        <ul>\n          <li>\n            <img\n              data-l10n-id=${lengthConstants.l10nId}\n              class=\"icon ${lengthConstants.class}\"\n              src=${lengthConstants.icon}\n            />\n            <span\n              data-l10n-id=\"password-rules-length-description\"\n              class=\"rule-description\"\n            ></span>\n          </li>\n          <li>\n            <img\n              data-l10n-id=${emailConstants.l10nId}\n              class=\"icon ${emailConstants.class}\"\n              src=${emailConstants.icon}\n            />\n            <span\n              data-l10n-id=\"password-rules-email-description\"\n              class=\"rule-description\"\n            ></span>\n          </li>\n          <li>\n            <img\n              data-l10n-id=${commonConstants.l10nId}\n              class=\"icon ${commonConstants.class}\"\n              src=${commonConstants.icon}\n            />\n            <span\n              data-l10n-id=\"password-rules-common-description\"\n              class=\"rule-description\"\n            ></span>\n          </li>\n          <li>\n            <img\n              class=\"icon\"\n              src=\"chrome://browser/skin/preferences/category-privacy-security.svg\"\n            />\n            <span data-l10n-id=\"password-rules-disclaimer\"\n              ><a\n                data-l10n-name=\"password-support-link\"\n                target=\"_blank\"\n                href=${`${this.supportBaseLink}password-strength`}\n              ></a\n            ></span>\n          </li>\n        </ul>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"password-rules-tooltip\", PasswordRulesTooltip);\n","import __chrome_styles_loader__passwordvalidationinputsStyles from \"browser/components/backup/content/password-validation-inputs.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/password-rules-tooltip.mjs\";\n\n/**\n * The widget for enabling password protection if the backup is not yet\n * encrypted.\n */\nexport default class PasswordValidationInputs extends MozLitElement {\n  static properties = {\n    _hasCommon: { type: Boolean, state: true },\n    _hasEmail: { type: Boolean, state: true },\n    _passwordsMatch: { type: Boolean, state: true },\n    _passwordsValid: { type: Boolean, state: true },\n    _showRules: { type: Boolean, state: true },\n    _tooShort: { type: Boolean, state: true },\n    /**\n     * If, by chance, there is focus on a focusable element in the tooltip,\n     * track the focus state so that we can keep the tooltip open.\n     */\n    _tooltipFocus: { type: Boolean, state: true },\n    supportBaseLink: { type: String },\n  };\n\n  static get queries() {\n    return {\n      formEl: \"#password-inputs-form\",\n      inputNewPasswordEl: \"#new-password-input\",\n      inputRepeatPasswordEl: \"#repeat-password-input\",\n      passwordRulesEl: \"#password-rules\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.supportBaseLink = \"\";\n    this._tooShort = true;\n    this._hasCommon = false;\n    this._hasEmail = false;\n    this._passwordsMatch = false;\n    this._passwordsValid = false;\n    this._tooltipFocus = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"resetInputs\", this.handleReset);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"resetInputs\", this.handleReset);\n  }\n\n  handleReset() {\n    this.formEl.reset();\n    this._showRules = false;\n    this._hasCommon = false;\n    this._hasEmail = false;\n    this._tooShort = true;\n    this._passwordsMatch = false;\n    this._passwordsValid = false;\n    this._tooltipFocus = false;\n  }\n\n  handleFocusNewPassword() {\n    this._showRules = true;\n  }\n\n  handleBlurNewPassword(event) {\n    this._showRules = !event.target.checkValidity();\n  }\n\n  handleChangeNewPassword() {\n    this.updatePasswordValidity();\n  }\n\n  handleChangeRepeatPassword() {\n    this.updatePasswordValidity();\n  }\n\n  updatePasswordValidity() {\n    const emailRegex = /^[\\w!#$%&'*+/=?^`{|}~.-]+@[A-Z0-9-]+\\.[A-Z0-9.-]+$/i;\n    this._hasEmail = emailRegex.test(this.inputNewPasswordEl.value);\n    if (this._hasEmail) {\n      // TODO: we need a localized string for this error (bug 1909983)\n      this.inputNewPasswordEl.setCustomValidity(\"TODO: no emails\");\n    } else {\n      this.inputNewPasswordEl.setCustomValidity(\"\");\n    }\n\n    const newPassValidity = this.inputNewPasswordEl.validity;\n    this._tooShort = newPassValidity?.valueMissing || newPassValidity?.tooShort;\n\n    this._passwordsMatch =\n      this.inputNewPasswordEl.value == this.inputRepeatPasswordEl.value;\n    if (!this._passwordsMatch) {\n      // TODO: we need a localized string for this error  (bug 1909983)\n      this.inputRepeatPasswordEl.setCustomValidity(\"TODO: not matching\");\n    } else {\n      this.inputRepeatPasswordEl.setCustomValidity(\"\");\n    }\n\n    const repeatPassValidity = this.inputRepeatPasswordEl.validity;\n    this._passwordsValid =\n      newPassValidity?.valid &&\n      repeatPassValidity?.valid &&\n      this._passwordsMatch;\n\n    /**\n     * This step may involve async validation with BackupService. For instance, we have to\n     * check against a list of common passwords (bug 1905140) and display an error message if an\n     * issue occurs (bug 1905145).\n     */\n  }\n\n  handleTooltipFocus() {\n    this._tooltipFocus = true;\n  }\n\n  handleTooltipBlur() {\n    this._tooltipFocus = false;\n  }\n\n  /**\n   * Dispatches a custom event whenever validity changes.\n   *\n   * @param {Map<string, any>} changedProperties a Map of recently changed properties and their new values\n   */\n  updated(changedProperties) {\n    if (!changedProperties.has(\"_passwordsValid\")) {\n      return;\n    }\n\n    if (this._passwordsValid) {\n      this.dispatchEvent(\n        new CustomEvent(\"ValidPasswordsDetected\", {\n          bubbles: true,\n          composed: true,\n          detail: {\n            password: this.inputNewPasswordEl.value,\n          },\n        })\n      );\n    } else {\n      this.dispatchEvent(\n        new CustomEvent(\"InvalidPasswordsDetected\", {\n          bubbles: true,\n          composed: true,\n        })\n      );\n    }\n  }\n\n  contentTemplate() {\n    return html`\n      <div id=\"password-inputs-wrapper\" aria-live=\"polite\">\n        <form id=\"password-inputs-form\">\n          <!--TODO: (bug 1909983) change first input field label for the \"change-password\" dialog-->\n          <label id=\"new-password-label\" for=\"new-password-input\">\n            <div id=\"new-password-label-wrapper-span-input\">\n              <span\n                id=\"new-password-span\"\n                data-l10n-id=\"enable-backup-encryption-create-password-label\"\n              ></span>\n              <input\n                type=\"password\"\n                id=\"new-password-input\"\n                minlength=\"8\"\n                required\n                @input=${this.handleChangeNewPassword}\n                @focus=${this.handleFocusNewPassword}\n                @blur=${this.handleBlurNewPassword}\n              />\n              <!--TODO: (bug 1909984) improve how we read out the first input field for screen readers-->\n            </div>\n          </label>\n          <!--TODO: (bug 1909984) look into how the tooltip vs dialog behaves when pressing the ESC key-->\n          <password-rules-tooltip\n            id=\"password-rules\"\n            class=${!this._showRules && !this._tooltipFocus ? \"hidden\" : \"\"}\n            .hasCommon=${this._hasCommon}\n            .hasEmail=${this._hasEmail}\n            .tooShort=${this._tooShort}\n            .supportBaseLink=${this.supportBaseLink}\n            @focus=${this.handleTooltipFocus}\n            @blur=${this.handleTooltipBlur}\n          ></password-rules-tooltip>\n          <label id=\"repeat-password-label\" for=\"repeat-password-input\">\n            <span\n              id=\"repeat-password-span\"\n              data-l10n-id=\"enable-backup-encryption-repeat-password-label\"\n            ></span>\n            <input\n              type=\"password\"\n              id=\"repeat-password-input\"\n              minlength=\"8\"\n              required\n              @input=${this.handleChangeRepeatPassword}\n            />\n          </label>\n        </form>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__passwordvalidationinputsStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"password-validation-inputs\", PasswordValidationInputs);\n","import __chrome_styles_loader__restorefrombackupStyles from \"browser/components/backup/content/restore-from-backup.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * The widget for allowing users to select and restore from a\n * a backup file.\n */\nexport default class RestoreFromBackup extends MozLitElement {\n  #placeholderFileIconURL = \"chrome://global/skin/icons/page-portrait.svg\";\n\n  static properties = {\n    backupFilePath: { type: String },\n    backupFileToRestore: { type: String, reflect: true },\n    backupFileInfo: { type: Object },\n    _fileIconURL: { type: String },\n    recoveryInProgress: { type: Boolean },\n    recoveryErrorCode: { type: Number },\n  };\n\n  static get queries() {\n    return {\n      filePicker: \"#backup-filepicker-input\",\n      passwordInput: \"#backup-password-input\",\n      cancelButtonEl: \"#restore-from-backup-cancel-button\",\n      confirmButtonEl: \"#restore-from-backup-confirm-button\",\n      chooseButtonEl: \"#backup-filepicker-button\",\n    };\n  }\n\n  constructor() {\n    super();\n    this._fileIconURL = \"\";\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n\n    if (this.backupFileToRestore && !this.backupFileInfo) {\n      this.getBackupFileInfo();\n    }\n\n    this.addEventListener(\"BackupUI:SelectNewFilepickerPath\", this);\n  }\n\n  handleEvent(event) {\n    if (event.type == \"BackupUI:SelectNewFilepickerPath\") {\n      let { path, iconURL } = event.detail;\n      this.backupFileToRestore = path;\n      this._fileIconURL = iconURL;\n    }\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"backupFileToRestore\")) {\n      this.backupFileInfo = null;\n      this.getBackupFileInfo();\n    }\n  }\n\n  async handleChooseBackupFile() {\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:ShowFilepicker\", {\n        bubbles: true,\n        detail: {\n          win: window.browsingContext,\n          filter: \"filterHTML\",\n          displayDirectoryPath: this.backupFileToRestore,\n        },\n      })\n    );\n  }\n\n  getBackupFileInfo() {\n    let backupFile = this.backupFileToRestore;\n    if (!backupFile) {\n      return;\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"getBackupFileInfo\", {\n        bubbles: true,\n        composed: true,\n        detail: {\n          backupFile,\n        },\n      })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  handleConfirm() {\n    let backupFile = this.backupFileToRestore;\n    if (!backupFile || this.recoveryInProgress) {\n      return;\n    }\n    let backupPassword = this.passwordInput?.value;\n    this.dispatchEvent(\n      new CustomEvent(\"restoreFromBackupConfirm\", {\n        bubbles: true,\n        composed: true,\n        detail: {\n          backupFile,\n          backupPassword,\n        },\n      })\n    );\n  }\n\n  controlsTemplate() {\n    let iconURL =\n      this.backupFileToRestore &&\n      (this._fileIconURL || this.#placeholderFileIconURL);\n    return html`\n      <fieldset id=\"backup-restore-controls\">\n        <fieldset id=\"backup-filepicker-controls\">\n          <label\n            id=\"backup-filepicker-label\"\n            for=\"backup-filepicker-input\"\n            data-l10n-id=\"restore-from-backup-filepicker-label\"\n          ></label>\n          <div id=\"backup-filepicker\">\n            <input\n              id=\"backup-filepicker-input\"\n              type=\"text\"\n              readonly\n              value=${this.backupFileToRestore}\n              style=\"background-image: url(${ifDefined(iconURL)})\"\n            />\n            <moz-button\n              id=\"backup-filepicker-button\"\n              @click=${this.handleChooseBackupFile}\n              data-l10n-id=\"restore-from-backup-file-choose-button\"\n              aria-controls=\"backup-filepicker-input\"\n            ></moz-button>\n          </div>\n        </fieldset>\n\n        <fieldset id=\"password-entry-controls\">\n          ${this.backupFileInfo?.isEncrypted\n            ? this.passwordEntryTemplate()\n            : null}\n        </fieldset>\n      </fieldset>\n    `;\n  }\n\n  passwordEntryTemplate() {\n    return html` <fieldset id=\"backup-password\">\n      <label id=\"backup-password-label\" for=\"backup-password-input\">\n        <span\n          id=\"backup-password-span\"\n          data-l10n-id=\"restore-from-backup-password-label\"\n        ></span>\n        <input type=\"password\" id=\"backup-password-input\" />\n      </label>\n      <label\n        id=\"backup-password-description\"\n        data-l10n-id=\"restore-from-backup-password-description\"\n      ></label>\n    </fieldset>`;\n  }\n\n  contentTemplate() {\n    let buttonL10nId = !this.recoveryInProgress\n      ? \"restore-from-backup-confirm-button\"\n      : \"restore-from-backup-restoring-button\";\n\n    return html`\n      <div\n        id=\"restore-from-backup-wrapper\"\n        aria-labelledby=\"restore-from-backup-header\"\n        aria-describedby=\"restore-from-backup-description\"\n      >\n        <h1\n          id=\"restore-from-backup-header\"\n          class=\"heading-medium\"\n          data-l10n-id=\"restore-from-backup-header\"\n        ></h1>\n        <main id=\"restore-from-backup-content\">\n          ${this.backupFileInfo ? this.descriptionTemplate() : null}\n          ${this.controlsTemplate()}\n        </main>\n\n        <moz-button-group id=\"restore-from-backup-button-group\">\n          <moz-button\n            id=\"restore-from-backup-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"restore-from-backup-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"restore-from-backup-confirm-button\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=\"${buttonL10nId}\"\n            ?disabled=${!this.backupFileToRestore || this.recoveryInProgress}\n          ></moz-button>\n        </moz-button-group>\n      </div>\n    `;\n  }\n\n  descriptionTemplate() {\n    let { date } = this.backupFileInfo;\n    let dateTime = date && new Date(date).getTime();\n    return html`\n      <div id=\"restore-from-backup-description\">\n        <span\n          id=\"restore-from-backup-description-span\"\n          data-l10n-id=\"restore-from-backup-description-with-metadata\"\n          data-l10n-args=${JSON.stringify({\n            date: dateTime,\n          })}\n        ></span>\n        <a\n          id=\"restore-from-backup-learn-more-link\"\n          is=\"moz-support-link\"\n          support-page=\"todo-backup\"\n          data-l10n-id=\"restore-from-backup-support-link\"\n        ></a>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__restorefrombackupStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"restore-from-backup\", RestoreFromBackup);\n","import __chrome_styles_loader__turnoffscheduledbackupsStyles from \"browser/components/backup/content/turn-off-scheduled-backups.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * The widget for showing available options when users want to turn on\n * scheduled backups.\n */\nexport default class TurnOffScheduledBackups extends MozLitElement {\n  static get queries() {\n    return {\n      cancelButtonEl: \"#backup-turn-off-scheduled-cancel-button\",\n      confirmButtonEl: \"#backup-turn-off-scheduled-confirm-button\",\n    };\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  handleConfirm() {\n    this.dispatchEvent(\n      new CustomEvent(\"turnOffScheduledBackups\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  contentTemplate() {\n    return html`\n      <div\n        id=\"backup-turn-off-scheduled-wrapper\"\n        aria-labelledby=\"backup-turn-off-scheduled-header\"\n        aria-describedby=\"backup-turn-off-scheduled-description\"\n      >\n        <h1\n          id=\"backup-turn-off-scheduled-header\"\n          class=\"heading-medium\"\n          data-l10n-id=\"turn-off-scheduled-backups-header\"\n        ></h1>\n        <main id=\"backup-turn-off-scheduled-content\">\n          <div id=\"backup-turn-off-scheduled-description\">\n            <span\n              id=\"backup-turn-off-scheduled-description-span\"\n              data-l10n-id=\"turn-off-scheduled-backups-description\"\n            ></span>\n            <!--TODO: finalize support page links (bug 1900467)-->\n            <a\n              id=\"backup-turn-off-scheduled-learn-more-link\"\n              is=\"moz-support-link\"\n              support-page=\"todo-backup\"\n              data-l10n-id=\"turn-off-scheduled-backups-support-link\"\n            ></a>\n          </div>\n        </main>\n\n        <moz-button-group id=\"backup-turn-off-scheduled-button-group\">\n          <moz-button\n            id=\"backup-turn-off-scheduled-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"turn-off-scheduled-backups-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"backup-turn-off-scheduled-confirm-button\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=\"turn-off-scheduled-backups-confirm-button\"\n          ></moz-button>\n        </moz-button-group>\n      </div>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__turnoffscheduledbackupsStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"turn-off-scheduled-backups\", TurnOffScheduledBackups);\n","import __chrome_styles_loader__turnonscheduledbackupsStyles from \"browser/components/backup/content/turn-on-scheduled-backups.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://browser/content/backup/password-validation-inputs.mjs\";\n\n/**\n * The widget for showing available options when users want to turn on\n * scheduled backups.\n */\nexport default class TurnOnScheduledBackups extends MozLitElement {\n  #placeholderIconURL = \"chrome://global/skin/icons/page-portrait.svg\";\n\n  static properties = {\n    defaultIconURL: { type: String, reflect: true },\n    defaultLabel: { type: String, reflect: true },\n    defaultPath: { type: String, reflect: true },\n    _newIconURL: { type: String },\n    _newLabel: { type: String },\n    _newPath: { type: String },\n    _showPasswordOptions: { type: Boolean, reflect: true, state: true },\n    _passwordsMatch: { type: Boolean, state: true },\n    _inputPassValue: { type: String, state: true },\n    supportBaseLink: { type: String },\n  };\n\n  static get queries() {\n    return {\n      cancelButtonEl: \"#backup-turn-on-scheduled-cancel-button\",\n      confirmButtonEl: \"#backup-turn-on-scheduled-confirm-button\",\n      filePathButtonEl: \"#backup-location-filepicker-button\",\n      filePathInputCustomEl: \"#backup-location-filepicker-input-custom\",\n      filePathInputDefaultEl: \"#backup-location-filepicker-input-default\",\n      passwordOptionsCheckboxEl: \"#sensitive-data-checkbox-input\",\n      passwordOptionsExpandedEl: \"#passwords\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.defaultIconURL = \"\";\n    this.defaultLabel = \"\";\n    this.defaultPath = \"\";\n    this._newIconURL = \"\";\n    this._newLabel = \"\";\n    this._newPath = \"\";\n    this._showPasswordOptions = false;\n    this._passwordsMatch = false;\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n\n    this.addEventListener(\"BackupUI:SelectNewFilepickerPath\", this);\n    this.addEventListener(\"ValidPasswordsDetected\", this);\n    this.addEventListener(\"InvalidPasswordsDetected\", this);\n  }\n\n  handleEvent(event) {\n    if (event.type == \"BackupUI:SelectNewFilepickerPath\") {\n      let { path, filename, iconURL } = event.detail;\n      this._newPath = path;\n      this._newLabel = filename;\n      this._newIconURL = iconURL;\n    } else if (event.type == \"ValidPasswordsDetected\") {\n      let { password } = event.detail;\n      this._passwordsMatch = true;\n      this._inputPassValue = password;\n    } else if (event.type == \"InvalidPasswordsDetected\") {\n      this._passwordsMatch = false;\n      this._inputPassValue = \"\";\n    }\n  }\n\n  async handleChooseLocation() {\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:ShowFilepicker\", {\n        bubbles: true,\n        detail: {\n          win: window.browsingContext,\n        },\n      })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n    this.resetChanges();\n  }\n\n  handleConfirm() {\n    let detail = {\n      parentDirPath: this._newPath || this.defaultPath,\n    };\n\n    if (this._showPasswordOptions && this._passwordsMatch) {\n      detail.password = this._inputPassValue;\n    }\n\n    this.dispatchEvent(\n      new CustomEvent(\"turnOnScheduledBackups\", {\n        bubbles: true,\n        composed: true,\n        detail,\n      })\n    );\n    this.resetChanges();\n  }\n\n  handleTogglePasswordOptions() {\n    this._showPasswordOptions = this.passwordOptionsCheckboxEl?.checked;\n    this._passwordsMatch = false;\n  }\n\n  resetChanges() {\n    this._newPath = \"\";\n    this._newIconURL = \"\";\n    this._newLabel = \"\";\n    this._showPasswordOptions = false;\n    this.passwordOptionsCheckboxEl.checked = false;\n    this._passwordsMatch = false;\n    this._inputPassValue = \"\";\n\n    if (this.passwordOptionsExpandedEl) {\n      this.passwordOptionsExpandedEl.dispatchEvent(\n        new CustomEvent(\"resetInputs\", { bubbles: true, composed: true })\n      );\n    }\n  }\n\n  defaultFilePathInputTemplate() {\n    let filename = this.defaultLabel;\n    let iconURL = this.defaultIconURL || this.#placeholderIconURL;\n\n    return html`\n      <input\n        id=\"backup-location-filepicker-input-default\"\n        class=\"backup-location-filepicker-input\"\n        type=\"text\"\n        readonly\n        data-l10n-id=\"turn-on-scheduled-backups-location-default-folder\"\n        data-l10n-args=${JSON.stringify({\n          recommendedFolder: filename,\n        })}\n        data-l10n-attrs=\"value\"\n        style=${`background-image: url(${iconURL})`}\n      />\n    `;\n  }\n\n  customFilePathInputTemplate() {\n    let filename = this._newLabel;\n    let iconURL = this._newIconURL || this.#placeholderIconURL;\n\n    return html`\n      <input\n        id=\"backup-location-filepicker-input-custom\"\n        class=\"backup-location-filepicker-input\"\n        type=\"text\"\n        readonly\n        value=${filename}\n        style=${`background-image: url(${iconURL})`}\n      />\n    `;\n  }\n\n  allOptionsTemplate() {\n    return html`\n      <fieldset id=\"all-controls\">\n        <div id=\"backup-location-controls\">\n          <label\n            id=\"backup-location-label\"\n            for=\"backup-location-filepicker-input\"\n            data-l10n-id=\"turn-on-scheduled-backups-location-label\"\n          ></label>\n          <div id=\"backup-location-filepicker\">\n            ${!this._newPath\n              ? this.defaultFilePathInputTemplate()\n              : this.customFilePathInputTemplate()}\n            <moz-button\n              id=\"backup-location-filepicker-button\"\n              @click=${this.handleChooseLocation}\n              data-l10n-id=\"turn-on-scheduled-backups-location-choose-button\"\n              aria-controls=\"backup-location-filepicker-input\"\n            ></moz-button>\n          </div>\n        </div>\n\n        <fieldset id=\"sensitive-data-controls\">\n          <div id=\"sensitive-data-checkbox\">\n            <label\n              id=\"sensitive-data-checkbox-label\"\n              for=\"sensitive-data-checkbox-input\"\n              aria-controls=\"passwords\"\n              aria-expanded=${this._showPasswordOptions}\n            >\n              <input\n                id=\"sensitive-data-checkbox-input\"\n                value=${this._showPasswordOptions}\n                @click=${this.handleTogglePasswordOptions}\n                type=\"checkbox\"\n              />\n              <span\n                id=\"sensitive-data-checkbox-span\"\n                data-l10n-id=\"turn-on-scheduled-backups-encryption-label\"\n              ></span>\n            </label>\n            <span\n              class=\"text-deemphasized\"\n              data-l10n-id=\"turn-on-scheduled-backups-encryption-description\"\n            ></span>\n          </div>\n\n          ${this._showPasswordOptions ? this.passwordsTemplate() : null}\n        </fieldset>\n      </fieldset>\n    `;\n  }\n\n  passwordsTemplate() {\n    return html`\n      <password-validation-inputs\n        id=\"passwords\"\n        .supportBaseLink=${this.supportBaseLink}\n      ></password-validation-inputs>\n    `;\n  }\n\n  contentTemplate() {\n    return html`\n      <form\n        id=\"backup-turn-on-scheduled-wrapper\"\n        aria-labelledby=\"backup-turn-on-scheduled-header\"\n        aria-describedby=\"backup-turn-on-scheduled-description\"\n      >\n        <h1\n          id=\"backup-turn-on-scheduled-header\"\n          class=\"heading-medium\"\n          data-l10n-id=\"turn-on-scheduled-backups-header\"\n        ></h1>\n        <main id=\"backup-turn-on-scheduled-content\">\n          <div id=\"backup-turn-on-scheduled-description\">\n            <span\n              id=\"backup-turn-on-scheduled-description-span\"\n              data-l10n-id=\"turn-on-scheduled-backups-description\"\n            ></span>\n            <!--TODO: finalize support page links (bug 1900467)-->\n            <a\n              id=\"backup-turn-on-scheduled-learn-more-link\"\n              is=\"moz-support-link\"\n              support-page=\"todo-backup\"\n              data-l10n-id=\"turn-on-scheduled-backups-support-link\"\n            ></a>\n          </div>\n          ${this.allOptionsTemplate()}\n        </main>\n\n        <moz-button-group id=\"backup-turn-on-scheduled-button-group\">\n          <moz-button\n            id=\"backup-turn-on-scheduled-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"turn-on-scheduled-backups-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"backup-turn-on-scheduled-confirm-button\"\n            form=\"backup-turn-on-scheduled-wrapper\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=\"turn-on-scheduled-backups-confirm-button\"\n            ?disabled=${this._showPasswordOptions && !this._passwordsMatch}\n          ></moz-button>\n        </moz-button-group>\n      </form>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__turnonscheduledbackupsStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"turn-on-scheduled-backups\", TurnOnScheduledBackups);\n"],"names":[],"sourceRoot":""}