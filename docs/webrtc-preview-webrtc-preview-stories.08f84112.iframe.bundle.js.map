{"version":3,"file":"webrtc-preview-webrtc-preview-stories.08f84112.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACtLA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../webrtc/content/webrtc-preview/webrtc-preview.stories.mjs","webpack:///../webrtc/content/webrtc-preview/webrtc-preview.mjs","webpack:///../../../toolkit/content/widgets/moz-card/moz-card.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\nimport \"chrome://global/content/elements/moz-card.mjs\";\nimport \"./webrtc-preview.mjs\";\n\nwindow.MozXULElement.insertFTLIfNeeded(\"browser/webrtc-preview.ftl\");\n\nexport default {\n  title: \"Domain-specific UI Widgets/WebRTC/Preview\",\n  component: \"webrtc-preview\",\n  argTypes: {\n    deviceId: {\n      control: \"text\",\n    },\n    mediaSource: {\n      control: \"select\",\n      options: [\"camera\", \"screen\", \"window\", \"browser\"],\n    },\n    showPreviewControlButtons: {\n      control: {\n        type: \"boolean\",\n      },\n    },\n  },\n};\n\nconst Template = (args, context) => {\n  // Get deviceId from loaded data if available\n  const deviceId = context?.loaded?.deviceId || args.deviceId;\n\n  // If deviceId is not available show an error message.\n  if (!deviceId) {\n    return html`\n      <moz-card style=\"position: relative; width: 25rem;\">\n        <div style=\"padding: 1rem; text-align: center;\">\n          No device or no permission granted.\n        </div>\n      </moz-card>\n    `;\n  }\n\n  const element = html`\n    <div style=\"position: relative; width: 25rem;\">\n      <webrtc-preview\n        .deviceId=${deviceId}\n        .mediaSource=${args.mediaSource}\n        .showPreviewControlButtons=${args.showPreviewControlButtons}\n      ></webrtc-preview>\n    </div>\n  `;\n\n  return element;\n};\n\nconst getDeviceId = async () => {\n  try {\n    // Request device access - this will show the permission prompt / device\n    // picker to the user\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      mediaSource: \"camera\",\n    });\n\n    // Get the video track to extract the device ID\n    const videoTrack = stream.getVideoTracks()[0];\n    const deviceId = videoTrack.getSettings().deviceId;\n\n    // Stop the stream since we only needed it to get the device ID\n    stream.getTracks().forEach(track => track.stop());\n\n    return deviceId || \"\";\n  } catch (error) {\n    console.warn(\"Could not get device:\", error);\n    return \"\";\n  }\n};\n\nexport const Camera = Template.bind({});\nCamera.args = {\n  deviceId: \"\",\n  mediaSource: \"camera\",\n  showPreviewControlButtons: true,\n};\nCamera.loaders = [\n  async () => {\n    const deviceId = await getDeviceId();\n    return { deviceId };\n  },\n];\nCamera.play = async ({ args, loaded }) => {\n  args.deviceId = loaded.deviceId;\n};\n","import __chrome_styles_loader__webrtcpreviewStyles from \"browser/components/webrtc/content/webrtc-preview/webrtc-preview.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"browser/webrtc-preview.ftl\");\n\nexport class WebRTCPreview extends MozLitElement {\n  static properties = {\n    // The ID of the device to preview.\n    deviceId: String,\n    // The media source type to preview.\n    mediaSource: String,\n    // Whether to show the preview control buttons.\n    showPreviewControlButtons: Boolean,\n\n    // Whether the preview is currently active.\n    _previewActive: { type: Boolean, state: true },\n    _loading: { type: Boolean, state: true },\n  };\n\n  static queries = {\n    videoEl: \"video\",\n  };\n\n  // The stream object for the preview. Only set when the preview is active.\n  #stream = null;\n\n  constructor() {\n    super();\n\n    // By default hide the start preview button.\n    this.showPreviewControlButtons = false;\n\n    this._previewActive = false;\n    this._loading = false;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.stopPreview();\n  }\n\n  /**\n   * Start the preview.\n   *\n   * @param {object} options - The options for the preview.\n   * @param {string} [options.deviceId = null] - The device ID of the camera to\n   * use. If null the last used device will be used.\n   * @param {string} [options.mediaSource = null] - The media source to use. If\n   * null the last used media source will be used.\n   * @param {boolean} [options.showPreviewControlButtons = null] - Whether to\n   * show the preview control buttons. If null the last used value will be used.\n   */\n  async startPreview({\n    deviceId = null,\n    mediaSource = null,\n    showPreviewControlButtons = null,\n  } = {}) {\n    if (deviceId != null) {\n      this.deviceId = deviceId;\n    }\n    if (mediaSource != null) {\n      this.mediaSource = mediaSource;\n    }\n    if (showPreviewControlButtons != null) {\n      this.showPreviewControlButtons = showPreviewControlButtons;\n    }\n\n    if (this.deviceId == null) {\n      throw new Error(\"Missing deviceId\");\n    }\n\n    // Stop any existing preview.\n    this.stopPreview();\n\n    this._loading = true;\n    this._previewActive = true;\n\n    // Use the same constraints for both camera and screen share preview.\n    let constraints = {\n      video: {\n        mediaSource: this.mediaSource,\n        deviceId: { exact: this.deviceId },\n        frameRate: 30,\n        width: 1280,\n        height: 720,\n      },\n    };\n\n    let stream;\n    let currentDeviceId = this.deviceId;\n\n    try {\n      stream = await navigator.mediaDevices.getUserMedia(constraints);\n    } catch (error) {\n      this._loading = false;\n      if (\n        error.name == \"OverconstrainedError\" &&\n        error.constraint == \"deviceId\"\n      ) {\n        // Source has disappeared since enumeration, which can happen.\n        // No preview.\n        this.stopPreview();\n        return;\n      }\n      console.error(`error in preview: ${error.message} ${error.constraint}`);\n    }\n\n    if (this.deviceId != currentDeviceId) {\n      this._loading = false;\n      // If the deviceId changed while we were waiting for gUM, e.g. because the user selected a different device, restart the preview.\n      stream.getTracks().forEach(t => t.stop());\n      this.startPreview();\n      return;\n    }\n\n    this.videoEl.srcObject = stream;\n    this.#stream = stream;\n  }\n\n  /**\n   * Stop the preview.\n   */\n  stopPreview() {\n    // We might interrupt an in-progress load. Make sure we don't show a loading\n    // state.\n    this._loading = false;\n\n    // Stop any existing playback.\n    this.#stream?.getTracks().forEach(t => t.stop());\n    this.#stream = null;\n    if (this.videoEl) {\n      this.videoEl.srcObject = null;\n    }\n\n    this._previewActive = false;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__webrtcpreviewStyles}\"\n      />\n      <div id=\"preview-container\">\n        <video\n          autoplay\n          tabindex=\"-1\"\n          @play=${() => (this._loading = false)}\n        ></video>\n        <moz-button\n          id=\"show-preview-button\"\n          class=\"centered\"\n          data-l10n-id=\"webrtc-share-preview-button-show\"\n          @click=${() => this.startPreview()}\n          ?hidden=${this.deviceId == null ||\n          !this.showPreviewControlButtons ||\n          this._previewActive}\n        ></moz-button>\n        <img\n          id=\"loading-indicator\"\n          class=\"centered\"\n          src=\"chrome://global/skin/icons/loading.svg\"\n          alt=\"Loading\"\n          ?hidden=${!this._loading}\n        />\n      </div>\n      <moz-button\n        id=\"stop-preview-button\"\n        data-l10n-id=\"webrtc-share-preview-button-hide\"\n        @click=${() => this.stopPreview()}\n        ?hidden=${!this.showPreviewControlButtons || !this._previewActive}\n      ></moz-button>\n    `;\n  }\n}\n\ncustomElements.define(\"webrtc-preview\", WebRTCPreview);\n","import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible. You can use the \"expanded\" attribute to force the accordion\n * card to show its content on initial render.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} iconSrc - Path to the icon that should be displayed in the card.\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @property {boolean} expanded - A flag to indicate whether the card is\n *  expanded or not. Can be used to expand the content section of the\n *  accordion card on initial render.\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentEl: \"#content\",\n    summaryEl: \"summary\",\n    contentSlotEl: \"#content-slot\",\n  };\n\n  static properties = {\n    heading: { type: String, fluent: true },\n    iconSrc: { type: String },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.expanded = false;\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\" part=\"moz-card-heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          !!this.iconSrc,\n          () =>\n            html`<img\n              id=\"heading-icon\"\n              src=${this.iconSrc}\n              role=\"presentation\"\n            />`\n        )}\n        <span id=\"heading\" title=${ifDefined(this.heading)} part=\"heading\"\n          >${this.heading}</span\n        >\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details\n          id=\"moz-card-details\"\n          @toggle=${this.onToggle}\n          ?open=${this.expanded}\n        >\n          <summary part=\"summary\">${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot id=\"content-slot\"></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      <div id=\"moz-card-details\">\n        ${this.headingTemplate()}\n        <div id=\"content\" aria-describedby=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  onToggle() {\n    this.expanded = this.detailsEl.open;\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n"],"names":[],"sourceRoot":""}