{"version":3,"file":"356.37cf184b.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-box-group/moz-box-group.mjs"],"sourcesContent":["import __chrome_styles_loader__mozboxgroupStyles from \"toolkit/content/widgets/moz-box-group/moz-box-group.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, staticHtml, literal } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\nexport const GROUP_TYPES = {\n  list: \"list\",\n  reorderable: \"reorderable-list\",\n};\n\n/**\n * An element used to group combinations of moz-box-item, moz-box-link, and\n * moz-box-button elements and provide the expected styles.\n *\n * @tagname moz-box-group\n * @property {string} type\n *   The type of the group, either \"list\", \"reorderable-list\", or undefined.\n *   Note that \"reorderable-list\" only works with moz-box-item elements for now.\n * @slot default - Slot for rendering various moz-box-* elements.\n * @slot <index> - Slots used to assign moz-box-* elements to <li> elements when\n *   the group is type=\"list\".\n */\nexport default class MozBoxGroup extends MozLitElement {\n  #tabbable = true;\n\n  static properties = {\n    type: { type: String },\n    listItems: { type: Array, state: true },\n  };\n\n  static queries = {\n    reorderableList: \"moz-reorderable-list\",\n  };\n\n  constructor() {\n    super();\n    this.listItems = [];\n  }\n\n  contentTemplate() {\n    if (this.type == GROUP_TYPES.reorderable) {\n      return html`<moz-reorderable-list\n        itemselector=\"moz-box-item\"\n        dragselector=\".handle\"\n        @reorder=${this.handleReorder}\n      >\n        ${this.slotTemplate()}\n      </moz-reorderable-list>`;\n    }\n    return this.slotTemplate();\n  }\n\n  slotTemplate() {\n    if (this.type == GROUP_TYPES.list || this.type == GROUP_TYPES.reorderable) {\n      let listTag =\n        this.type == GROUP_TYPES.reorderable ? literal`ol` : literal`ul`;\n      return staticHtml`<${listTag}\n          class=\"list\"\n          aria-orientation=\"vertical\"\n          @keydown=${this.handleKeydown}\n          @focusin=${this.handleFocus}\n          @focusout=${this.handleBlur}\n        >\n          ${this.listItems.map((_, i) => {\n            return html`<li>\n              <slot name=${i}></slot>\n            </li> `;\n          })}\n        </${listTag}>\n        <slot hidden @slotchange=${this.updateItems}></slot>`;\n    }\n    return html`<slot></slot>`;\n  }\n\n  handleReorder(event) {\n    let { draggedElement, targetElement, position } = event.detail;\n    let parent = targetElement.parentNode;\n    let moveBefore = position === -1;\n\n    if (moveBefore) {\n      parent.insertBefore(draggedElement, targetElement);\n    } else {\n      parent.insertBefore(draggedElement, targetElement.nextElementSibling);\n    }\n\n    draggedElement.focus();\n    this.updateItems();\n  }\n\n  handleKeydown(event) {\n    if (\n      this.type == GROUP_TYPES.reorderable &&\n      event.originalTarget == event.target.handleEl\n    ) {\n      let detail = this.reorderableList.evaluateKeyDownEvent(event);\n      if (detail) {\n        event.stopPropagation();\n        this.handleReorder({ detail });\n        return;\n      }\n    }\n\n    let positionAttr =\n      event.target.getAttribute(\"position\") ??\n      // handles the case where an interactive element is nested in a moz-box-item\n      event.target.closest(\"moz-box-item\").getAttribute(\"position\");\n    let currentPosition = parseInt(positionAttr);\n\n    switch (event.key) {\n      case \"Down\":\n      case \"ArrowDown\": {\n        let nextItem = this.listItems[currentPosition + 1];\n        nextItem?.focus(event);\n        break;\n      }\n      case \"Up\":\n      case \"ArrowUp\": {\n        let prevItem = this.listItems[currentPosition - 1];\n        prevItem?.focus(event);\n        break;\n      }\n    }\n  }\n\n  handleFocus() {\n    if (this.#tabbable) {\n      this.#tabbable = false;\n      this.listItems.forEach(item => {\n        item.setAttribute(\"tabindex\", \"-1\");\n      });\n    }\n  }\n\n  handleBlur() {\n    if (!this.#tabbable) {\n      this.#tabbable = true;\n      this.listItems.forEach(item => {\n        item.removeAttribute(\"tabindex\");\n      });\n    }\n  }\n\n  updateItems() {\n    let boxElements = this.querySelectorAll(\n      \":is(moz-box-item, moz-box-button, moz-box-link):not([slot='header'], [slot='footer'])\"\n    );\n    this.listItems = Array.from(boxElements);\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozboxgroupStyles}\"\n      />\n      <slot name=\"header\"></slot>\n      ${this.contentTemplate()}\n      <slot name=\"footer\"></slot>\n    `;\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has(\"listItems\") && this.listItems.length) {\n      this.listItems.forEach((item, i) => {\n        item.slot = i;\n        item.setAttribute(\"position\", i);\n      });\n    }\n  }\n}\ncustomElements.define(\"moz-box-group\", MozBoxGroup);\n"],"names":[],"sourceRoot":""}