{"version":3,"file":"moz-toggle-moz-toggle-stories.c5600149.iframe.bundle.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1TA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAKA;AAQA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://browser-storybook/../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-support-link/moz-support-link.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-toggle/moz-toggle.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-toggle/moz-toggle.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.formatAccessKey();\n      }).observe(this, { characterData: true, childList: true, subtree: true });\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#observer.disconnect();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozSupportLink.ftl\");\n\n/**\n * An extension of the anchor element that helps create links to Mozilla's\n * support documentation. This should be used for SUMO links only - other \"Learn\n * more\" links can use the regular anchor element.\n *\n * @tagname moz-support-link\n * @attribute {string} support-page - Short-hand string from SUMO to the specific support page.\n * @attribute {string} utm-content - UTM parameter for a URL, if it is an AMO URL.\n * @attribute {string} data-l10n-id - Fluent ID used to generate the text content.\n */\nexport default class MozSupportLink extends HTMLAnchorElement {\n  static SUPPORT_URL = \"https://www.mozilla.org/\";\n  static get observedAttributes() {\n    return [\"support-page\", \"utm-content\"];\n  }\n\n  /**\n   * Handles setting up the SUPPORT_URL preference getter.\n   * Without this, the tests for this component may not behave\n   * as expected.\n   * @private\n   * @memberof MozSupportLink\n   */\n  #register() {\n    if (window.document.nodePrincipal?.isSystemPrincipal) {\n      ChromeUtils.defineESModuleGetters(MozSupportLink, {\n        BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n      });\n\n      // eslint-disable-next-line no-shadow\n      let { XPCOMUtils } = window.XPCOMUtils\n        ? window\n        : ChromeUtils.importESModule(\n            \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n          );\n      XPCOMUtils.defineLazyPreferenceGetter(\n        MozSupportLink,\n        \"SUPPORT_URL\",\n        \"app.support.baseURL\",\n        \"\",\n        null,\n        val => Services.urlFormatter.formatURL(val)\n      );\n    } else if (!window.IS_STORYBOOK) {\n      MozSupportLink.SUPPORT_URL = window.RPMGetFormatURLPref(\n        \"app.support.baseURL\"\n      );\n    }\n  }\n\n  connectedCallback() {\n    this.#register();\n    this.#setHref();\n    this.setAttribute(\"target\", \"_blank\");\n    this.addEventListener(\"click\", this);\n    if (\n      !this.getAttribute(\"data-l10n-id\") &&\n      !this.getAttribute(\"data-l10n-name\") &&\n      !this.childElementCount\n    ) {\n      document.l10n.setAttributes(this, \"moz-support-link-text\");\n    }\n    document.l10n.translateFragment(this);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"click\", this);\n  }\n\n  handleEvent(e) {\n    if (e.type == \"click\") {\n      if (window.openTrustedLinkIn) {\n        let where = MozSupportLink.BrowserUtils.whereToOpenLink(e, false, true);\n        if (where == \"current\") {\n          where = \"tab\";\n        }\n        e.preventDefault();\n        openTrustedLinkIn(this.href, where);\n      }\n    }\n  }\n\n  attributeChangedCallback(attrName) {\n    if (attrName === \"support-page\" || attrName === \"utm-content\") {\n      this.#setHref();\n    }\n  }\n\n  #setHref() {\n    let supportPage = this.getAttribute(\"support-page\") ?? \"\";\n    let base = MozSupportLink.SUPPORT_URL + supportPage;\n    this.href = this.hasAttribute(\"utm-content\")\n      ? formatUTMParams(this.getAttribute(\"utm-content\"), base)\n      : base;\n  }\n}\ncustomElements.define(\"moz-support-link\", MozSupportLink, { extends: \"a\" });\n\n/**\n * Adds UTM parameters to a given URL, if it is an AMO URL.\n *\n * @param {string} contentAttribute\n *        Identifies the part of the UI with which the link is associated.\n * @param {string} url\n * @returns {string}\n *          The url with UTM parameters if it is an AMO URL.\n *          Otherwise the url in unmodified form.\n */\nexport function formatUTMParams(contentAttribute, url) {\n  if (!contentAttribute) {\n    return url;\n  }\n  let parsedUrl = new URL(url);\n  let domain = `.${parsedUrl.hostname}`;\n  if (\n    !domain.endsWith(\".mozilla.org\") &&\n    // For testing: addons-dev.allizom.org and addons.allizom.org\n    !domain.endsWith(\".allizom.org\")\n  ) {\n    return url;\n  }\n\n  parsedUrl.searchParams.set(\"utm_source\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_medium\", \"firefox-browser\");\n  parsedUrl.searchParams.set(\"utm_content\", contentAttribute);\n  return parsedUrl.href;\n}\n","import __chrome_styles_loader__moztoggleStyles from \"toolkit/content/widgets/moz-toggle/moz-toggle.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at htp://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * A simple toggle element that can be used to switch between two states.\n *\n * @tagname moz-toggle\n * @property {boolean} pressed - Whether or not the element is pressed.\n * @property {boolean} disabled - Whether or not the element is disabled.\n * @property {string} label - The label text.\n * @property {string} description - The description text.\n * @property {string} ariaLabel\n *  The aria-label text for cases where there is no visible label.\n * @slot support-link - Used to append a moz-support-link to the description.\n * @fires toggle\n *  Custom event indicating that the toggle's pressed state has changed.\n */\nexport default class MozToggle extends MozLitElement {\n  static properties = {\n    pressed: { type: Boolean, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    label: { type: String },\n    description: { type: String },\n    ariaLabel: { type: String, attribute: \"aria-label\" },\n    accessKey: { type: String, mapped: true },\n  };\n\n  static get queries() {\n    return {\n      buttonEl: \"#moz-toggle-button\",\n      labelEl: \"#moz-toggle-label\",\n      descriptionEl: \"#moz-toggle-description\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.pressed = false;\n    this.disabled = false;\n  }\n\n  handleClick() {\n    this.pressed = !this.pressed;\n    this.dispatchOnUpdateComplete(\n      new CustomEvent(\"toggle\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  // Delegate clicks on the host to the input element\n  click() {\n    this.buttonEl.click();\n  }\n\n  // Delegate focus to the input element\n  focus() {\n    this.buttonEl.focus();\n  }\n\n  descriptionTemplate() {\n    if (this.description) {\n      return html`\n        <p\n          id=\"moz-toggle-description\"\n          class=\"description-wrapper text-deemphasized\"\n          part=\"description\"\n        >\n          ${this.description} ${this.supportLinkTemplate()}\n        </p>\n      `;\n    }\n    return \"\";\n  }\n\n  supportLinkTemplate() {\n    return html` <slot name=\"support-link\"></slot> `;\n  }\n\n  buttonTemplate() {\n    const { pressed, disabled, description, ariaLabel, handleClick } = this;\n    return html`\n      <button\n        id=\"moz-toggle-button\"\n        part=\"button\"\n        type=\"button\"\n        class=\"toggle-button\"\n        ?disabled=${disabled}\n        aria-pressed=${pressed}\n        aria-label=${ifDefined(ariaLabel ?? undefined)}\n        aria-describedby=${ifDefined(\n          description ? \"moz-toggle-description\" : undefined\n        )}\n        accesskey=${ifDefined(this.accessKey)}\n        @click=${handleClick}\n      ></button>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__moztoggleStyles}\"\n      />\n      ${this.label\n        ? html`\n            <label\n              is=\"moz-label\"\n              id=\"moz-toggle-label\"\n              part=\"label\"\n              for=\"moz-toggle-button\"\n              shownaccesskey=${ifDefined(this.accessKey)}\n            >\n              <span>\n                ${this.label}\n                ${!this.description ? this.supportLinkTemplate() : \"\"}\n              </span>\n              ${this.buttonTemplate()}\n            </label>\n          `\n        : this.buttonTemplate()}\n      ${this.descriptionTemplate()}\n    `;\n  }\n}\ncustomElements.define(\"moz-toggle\", MozToggle);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport \"./moz-toggle.mjs\";\nimport \"../moz-support-link/moz-support-link.mjs\";\n\nexport default {\n  title: \"UI Widgets/Toggle\",\n  component: \"moz-toggle\",\n  parameters: {\n    status: \"stable\",\n    actions: {\n      handles: [\"toggle\"],\n    },\n    fluent: `\nmoz-toggle-aria-label =\n  .aria-label = This is the aria-label\nmoz-toggle-label =\n  .label = This is the label\nmoz-toggle-description =\n  .label = This is the label\n  .description = This is the description.\n    `,\n  },\n};\n\nconst Template = ({\n  pressed,\n  disabled,\n  label,\n  description,\n  ariaLabel,\n  l10nId,\n  hasSupportLink,\n  accessKey,\n}) => html`\n  <div style=\"max-width: 400px\">\n    <moz-toggle\n      ?pressed=${pressed}\n      ?disabled=${disabled}\n      label=${ifDefined(label)}\n      description=${ifDefined(description)}\n      aria-label=${ifDefined(ariaLabel)}\n      data-l10n-id=${ifDefined(l10nId)}\n      data-l10n-attrs=\"aria-label, description, label\"\n      accesskey=${ifDefined(accessKey)}\n    >\n      ${hasSupportLink\n        ? html`\n            <a\n              is=\"moz-support-link\"\n              support-page=\"addons\"\n              slot=\"support-link\"\n            ></a>\n          `\n        : \"\"}\n    </moz-toggle>\n  </div>\n`;\n\nexport const Toggle = Template.bind({});\nToggle.args = {\n  pressed: true,\n  disabled: false,\n  l10nId: \"moz-toggle-aria-label\",\n};\n\nexport const ToggleDisabled = Template.bind({});\nToggleDisabled.args = {\n  ...Toggle.args,\n  disabled: true,\n};\n\nexport const WithLabel = Template.bind({});\nWithLabel.args = {\n  pressed: true,\n  disabled: false,\n  l10nId: \"moz-toggle-label\",\n  hasSupportLink: false,\n  accessKey: \"h\",\n};\n\nexport const WithDescription = Template.bind({});\nWithDescription.args = {\n  ...WithLabel.args,\n  l10nId: \"moz-toggle-description\",\n};\n\nexport const WithSupportLink = Template.bind({});\nWithSupportLink.args = {\n  ...WithDescription.args,\n  hasSupportLink: true,\n};\n"],"names":[],"sourceRoot":""}