{"version":3,"file":"components-login-form-login-form-stories.a20e6ab2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AC7EA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACzQA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA","sources":["webpack:///../aboutlogins/content/components/input-field/input-field.mjs","webpack:///../aboutlogins/content/components/input-field/login-origin-field.mjs","webpack:///../aboutlogins/content/components/input-field/login-password-field.mjs","webpack:///../aboutlogins/content/components/input-field/login-username-field.mjs","webpack:///../aboutlogins/content/components/login-message-popup.mjs","webpack:///../../../toolkit/components/satchel/megalist/content/components/login-form/login-form.mjs","webpack:///../../../toolkit/components/satchel/megalist/content/components/login-form/login-form.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__inputfieldStyles from \"browser/components/aboutlogins/content/components/input-field/input-field.css\";\nimport __chrome_styles_loader__commonStyles from \"toolkit/themes/linux/global/in-content/common.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\n\nexport const stylesTemplate = () => html`\n  <link rel=\"stylesheet\" href=\"${__chrome_styles_loader__commonStyles}\" />\n  <link\n    rel=\"stylesheet\"\n    href=\"${__chrome_styles_loader__inputfieldStyles}\"\n  />\n`;\n\nexport const editableFieldTemplate = ({\n  type,\n  value,\n  disabled,\n  required,\n  onFocus,\n  onBlur,\n  labelL10nId,\n  noteL10nId,\n}) => html`\n  <label\n    for=\"input\"\n    class=\"field-label\"\n    data-l10n-id=${labelL10nId}\n    tabindex=\"-1\"\n  >\n  </label>\n  <input\n    id=\"input\"\n    class=\"input-field\"\n    type=${type}\n    value=${value}\n    aria-describedby=\"explainer\"\n    ?disabled=${disabled}\n    ?required=${required}\n    @focus=${onFocus}\n    @blur=${onBlur}\n  />\n  <span\n    id=\"explainer\"\n    role=\"note\"\n    class=\"explainer text-deemphasized\"\n    data-l10n-id=${ifDefined(noteL10nId)}\n  ></span>\n`;\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginOriginField extends MozLitElement {\n  static properties = {\n    value: { type: String, reflect: true },\n    name: { type: String },\n    readonly: { type: Boolean, reflect: true },\n    required: { type: Boolean, reflect: true },\n    onOriginClick: { type: Function },\n  };\n\n  static queries = {\n    input: \"input\",\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n  }\n\n  addHTTPSPrefix(e) {\n    const input = e.composedTarget;\n    let originValue = input.value.trim();\n    if (!originValue) {\n      return;\n    }\n\n    if (!originValue.match(/:\\/\\//)) {\n      input.value = \"https://\" + originValue;\n    }\n  }\n\n  get readonlyTemplate() {\n    return html`\n      <label\n        for=\"origin\"\n        class=\"field-label\"\n        data-l10n-id=\"login-item-origin-label\"\n      >\n      </label>\n      <a\n        id=\"origin\"\n        class=\"origin-input\"\n        dir=\"auto\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        name=\"origin\"\n        href=${this.value}\n        @click=${this.onOriginClick}\n      >\n        ${this.value}\n      </a>\n    `;\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${this.readonly\n        ? this.readonlyTemplate\n        : editableFieldTemplate({\n            type: \"url\",\n            value: this.value,\n            required: this.required,\n            labelL10nId: \"login-item-origin-label\",\n            noteL10nId: \"contextual-manager-passwords-origin-tooltip\",\n            onBlur: e => this.addHTTPSPrefix(e),\n          })}\n    `;\n  }\n}\n\ncustomElements.define(\"login-origin-field\", LoginOriginField);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginPasswordField extends MozLitElement {\n  static CONCEALED_PASSWORD_TEXT = \" \".repeat(8);\n\n  static properties = {\n    value: { type: String },\n    name: { type: String },\n    newPassword: { type: Boolean },\n    visible: { type: Boolean, reflect: true },\n    required: { type: Boolean, reflect: true },\n    onRevealClick: { type: Function },\n  };\n\n  static queries = {\n    input: \"input\",\n    label: \"label\",\n    button: \"moz-button\",\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"input\", e => {\n      this.value = e.composedTarget.value;\n    });\n  }\n\n  get #type() {\n    return this.visible ? \"text\" : \"password\";\n  }\n\n  get #password() {\n    return !this.newPassword && !this.visible\n      ? LoginPasswordField.CONCEALED_PASSWORD_TEXT\n      : this.value;\n  }\n\n  #revealIconSrc(concealed) {\n    return concealed\n      ? \"chrome://browser/content/aboutlogins/icons/password-hide.svg\"\n      : \"chrome://browser/content/aboutlogins/icons/password.svg\";\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has(\"visible\") && !changedProperties.visible) {\n      this.input.selectionStart = this.value.length;\n    }\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${editableFieldTemplate({\n        type: this.#type,\n        value: this.#password,\n        labelId: \"login-item-password-label\",\n        disabled: this.readonly,\n        required: this.required,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        labelL10nId: \"login-item-password-label\",\n        noteL10nId: \"contextual-manager-passwords-password-tooltip\",\n      })}\n      <moz-button\n        data-l10n-id=${this.visible\n          ? \"login-item-password-conceal-checkbox\"\n          : \"login-item-password-reveal-checkbox\"}\n        class=\"reveal-password-button\"\n        type=\"icon ghost\"\n        iconSrc=${this.#revealIconSrc(this.visible)}\n        @mousedown=${() => {\n          /* Programmatically focus the button on mousedown instead of waiting for focus on click\n           * because the blur event occurs before the click event.\n           */\n          this.button.focus();\n        }}\n        @click=${this.onRevealClick}\n      ></moz-button>\n    `;\n  }\n\n  handleFocus() {\n    if (this.visible) {\n      return;\n    }\n    this.onRevealClick();\n  }\n\n  handleBlur(ev) {\n    if (ev.relatedTarget === this.button || ev.relatedTarget === this.label) {\n      return;\n    }\n    if (!this.visible) {\n      return;\n    }\n    this.onRevealClick();\n  }\n}\n\ncustomElements.define(\"login-password-field\", LoginPasswordField);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { editableFieldTemplate, stylesTemplate } from \"./input-field.mjs\";\n\nclass LoginUsernameField extends MozLitElement {\n  static properties = {\n    value: { type: String, reflect: true },\n    name: { type: String },\n    readonly: { type: Boolean, reflect: true },\n    required: { type: Boolean, reflect: true },\n  };\n\n  static queries = {\n    input: \"input\",\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n  }\n\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${editableFieldTemplate({\n        type: \"text\",\n        value: this.value,\n        disabled: this.readonly,\n        required: this.required,\n        labelL10nId: \"login-item-username-label\",\n        noteL10nId: \"contextual-manager-passwords-username-tooltip\",\n      })}\n    `;\n  }\n}\n\ncustomElements.define(\"login-username-field\", LoginUsernameField);\n","import __chrome_styles_loader__loginmessagepopupStyles from \"browser/components/aboutlogins/content/components/login-message-popup.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nconst stylesTemplate = () =>\n  html` <link\n    rel=\"stylesheet\"\n    href=\"${__chrome_styles_loader__loginmessagepopupStyles}\"\n  />`;\n\nexport const MessagePopup = ({ l10nid, message, webTitle = \"\", role }) => {\n  return html` <div class=\"tooltip-container\" role=${ifDefined(role)}>\n    <div class=\"arrow-box\">\n      <p\n        class=\"tooltip-message\"\n        data-l10n-id=${ifDefined(l10nid)}\n        data-l10n-args=${JSON.stringify({ webTitle })}\n      >\n        ${ifDefined(message)}\n      </p>\n    </div>\n  </div>`;\n};\n\nexport class PasswordWarning extends MozLitElement {\n  static get properties() {\n    return {\n      isNewLogin: { type: Boolean, reflect: true },\n      webTitle: { type: String, reflect: true },\n      arrowDirection: { type: String },\n      message: { type: String },\n      role: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.isNewLogin = false;\n    this.arrowDirection = \"left\";\n  }\n  render() {\n    if (this.message) {\n      return html`${stylesTemplate()}\n      ${MessagePopup({\n        message: this.message,\n        role: this.role,\n      })}`;\n    }\n\n    return this.isNewLogin\n      ? html`${stylesTemplate()}\n        ${MessagePopup({\n          l10nid: \"about-logins-add-password-tooltip\",\n          role: this.role,\n        })}`\n      : html`${stylesTemplate()}\n        ${MessagePopup({\n          l10nid: \"about-logins-edit-password-tooltip\",\n          webTitle: this.webTitle,\n          role: this.role,\n        })}`;\n  }\n}\n\nexport class OriginWarning extends MozLitElement {\n  static get properties() {\n    return {\n      l10nId: { type: String },\n      message: { type: String },\n      arrowDirection: { type: String },\n      role: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.arrowDirection = \"left\";\n  }\n\n  render() {\n    return html`${stylesTemplate()}\n    ${MessagePopup({\n      l10nid: this.l10nId,\n      message: this.message,\n      role: this.role,\n    })}`;\n  }\n}\n\ncustomElements.define(\"password-warning\", PasswordWarning);\ncustomElements.define(\"origin-warning\", OriginWarning);\n","import __chrome_styles_loader__loginformStyles from \"toolkit/components/satchel/megalist/content/components/login-form/login-form.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, when } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/input-field/login-origin-field.mjs\";\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/input-field/login-username-field.mjs\";\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/input-field/login-password-field.mjs\";\n\n/* eslint-disable-next-line import/no-unassigned-import, mozilla/no-browser-refs-in-toolkit */\nimport \"chrome://browser/content/aboutlogins/components/login-message-popup.mjs\";\n\nexport class LoginForm extends MozLitElement {\n  static properties = {\n    type: { type: String, reflect: true },\n    onSaveClick: { type: Function },\n    onDeleteClick: { type: Function },\n    onClose: { type: Function },\n    onOriginClick: { type: Function },\n    originValue: { type: String },\n    usernameValue: { type: String },\n    passwordValue: { type: String },\n    passwordVisible: { type: Boolean },\n    onPasswordRevealClick: { type: Function },\n    _showDeleteCard: { type: Boolean, state: true },\n  };\n\n  static queries = {\n    formEl: \"form\",\n    originField: \"login-origin-field\",\n    usernameField: \"login-username-field\",\n    passwordField: \"login-password-field\",\n    originWarning: \"origin-warning\",\n    passwordWarning: \"password-warning\",\n  };\n\n  constructor() {\n    super();\n    this.originValue = \"\";\n    this.usernameValue = \"\";\n    this.passwordValue = \"\";\n    this._showDeleteCard = false;\n    this.onPasswordRevealClick = () => {\n      this.passwordVisible = !this.passwordVisible;\n    };\n  }\n\n  #removeWarning(warning) {\n    if (warning.classList.contains(\"invalid-input\")) {\n      warning.classList.remove(\"invalid-input\");\n    }\n  }\n\n  #shouldShowWarning(field, input, warning) {\n    if (!input.checkValidity()) {\n      // FIXME: for some reason checkValidity does not apply the :invalid style\n      // to the field. For now, we reset the input value to \"\" apply :invalid\n      // styling.\n      input.value = \"\";\n\n      input.focus();\n      warning.setAttribute(\"message\", input.validationMessage);\n      warning.classList.add(\"invalid-input\");\n      field.setAttribute(\"aria-describedby\", warning.id);\n      return true;\n    }\n\n    field.removeAttribute(\"aria-describedby\");\n    this.#removeWarning(warning);\n    return false;\n  }\n\n  onInput(e) {\n    const field = e.target;\n    const warning =\n      field.name === \"origin\" ? this.originWarning : this.passwordWarning;\n\n    if (field.input.checkValidity()) {\n      this.#removeWarning(warning);\n      field.removeAttribute(\"aria-describedby\");\n    }\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.#isFormValid()) {\n      return;\n    }\n\n    const loginForm = {\n      origin: this.originValue || this.originField.input.value,\n      username: this.usernameField.input.value.trim(),\n      password: this.passwordField.value,\n    };\n    this.onSaveClick(loginForm);\n  }\n\n  #isFormValid() {\n    let originError = false;\n    let passwordError = false;\n\n    passwordError = this.#shouldShowWarning(\n      this.passwordField,\n      this.passwordField.input,\n      this.passwordWarning\n    );\n\n    if (this.type !== \"edit\") {\n      originError = this.#shouldShowWarning(\n        this.originField,\n        this.originField.input,\n        this.originWarning\n      );\n    }\n\n    if (passwordError || originError) {\n      return false;\n    }\n\n    return true;\n  }\n\n  #toggleDeleteCard() {\n    this._showDeleteCard = !this._showDeleteCard;\n  }\n\n  #renderDeleteCard() {\n    return html` <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__loginformStyles}\"\n      />\n      <moz-card class=\"remove-login-card\">\n        <div class=\"remove-card-back\">\n          <moz-button\n            type=\"icon ghost\"\n            iconSrc=\"chrome://browser/skin/back.svg\"\n            @click=${this.#toggleDeleteCard}\n          >\n          </moz-button>\n          <p\n            data-l10n-id=\"contextual-manager-passwords-remove-login-card-back-message\"\n          ></p>\n        </div>\n        <div class=\"remove-card-text\">\n          <h3\n            data-l10n-id=\"contextual-manager-passwords-remove-login-card-title\"\n          ></h3>\n          <p\n            data-l10n-id=\"contextual-manager-passwords-remove-login-card-message\"\n          ></p>\n        </div>\n        <moz-button-group>\n          <moz-button\n            data-l10n-id=\"contextual-manager-passwords-remove-login-card-cancel-button\"\n            @click=${this.#toggleDeleteCard}\n          >\n          </moz-button>\n          <moz-button\n            type=\"destructive\"\n            data-l10n-id=\"contextual-manager-passwords-remove-login-card-remove-button\"\n            @click=${this.onDeleteClick}\n          >\n          </moz-button>\n        </moz-button-group>\n      </moz-card>`;\n  }\n\n  render() {\n    if (this._showDeleteCard) {\n      return this.#renderDeleteCard();\n    }\n\n    const heading =\n      this.type !== \"edit\"\n        ? \"contextual-manager-passwords-create-label\"\n        : \"contextual-manager-passwords-edit-label\";\n\n    return html`<link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__loginformStyles}\"\n      />\n      <moz-card>\n        ${when(\n          this.type === \"edit\",\n          () => html`\n            <div class=\"delete-login-button-container\">\n              <moz-button\n                class=\"delete-login-button\"\n                data-l10n-id=\"contextual-manager-passwords-remove-label\"\n                type=\"icon\"\n                iconSrc=\"chrome://global/skin/icons/delete.svg\"\n                @click=${this.#toggleDeleteCard}\n              ></moz-button>\n            </div>\n          `\n        )}\n\n        <form\n          role=\"region\"\n          aria-labelledby=\"moz-fieldset-id\"\n          @submit=${e => this.onSubmit(e)}\n        >\n          <moz-fieldset id=\"moz-fieldset-id\" data-l10n-id=${heading}>\n            <div class=\"field-container\">\n              <login-origin-field\n                name=\"origin\"\n                required\n                ?readonly=${this.type === \"edit\"}\n                value=${this.originValue}\n                @input=${e => this.onInput(e)}\n                .onOriginClick=${this.onOriginClick}\n              >\n              </login-origin-field>\n              <origin-warning\n                id=\"origin-alert\"\n                role=\"alert\"\n                arrowdirection=\"down\"\n              ></origin-warning>\n            </div>\n            <login-username-field\n              name=\"username\"\n              value=${this.usernameValue}\n            ></login-username-field>\n            <div class=\"field-container\">\n              <login-password-field\n                name=\"password\"\n                required\n                ?visible=${this.passwordVisible}\n                ?newPassword=${this.type !== \"edit\"}\n                .value=${this.passwordValue}\n                .onRevealClick=${this.onPasswordRevealClick}\n                @input=${e => this.onInput(e)}\n              ></login-password-field>\n              <password-warning\n                id=\"password-alert\"\n                role=\"alert\"\n                isNewLogin\n                arrowdirection=\"down\"\n              ></password-warning>\n            </div>\n            <moz-button-group>\n              <moz-button\n                data-l10n-id=\"login-item-cancel-button\"\n                @click=${this.onClose}\n              ></moz-button>\n              <moz-button\n                data-l10n-id=\"login-item-save-new-button\"\n                type=\"primary\"\n                @click=${() => this.formEl.requestSubmit()}\n              >\n              </moz-button>\n            </moz-button-group>\n          </moz-fieldset>\n        </form>\n      </moz-card>`;\n  }\n}\n\ncustomElements.define(\"login-form\", LoginForm);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\nimport \"./login-form.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Credential Management/Login Form\",\n  component: \"login-form\",\n};\n\n// eslint-disable-next-line mozilla/no-browser-refs-in-toolkit\nwindow.MozXULElement.insertFTLIfNeeded(\"browser/contextual-manager.ftl\");\n\nexport const AddLoginForm = () => html`<login-form type=\"add\"></login-form>`;\nexport const EditLoginForm = () => html`<login-form type=\"edit\"></login-form>`;\n"],"names":[],"sourceRoot":""}