/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import { html, styleMap } from "../vendor/lit.all.mjs";
import { MozLitElement } from "../lit-utils.mjs";

const NOW_THRESHOLD_MS = 91000;
const lazy = {};

/**
 * A tab item that displays favicon, title, url, and time of last access
 *
 * @tagname moz-tab-row
 * @property {Array} contextMenuItems - Items to include in the context menu
 * @property {Boolean} removeAfterOpen - True if the tab should be removed from SessionStore after opening
 * @property {Number} tabid - The tab ID for when the tab item.
 * @property {String} favicon - The favicon for the tab item.
 * @property {String} title - The title for the tab item.
 * @property {String} url - The url for the tab item.
 * @property {Number} time - The timestamp for when the tab was last accessed.
 */
export default class MozTabRow extends MozLitElement {
  constructor() {
    super();
    this.contextMenuItems = [];
  }

  static properties = {
    contextMenuItems: { type: Array },
    removeAfterOpen: { type: Boolean },
    favicon: { type: String },
    title: { type: String },
    url: { type: String },
    time: { type: Number },
  };

  static get queries() {
    return {
      mainEl: ".moz-tab-row-main",
      timeElements: { all: "span.moz-tab-row-time" },
      contextMenuBtnEl: "#moz-tab-row-context-menu-button",
    };
  }

  #register() {
    if (!window.IS_STORYBOOK) {
      XPCOMUtils.defineLazyGetter(lazy, "relativeTimeFormat", () => {
        return new Services.intl.RelativeTimeFormat(undefined, {
          style: "narrow",
        });
      });

      XPCOMUtils.defineLazyPreferenceGetter(
        lazy,
        "timeMsPref",
        "browser.tabs.firefox-view.updateTimeMs",
        NOW_THRESHOLD_MS,
        () => this.updateTime()
      );

      ChromeUtils.defineESModuleGetters(lazy, {
        BrowserUtils: "resource://gre/modules/BrowserUtils.sys.mjs",
        PlacesUIUtils: "resource:///modules/PlacesUIUtils.sys.mjs",
        SessionStore: "resource:///modules/sessionstore/SessionStore.sys.mjs",
      });
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.#register();
    this.intervalID = setInterval(() => this.updateTime(), lazy.timeMsPref);
  }

  // Use a relative URL in storybook to get faster reloads on style changes.
  static stylesheetUrl = window.IS_STORYBOOK
    ? "./moz-tab-list/moz-tab-list.css"
    : "chrome://global/content/elements/moz-tab-list.css";

  get fluentStrings() {
    if (!window.IS_STORYBOOK) {
      if (!this._fluentStrings) {
        this._fluentStrings = new Localization(
          ["toolkit/global/mozTabList.ftl"],
          true
        );
      }
    }
    return this._fluentStrings;
  }

  convertTimestamp(
    timestamp,
    fluentStrings,
    _nowThresholdMs = NOW_THRESHOLD_MS
  ) {
    if (!timestamp) {
      // It's marginally better to show nothing instead of "53 years ago"
      return "";
    } else if (window.IS_STORYBOOK) {
      return "Just now";
    }
    const elapsed = Date.now() - timestamp;
    let formattedTime;
    if (elapsed <= _nowThresholdMs) {
      // Use a different string for very recent timestamps
      formattedTime = fluentStrings.formatValueSync(
        "firefoxview-just-now-timestamp"
      );
    } else {
      formattedTime = lazy.relativeTimeFormat.formatBestUnit(
        new Date(timestamp)
      );
    }
    return formattedTime;
  }

  updateTime() {
    if (!window.IS_STORYBOOK) {
      for (let timeEl of this.timeElements) {
        timeEl.textContent = this.convertTimestamp(
          parseInt(timeEl.getAttribute("data-timestamp")),
          this.fluentStrings,
          lazy.timeMsPref
        );
      }
    }
  }

  formatURIForDisplay(uriString) {
    return !window.IS_STORYBOOK
      ? lazy.BrowserUtils.formatURIStringForDisplay(uriString)
      : uriString;
  }

  getImageUrl(icon, targetURI) {
    if (!window.IS_STORYBOOK) {
      return icon
        ? lazy.PlacesUIUtils.getImageURL(icon)
        : `page-icon:${targetURI}`;
    }
    return `chrome://global/skin/icons/defaultFavicon.svg`;
  }

  openTab(event) {
    if (!window.IS_STORYBOOK) {
      if (
        (event.type == "click" && !event.altKey) ||
        (event.type == "keydown" && event.code == "Enter") ||
        (event.type == "keydown" && event.code == "Space")
      ) {
        if (this.removeAfterOpen) {
          const item = event.target.closest(".moz-tab-row");
          const closedId = item.dataset.tabid;
          lazy.SessionStore.undoCloseById(closedId);
        } else {
          window.openTrustedLinkIn(this.url, "tab");
        }
      }
    }
  }

  toggleContextMenu(e) {
    const mozTabList = e.target.closest("moz-tab-list");
    mozTabList.menuOpen = !mozTabList.menuOpen;
    mozTabList
      .getRootNode()
      .querySelector("panel-list")
      .toggle(e);
  }

  render() {
    const {
      removeAfterOpen,
      tabid,
      favicon,
      getImageUrl,
      title,
      url,
      formatURIForDisplay,
      time,
      convertTimestamp,
      openTab,
      toggleContextMenu,
    } = this;
    return html`
      <link rel="stylesheet" href=${this.constructor.stylesheetUrl} />
      <div class="moz-tab-row" data-tabid=${tabid} tabindex="-1">
        <span
          role=${removeAfterOpen ? "button" : "link"}
          class="moz-tab-row-main"
          tabindex="0"
          @click=${e => openTab(e)}
          @keydown=${e => openTab(e)}
        >
          <span
            class="moz-tab-row-favicon icon"
            id="moz-tab-row-favicon"
            style=${styleMap({
              backgroundImage: `url(${getImageUrl(favicon, url)})`,
            })}
          ></span>
          <span class="moz-tab-row-title" id="moz-tab-row-title">
            ${title}
          </span>
          <span
            class="moz-tab-row-url"
            id="moz-tab-row-url"
            title=${url}
            data-l10n-id="mztabrow-tabs-list-tab-button"
            data-l10n-args=${JSON.stringify({ url })}
          >
            ${formatURIForDisplay(url)}
          </span>
          <span
            class="moz-tab-row-time"
            id="moz-tab-row-time"
            data-timestamp=${time}
          >
            ${convertTimestamp(time, this.fluentStrings)}
          </span>
        </span>
        <button
          class="moz-tab-row-context-menu-button icon"
          id="moz-tab-row-context-menu-button"
          aria-haspopup="true"
          }
          @click=${e => toggleContextMenu(e)}
        ></button>
      </li>
    `;
  }
}
customElements.define("moz-tab-row", MozTabRow);
