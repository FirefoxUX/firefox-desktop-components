{"version":3,"file":"login-command-button-stories.e23a1b54.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxsources":["webpack:///./stories/login-command-button.stories.mjs","webpack:///../aboutlogins/content/components/login-command-button.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"lit.all.mjs\";\n// Imported for side-effects.\nimport \"../../aboutlogins/content/components/login-command-button.mjs\";\n\nconst BUTTON_TYPES = {\n  Edit: \"login-item-edit-button\",\n  \"Copy Username\": \"login-item-copy-username-button-text\",\n  \"Copy Password\": \"login-item-copy-password-button-text\",\n  Remove: \"about-logins-login-item-remove-button\",\n};\n\nconst BUTTON_ICONS = {\n  Edit: \"chrome://global/skin/icons/edit.svg\",\n  \"Copy Username\": \"chrome://global/skin/icons/edit-copy.svg\",\n  \"Copy Password\": \"chrome://global/skin/icons/edit-copy.svg\",\n  Remove: \"chrome://global/skin/icons/delete.svg\",\n};\n\nconst BUTTON_VARIANT = {\n  Regular: \"\",\n  Danger: \"primary danger-button\",\n  Primary: \"primary\",\n  Icon: \"ghost-button icon-button\",\n};\n\nexport default {\n  title: \"Domain-specific UI Widgets/Credential Management/Command Button\",\n  component: \"login-command-button\",\n  argTypes: {\n    l10nId: {\n      options: Object.keys(BUTTON_TYPES),\n      mapping: BUTTON_TYPES,\n      control: { type: \"select\" },\n      defaultValue: \"Edit\",\n    },\n    icon: {\n      options: Object.keys(BUTTON_ICONS),\n      mapping: BUTTON_ICONS,\n      control: { type: \"select\" },\n      defaultValue: \"Edit\",\n    },\n    variant: {\n      options: Object.keys(BUTTON_VARIANT),\n      mapping: BUTTON_VARIANT,\n      control: { type: \"select\" },\n      defaultValue: \"Regular\",\n    },\n  },\n};\n\nwindow.MozXULElement.insertFTLIfNeeded(\"browser/aboutLogins.ftl\");\n\nconst Template = ({ onClick, l10nId, icon, variant, disabled, tooltip }) => {\n  return html`\n    <login-command-button\n      .onClick=${onClick}\n      .l10nId=${l10nId}\n      .icon=${icon}\n      .variant=${variant}\n      .disabled=${disabled}\n      .tooltip=${tooltip}\n    >\n    </login-command-button>\n  `;\n};\n\nexport const WorkingButton = Template.bind({});\nWorkingButton.args = {\n  onClick: () => alert(\"I work Woohoo!!\"),\n  l10nId: \"login-item-edit-button\",\n  icon: \"chrome://global/skin/icons/edit.svg\",\n  variant: \"\",\n  disabled: false,\n  tooltip: \"Lorem ipsum dolor\",\n};\n\nexport const DisabledButton = Template.bind({});\nDisabledButton.args = {\n  onClick: () => alert(\"I shouldn't be working...\"),\n  l10nId: \"login-item-edit-button\",\n  icon: \"chrome://global/skin/icons/edit.svg\",\n  variant: \"\",\n  disabled: true,\n  tooltip: \"Lorem ipsum dolor\",\n};\n","import __chrome_styles_loader__logincommandbuttonStyles from \"browser/components/aboutlogins/content/components/login-command-button.css\";\nimport __chrome_styles_loader__commonStyles from \"toolkit/themes/linux/global/in-content/common.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/*\n * Note: For now, to display the tooltip for a <login-command-button> you need to\n * use data-l10n-id attribute instead of the l10nId attribute in the tag.\n * Bug 1844869 will make an attempt to fix this.\n */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nexport const stylesTemplate = () =>\n  html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__commonStyles}\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__logincommandbuttonStyles}\"\n    />`;\n\nexport const LoginCommandButton = ({\n  onClick,\n  l10nId,\n  icon,\n  variant,\n  disabled,\n  buttonText,\n}) =>\n  html`<button\n    class=${variant}\n    data-l10n-id=${ifDefined(l10nId)}\n    ?disabled=${disabled}\n    @click=${ifDefined(onClick)}\n  >\n    <img src=${ifDefined(icon)} role=\"presentation\" />\n\n    <span data-l10n-id=${ifDefined(buttonText)}></span>\n  </button>`;\n\nexport class CreateLoginButton extends MozLitElement {\n  static get properties() {\n    return {\n      disabled: { type: Boolean, reflect: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.disabled = false;\n  }\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${LoginCommandButton({\n        l10nId: \"create-login-button\",\n        variant: \"icon-button\",\n        icon: \"chrome://global/skin/icons/plus.svg\",\n        disabled: this.disabled,\n      })}\n    `;\n  }\n}\n\nexport class EditButton extends MozLitElement {\n  static get properties() {\n    return {\n      disabled: { type: Boolean, reflect: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.disabled = false;\n  }\n  render() {\n    return html`\n      ${stylesTemplate()}\n      ${LoginCommandButton({\n        buttonText: \"login-item-edit-button\",\n        variant: \"ghost-button\",\n        icon: \"chrome://global/skin/icons/edit.svg\",\n        disabled: this.disabled,\n      })}\n    `;\n  }\n}\n\nexport class DeleteButton extends MozLitElement {\n  static get properties() {\n    return {\n      disabled: { type: Boolean, reflect: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.disabled = false;\n  }\n  render() {\n    return html` ${stylesTemplate()}\n    ${LoginCommandButton({\n      buttonText: \"about-logins-login-item-remove-button\",\n      variant: \"ghost-button\",\n      icon: \"chrome://global/skin/icons/delete.svg\",\n      disabled: this.disabled,\n    })}`;\n  }\n}\n\nexport class CopyUsernameButton extends MozLitElement {\n  static get properties() {\n    return {\n      copiedText: { type: Boolean, reflect: true },\n      disabled: { type: Boolean, reflect: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.copiedText = false;\n    this.disabled = false;\n  }\n  render() {\n    this.className = this.copiedText ? \"copied-button\" : \"copy-button\";\n    return html` ${stylesTemplate()}\n    ${when(\n      this.copiedText,\n      () =>\n        html`${LoginCommandButton({\n          buttonText: \"login-item-copied-username-button-text\",\n          icon: \"chrome://global/skin/icons/check.svg\",\n          disabled: this.disabled,\n        })}`,\n      () =>\n        html`${LoginCommandButton({\n          variant: \"text-button\",\n          buttonText: \"login-item-copy-username-button-text\",\n          disabled: this.disabled,\n        })}`\n    )}`;\n  }\n}\n\nexport class CopyPasswordButton extends MozLitElement {\n  static get properties() {\n    return {\n      copiedText: { type: Boolean, reflect: true },\n      disabled: { type: Boolean, reflect: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.copiedText = false;\n    this.disabled = false;\n  }\n  render() {\n    this.className = this.copiedText ? \"copied-button\" : \"copy-button\";\n    return html` ${stylesTemplate()}\n    ${when(\n      this.copiedText,\n      () =>\n        html`${LoginCommandButton({\n          buttonText: \"login-item-copied-password-button-text\",\n          icon: \"chrome://global/skin/icons/check.svg\",\n          disabled: this.disabled,\n        })}`,\n      () =>\n        html`${LoginCommandButton({\n          variant: \"text-button\",\n          buttonText: \"login-item-copy-password-button-text\",\n          disabled: this.disabled,\n        })}`\n    )}`;\n  }\n}\n\ncustomElements.define(\"copy-password-button\", CopyPasswordButton);\ncustomElements.define(\"copy-username-button\", CopyUsernameButton);\ncustomElements.define(\"delete-button\", DeleteButton);\ncustomElements.define(\"edit-button\", EditButton);\ncustomElements.define(\"create-login-button\", CreateLoginButton);\n"],"names":[],"sourceRoot":""}