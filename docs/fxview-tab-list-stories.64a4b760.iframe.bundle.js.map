{"version":3,"file":"fxview-tab-list-stories.64a4b760.iframe.bundle.js","mappingsjyBA;AAqsources":["webpack://browser-storybook/../firefoxview/fxview-tab-list.mjs","webpack://browser-storybook/../firefoxview/helpers.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-button/moz-button.mjs","webpack://browser-storybook/./stories/fxview-tab-list.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__fxviewtabrowStyles from \"browser/components/firefoxview/fxview-tab-row.css\";\nimport __chrome_styles_loader__fxviewtablistStyles from \"browser/components/firefoxview/fxview-tab-list.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  classMap,\n  html,\n  ifDefined,\n  repeat,\n  styleMap,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\nimport { escapeRegExp } from \"./helpers.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-button.mjs\";\n\nconst NOW_THRESHOLD_MS = 91000;\nconst FXVIEW_ROW_HEIGHT_PX = 32;\nconst lazy = {};\nlet XPCOMUtils;\n\nif (!window.IS_STORYBOOK) {\n  XPCOMUtils = ChromeUtils.importESModule(\n    \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n  ).XPCOMUtils;\n  XPCOMUtils.defineLazyPreferenceGetter(\n    lazy,\n    \"virtualListEnabledPref\",\n    \"browser.firefox-view.virtual-list.enabled\"\n  );\n  ChromeUtils.defineLazyGetter(lazy, \"relativeTimeFormat\", () => {\n    return new Services.intl.RelativeTimeFormat(undefined, {\n      style: \"narrow\",\n    });\n  });\n\n  ChromeUtils.defineESModuleGetters(lazy, {\n    BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n  });\n}\n\n/**\n * A list of clickable tab items\n *\n * @property {boolean} compactRows - Whether to hide the URL and date/time for each tab.\n * @property {string} dateTimeFormat - Expected format for date and/or time\n * @property {string} hasPopup - The aria-haspopup attribute for the secondary action, if required\n * @property {number} maxTabsLength - The max number of tabs for the list\n * @property {Array} tabItems - Items to show in the tab list\n * @property {string} searchQuery - The query string to highlight, if provided.\n * @property {string} searchInProgress - Whether a search has been initiated.\n * @property {string} secondaryActionClass - The class used to style the secondary action element\n * @property {string} tertiaryActionClass - The class used to style the tertiary action element\n */\nexport class FxviewTabListBase extends MozLitElement {\n  constructor() {\n    super();\n    window.MozXULElement.insertFTLIfNeeded(\"toolkit/branding/brandings.ftl\");\n    window.MozXULElement.insertFTLIfNeeded(\"browser/fxviewTabList.ftl\");\n    this.activeIndex = 0;\n    this.currentActiveElementId = \"fxview-tab-row-main\";\n    this.hasPopup = null;\n    this.dateTimeFormat = \"relative\";\n    this.maxTabsLength = 25;\n    this.tabItems = [];\n    this.compactRows = false;\n    this.searchInProgress = false;\n    this.updatesPaused = true;\n    this.#register();\n  }\n\n  static properties = {\n    activeIndex: { type: Number },\n    compactRows: { type: Boolean },\n    currentActiveElementId: { type: String },\n    dateTimeFormat: { type: String },\n    hasPopup: { type: String },\n    maxTabsLength: { type: Number },\n    tabItems: { type: Array },\n    updatesPaused: { type: Boolean },\n    searchQuery: { type: String },\n    searchInProgress: { type: Boolean },\n    secondaryActionClass: { type: String },\n    tertiaryActionClass: { type: String },\n  };\n\n  static queries = {\n    rowEls: {\n      all: \"fxview-tab-row\",\n    },\n    rootVirtualListEl: \"virtual-list\",\n  };\n\n  willUpdate(changes) {\n    this.activeIndex = Math.min(\n      Math.max(this.activeIndex, 0),\n      this.tabItems.length - 1\n    );\n\n    if (changes.has(\"dateTimeFormat\") || changes.has(\"updatesPaused\")) {\n      this.clearIntervalTimer();\n      if (\n        !this.updatesPaused &&\n        this.dateTimeFormat == \"relative\" &&\n        !window.IS_STORYBOOK\n      ) {\n        this.startIntervalTimer();\n        this.onIntervalUpdate();\n      }\n    }\n\n    if (this.maxTabsLength > 0) {\n      this.tabItems = this.tabItems.slice(0, this.maxTabsLength);\n    }\n  }\n\n  startIntervalTimer() {\n    this.clearIntervalTimer();\n    this.intervalID = setInterval(\n      () => this.onIntervalUpdate(),\n      this.timeMsPref\n    );\n  }\n\n  clearIntervalTimer() {\n    if (this.intervalID) {\n      clearInterval(this.intervalID);\n      delete this.intervalID;\n    }\n  }\n\n  #register() {\n    if (!window.IS_STORYBOOK) {\n      XPCOMUtils.defineLazyPreferenceGetter(\n        this,\n        \"timeMsPref\",\n        \"browser.tabs.firefox-view.updateTimeMs\",\n        NOW_THRESHOLD_MS,\n        () => {\n          this.clearIntervalTimer();\n          if (!this.isConnected) {\n            return;\n          }\n          this.startIntervalTimer();\n          this.requestUpdate();\n        }\n      );\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (\n      !this.updatesPaused &&\n      this.dateTimeFormat === \"relative\" &&\n      !window.IS_STORYBOOK\n    ) {\n      this.startIntervalTimer();\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.clearIntervalTimer();\n  }\n\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await Promise.all(Array.from(this.rowEls).map(item => item.updateComplete));\n  }\n\n  onIntervalUpdate() {\n    this.requestUpdate();\n    Array.from(this.rowEls).forEach(fxviewTabRow =>\n      fxviewTabRow.requestUpdate()\n    );\n  }\n\n  /**\n   * Focuses the expected element (either the link or button) within fxview-tab-row\n   * The currently focused/active element ID within a row is stored in this.currentActiveElementId\n   */\n  handleFocusElementInRow(e) {\n    let fxviewTabRow = e.target;\n    if (e.code == \"ArrowUp\") {\n      // Focus either the link or button of the previous row based on this.currentActiveElementId\n      e.preventDefault();\n      this.focusPrevRow();\n    } else if (e.code == \"ArrowDown\") {\n      // Focus either the link or button of the next row based on this.currentActiveElementId\n      e.preventDefault();\n      this.focusNextRow();\n    } else if (e.code == \"ArrowRight\") {\n      // Focus either the link or the button in the current row and\n      // set this.currentActiveElementId to that element's ID\n      e.preventDefault();\n      if (document.dir == \"rtl\") {\n        fxviewTabRow.moveFocusLeft();\n      } else {\n        fxviewTabRow.moveFocusRight();\n      }\n    } else if (e.code == \"ArrowLeft\") {\n      // Focus either the link or the button in the current row and\n      // set this.currentActiveElementId to that element's ID\n      e.preventDefault();\n      if (document.dir == \"rtl\") {\n        fxviewTabRow.moveFocusRight();\n      } else {\n        fxviewTabRow.moveFocusLeft();\n      }\n    }\n  }\n\n  focusPrevRow() {\n    this.focusIndex(this.activeIndex - 1);\n  }\n\n  focusNextRow() {\n    this.focusIndex(this.activeIndex + 1);\n  }\n\n  async focusIndex(index) {\n    // Focus link or button of item\n    if (lazy.virtualListEnabledPref) {\n      let row = this.rootVirtualListEl.getItem(index);\n      if (!row) {\n        return;\n      }\n      let subList = this.rootVirtualListEl.getSubListForItem(index);\n      if (!subList) {\n        return;\n      }\n      this.activeIndex = index;\n\n      // In Bug 1866845, these manual updates to the sublists should be removed\n      // and scrollIntoView() should also be iterated on so that we aren't constantly\n      // moving the focused item to the center of the viewport\n      for (const sublist of Array.from(this.rootVirtualListEl.children)) {\n        await sublist.requestUpdate();\n        await sublist.updateComplete;\n      }\n      row.scrollIntoView({ block: \"center\" });\n      row.focus();\n    } else if (index >= 0 && index < this.rowEls?.length) {\n      this.rowEls[index].focus();\n      this.activeIndex = index;\n    }\n  }\n\n  shouldUpdate(changes) {\n    if (changes.has(\"updatesPaused\")) {\n      if (this.updatesPaused) {\n        this.clearIntervalTimer();\n      }\n    }\n    return !this.updatesPaused;\n  }\n\n  itemTemplate = (tabItem, i) => {\n    let time;\n    if (tabItem.time || tabItem.closedAt) {\n      let stringTime = (tabItem.time || tabItem.closedAt).toString();\n      // Different APIs return time in different units, so we use\n      // the length to decide if it's milliseconds or nanoseconds.\n      if (stringTime.length === 16) {\n        time = (tabItem.time || tabItem.closedAt) / 1000;\n      } else {\n        time = tabItem.time || tabItem.closedAt;\n      }\n    }\n\n    return html`\n      <fxview-tab-row\n        ?active=${i == this.activeIndex}\n        .compact=${this.compactRows}\n        .currentActiveElementId=${this.currentActiveElementId}\n        .favicon=${tabItem.icon}\n        .primaryL10nId=${tabItem.primaryL10nId}\n        .primaryL10nArgs=${ifDefined(tabItem.primaryL10nArgs)}\n        .secondaryL10nId=${tabItem.secondaryL10nId}\n        .secondaryL10nArgs=${ifDefined(tabItem.secondaryL10nArgs)}\n        .tertiaryL10nId=${ifDefined(tabItem.tertiaryL10nId)}\n        .tertiaryL10nArgs=${ifDefined(tabItem.tertiaryL10nArgs)}\n        .secondaryActionClass=${this.secondaryActionClass}\n        .tertiaryActionClass=${ifDefined(this.tertiaryActionClass)}\n        .sourceClosedId=${ifDefined(tabItem.sourceClosedId)}\n        .sourceWindowId=${ifDefined(tabItem.sourceWindowId)}\n        .closedId=${ifDefined(tabItem.closedId || tabItem.closedId)}\n        role=\"listitem\"\n        .tabElement=${ifDefined(tabItem.tabElement)}\n        .time=${ifDefined(time)}\n        .title=${tabItem.title}\n        .url=${tabItem.url}\n        .searchQuery=${ifDefined(this.searchQuery)}\n        .timeMsPref=${ifDefined(this.timeMsPref)}\n        .hasPopup=${this.hasPopup}\n        .dateTimeFormat=${this.dateTimeFormat}\n      ></fxview-tab-row>\n    `;\n  };\n\n  stylesheets() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__fxviewtablistStyles}\"\n    />`;\n  }\n\n  render() {\n    if (\n      this.searchQuery &&\n      this.tabItems.length === 0 &&\n      !this.searchInProgress\n    ) {\n      return this.emptySearchResultsTemplate();\n    }\n    return html`\n      ${this.stylesheets()}\n      <div\n        id=\"fxview-tab-list\"\n        class=\"fxview-tab-list\"\n        data-l10n-id=\"firefoxview-tabs\"\n        role=\"list\"\n        @keydown=${this.handleFocusElementInRow}\n      >\n        ${when(\n          lazy.virtualListEnabledPref,\n          () => html`\n            <virtual-list\n              .activeIndex=${this.activeIndex}\n              .items=${this.tabItems}\n              .template=${this.itemTemplate}\n            ></virtual-list>\n          `,\n          () =>\n            html`${this.tabItems.map((tabItem, i) =>\n              this.itemTemplate(tabItem, i)\n            )}`\n        )}\n      </div>\n      <slot name=\"menu\"></slot>\n    `;\n  }\n\n  emptySearchResultsTemplate() {\n    return html` <fxview-empty-state\n      class=\"search-results\"\n      headerLabel=\"firefoxview-search-results-empty\"\n      .headerArgs=${{ query: this.searchQuery }}\n      isInnerCard\n    >\n    </fxview-empty-state>`;\n  }\n}\ncustomElements.define(\"fxview-tab-list\", FxviewTabListBase);\n\n/**\n * A tab item that displays favicon, title, url, and time of last access\n *\n * @property {boolean} active - Should current item have focus on keydown\n * @property {string} currentActiveElementId - ID of currently focused element within each tab item\n * @property {string} dateTimeFormat - Expected format for date and/or time\n * @property {string} hasPopup - The aria-haspopup attribute for the secondary action, if required\n * @property {number} closedId - The tab ID for when the tab item was closed.\n * @property {number} sourceClosedId - The closedId of the closed window its from if applicable\n * @property {number} sourceWindowId - The sessionstore id of the window its from if applicable\n * @property {string} favicon - The favicon for the tab item.\n * @property {string} primaryL10nId - The l10n id used for the primary action element\n * @property {string} primaryL10nArgs - The l10n args used for the primary action element\n * @property {string} secondaryL10nId - The l10n id used for the secondary action button\n * @property {string} secondaryL10nArgs - The l10n args used for the secondary action element\n * @property {string} secondaryActionClass - The class used to style the secondary action element\n * @property {string} tertiaryL10nId - The l10n id used for the tertiary action button\n * @property {string} tertiaryL10nArgs - The l10n args used for the tertiary action element\n * @property {string} tertiaryActionClass - The class used to style the tertiary action element\n * @property {object} tabElement - The MozTabbrowserTab element for the tab item.\n * @property {number} time - The timestamp for when the tab was last accessed.\n * @property {string} title - The title for the tab item.\n * @property {string} url - The url for the tab item.\n * @property {number} timeMsPref - The frequency in milliseconds of updates to relative time\n * @property {string} searchQuery - The query string to highlight, if provided.\n */\nexport class FxviewTabRowBase extends MozLitElement {\n  static properties = {\n    active: { type: Boolean },\n    currentActiveElementId: { type: String },\n    dateTimeFormat: { type: String },\n    favicon: { type: String },\n    hasPopup: { type: String },\n    primaryL10nId: { type: String },\n    primaryL10nArgs: { type: String },\n    secondaryL10nId: { type: String },\n    secondaryL10nArgs: { type: String },\n    secondaryActionClass: { type: String },\n    tertiaryL10nId: { type: String },\n    tertiaryL10nArgs: { type: String },\n    tertiaryActionClass: { type: String },\n    closedId: { type: Number },\n    sourceClosedId: { type: Number },\n    sourceWindowId: { type: String },\n    tabElement: { type: Object },\n    time: { type: Number },\n    title: { type: String },\n    timeMsPref: { type: Number },\n    url: { type: String },\n    searchQuery: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.active = false;\n    this.currentActiveElementId = \"fxview-tab-row-main\";\n  }\n\n  static queries = {\n    mainEl: \"#fxview-tab-row-main\",\n    secondaryButtonEl: \"#fxview-tab-row-secondary-button:not([hidden])\",\n    tertiaryButtonEl: \"#fxview-tab-row-tertiary-button\",\n  };\n\n  get currentFocusable() {\n    let focusItem = this.renderRoot.getElementById(this.currentActiveElementId);\n    if (!focusItem) {\n      focusItem = this.renderRoot.getElementById(\"fxview-tab-row-main\");\n    }\n    return focusItem;\n  }\n\n  focus() {\n    this.currentFocusable.focus();\n  }\n\n  focusSecondaryButton() {\n    let tabList = this.getRootNode().host;\n    this.secondaryButtonEl.focus();\n    tabList.currentActiveElementId = this.secondaryButtonEl.id;\n  }\n\n  focusTertiaryButton() {\n    let tabList = this.getRootNode().host;\n    this.tertiaryButtonEl.focus();\n    tabList.currentActiveElementId = this.tertiaryButtonEl.id;\n  }\n\n  focusLink() {\n    let tabList = this.getRootNode().host;\n    this.mainEl.focus();\n    tabList.currentActiveElementId = this.mainEl.id;\n  }\n\n  moveFocusRight() {\n    if (this.currentActiveElementId === \"fxview-tab-row-main\") {\n      this.focusSecondaryButton();\n    } else if (\n      this.tertiaryButtonEl &&\n      this.currentActiveElementId === \"fxview-tab-row-secondary-button\"\n    ) {\n      this.focusTertiaryButton();\n    }\n  }\n\n  moveFocusLeft() {\n    if (this.currentActiveElementId === \"fxview-tab-row-tertiary-button\") {\n      this.focusSecondaryButton();\n    } else {\n      this.focusLink();\n    }\n  }\n\n  dateFluentArgs(timestamp, dateTimeFormat) {\n    if (dateTimeFormat === \"date\" || dateTimeFormat === \"dateTime\") {\n      return JSON.stringify({ date: timestamp });\n    }\n    return null;\n  }\n\n  dateFluentId(timestamp, dateTimeFormat, _nowThresholdMs = NOW_THRESHOLD_MS) {\n    if (!timestamp) {\n      return null;\n    }\n    if (dateTimeFormat === \"relative\") {\n      const elapsed = Date.now() - timestamp;\n      if (elapsed <= _nowThresholdMs || !lazy.relativeTimeFormat) {\n        // Use a different string for very recent timestamps\n        return \"fxviewtabrow-just-now-timestamp\";\n      }\n      return null;\n    } else if (dateTimeFormat === \"date\" || dateTimeFormat === \"dateTime\") {\n      return \"fxviewtabrow-date\";\n    }\n    return null;\n  }\n\n  relativeTime(timestamp, dateTimeFormat, _nowThresholdMs = NOW_THRESHOLD_MS) {\n    if (dateTimeFormat === \"relative\") {\n      const elapsed = Date.now() - timestamp;\n      if (elapsed > _nowThresholdMs && lazy.relativeTimeFormat) {\n        return lazy.relativeTimeFormat.formatBestUnit(new Date(timestamp));\n      }\n    }\n    return null;\n  }\n\n  timeFluentId(dateTimeFormat) {\n    if (dateTimeFormat === \"time\" || dateTimeFormat === \"dateTime\") {\n      return \"fxviewtabrow-time\";\n    }\n    return null;\n  }\n\n  formatURIForDisplay(uriString) {\n    return !window.IS_STORYBOOK\n      ? lazy.BrowserUtils.formatURIStringForDisplay(uriString)\n      : uriString;\n  }\n\n  getImageUrl(icon, targetURI) {\n    if (window.IS_STORYBOOK) {\n      return `chrome://global/skin/icons/defaultFavicon.svg`;\n    }\n    if (!icon) {\n      if (targetURI?.startsWith(\"moz-extension\")) {\n        return \"chrome://mozapps/skin/extensions/extension.svg\";\n      }\n      return `chrome://global/skin/icons/defaultFavicon.svg`;\n    }\n    // If the icon is not for website (doesn't begin with http), we\n    // display it directly. Otherwise we go through the page-icon\n    // protocol to try to get a cached version. We don't load\n    // favicons directly.\n    if (icon.startsWith(\"http\")) {\n      return `page-icon:${targetURI}`;\n    }\n    return icon;\n  }\n\n  primaryActionHandler(event) {\n    if (\n      (event.type == \"click\" && !event.altKey) ||\n      (event.type == \"keydown\" && event.code == \"Enter\") ||\n      (event.type == \"keydown\" && event.code == \"Space\")\n    ) {\n      event.preventDefault();\n      if (!window.IS_STORYBOOK) {\n        this.dispatchEvent(\n          new CustomEvent(\"fxview-tab-list-primary-action\", {\n            bubbles: true,\n            composed: true,\n            detail: { originalEvent: event, item: this },\n          })\n        );\n      }\n    }\n  }\n\n  secondaryActionHandler(event) {\n    if (\n      (event.type == \"click\" && event.detail && !event.altKey) ||\n      // detail=0 is from keyboard\n      (event.type == \"click\" && !event.detail)\n    ) {\n      event.preventDefault();\n      this.dispatchEvent(\n        new CustomEvent(\"fxview-tab-list-secondary-action\", {\n          bubbles: true,\n          composed: true,\n          detail: { originalEvent: event, item: this },\n        })\n      );\n    }\n  }\n\n  tertiaryActionHandler(event) {\n    if (\n      (event.type == \"click\" && event.detail && !event.altKey) ||\n      // detail=0 is from keyboard\n      (event.type == \"click\" && !event.detail)\n    ) {\n      event.preventDefault();\n      this.dispatchEvent(\n        new CustomEvent(\"fxview-tab-list-tertiary-action\", {\n          bubbles: true,\n          composed: true,\n          detail: { originalEvent: event, item: this },\n        })\n      );\n    }\n  }\n\n  /**\n   * Find all matches of query within the given string, and compute the result\n   * to be rendered.\n   *\n   * @param {string} query\n   * @param {string} string\n   */\n  highlightSearchMatches(query, string) {\n    const fragments = [];\n    const regex = RegExp(escapeRegExp(query), \"dgi\");\n    let prevIndexEnd = 0;\n    let result;\n    while ((result = regex.exec(string)) !== null) {\n      const [indexStart, indexEnd] = result.indices[0];\n      fragments.push(string.substring(prevIndexEnd, indexStart));\n      fragments.push(\n        html`<strong>${string.substring(indexStart, indexEnd)}</strong>`\n      );\n      prevIndexEnd = regex.lastIndex;\n    }\n    fragments.push(string.substring(prevIndexEnd));\n    return fragments;\n  }\n\n  stylesheets() {\n    return html`<link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__fxviewtabrowStyles}\"\n    />`;\n  }\n\n  faviconTemplate() {\n    return html`<span\n      class=\"fxview-tab-row-favicon icon\"\n      id=\"fxview-tab-row-favicon\"\n      style=${styleMap({\n        backgroundImage: `url(${this.getImageUrl(this.favicon, this.url)})`,\n      })}\n    ></span>`;\n  }\n\n  titleTemplate() {\n    const title = this.title;\n    return html`<span\n      class=\"fxview-tab-row-title text-truncated-ellipsis\"\n      id=\"fxview-tab-row-title\"\n      dir=\"auto\"\n    >\n      ${when(\n        this.searchQuery,\n        () => this.highlightSearchMatches(this.searchQuery, title),\n        () => title\n      )}\n    </span>`;\n  }\n\n  urlTemplate() {\n    return html`<span\n      class=\"fxview-tab-row-url text-truncated-ellipsis\"\n      id=\"fxview-tab-row-url\"\n    >\n      ${when(\n        this.searchQuery,\n        () =>\n          this.highlightSearchMatches(\n            this.searchQuery,\n            this.formatURIForDisplay(this.url)\n          ),\n        () => this.formatURIForDisplay(this.url)\n      )}\n    </span>`;\n  }\n\n  dateTemplate() {\n    const relativeString = this.relativeTime(\n      this.time,\n      this.dateTimeFormat,\n      !window.IS_STORYBOOK ? this.timeMsPref : NOW_THRESHOLD_MS\n    );\n    const dateString = this.dateFluentId(\n      this.time,\n      this.dateTimeFormat,\n      !window.IS_STORYBOOK ? this.timeMsPref : NOW_THRESHOLD_MS\n    );\n    const dateArgs = this.dateFluentArgs(this.time, this.dateTimeFormat);\n    return html`<span class=\"fxview-tab-row-date\" id=\"fxview-tab-row-date\">\n      <span\n        ?hidden=${relativeString || !dateString}\n        data-l10n-id=${ifDefined(dateString)}\n        data-l10n-args=${ifDefined(dateArgs)}\n      ></span>\n      <span ?hidden=${!relativeString}>${relativeString}</span>\n    </span>`;\n  }\n\n  timeTemplate() {\n    const timeString = this.timeFluentId(this.dateTimeFormat);\n    const time = this.time;\n    const timeArgs = JSON.stringify({ time });\n    return html`<span\n      class=\"fxview-tab-row-time\"\n      id=\"fxview-tab-row-time\"\n      ?hidden=${!timeString}\n      data-timestamp=${ifDefined(this.time)}\n      data-l10n-id=${ifDefined(timeString)}\n      data-l10n-args=${ifDefined(timeArgs)}\n    >\n    </span>`;\n  }\n\n  secondaryButtonTemplate() {\n    return html`${when(\n      this.secondaryL10nId && this.secondaryActionHandler,\n      () => html`<moz-button\n        type=\"icon ghost\"\n        class=${classMap({\n          \"fxview-tab-row-button\": true,\n          [this.secondaryActionClass]: this.secondaryActionClass,\n        })}\n        id=\"fxview-tab-row-secondary-button\"\n        data-l10n-id=${this.secondaryL10nId}\n        data-l10n-args=${ifDefined(this.secondaryL10nArgs)}\n        aria-haspopup=${ifDefined(this.hasPopup)}\n        @click=${this.secondaryActionHandler}\n        tabindex=\"${this.active &&\n        this.currentActiveElementId === \"fxview-tab-row-secondary-button\"\n          ? \"0\"\n          : \"-1\"}\"\n      ></moz-button>`\n    )}`;\n  }\n\n  tertiaryButtonTemplate() {\n    return html`${when(\n      this.tertiaryL10nId && this.tertiaryActionHandler,\n      () => html`<moz-button\n        type=\"icon ghost\"\n        class=${classMap({\n          \"fxview-tab-row-button\": true,\n          [this.tertiaryActionClass]: this.tertiaryActionClass,\n        })}\n        id=\"fxview-tab-row-tertiary-button\"\n        data-l10n-id=${this.tertiaryL10nId}\n        data-l10n-args=${ifDefined(this.tertiaryL10nArgs)}\n        aria-haspopup=${ifDefined(this.hasPopup)}\n        @click=${this.tertiaryActionHandler}\n        tabindex=\"${this.active &&\n        this.currentActiveElementId === \"fxview-tab-row-tertiary-button\"\n          ? \"0\"\n          : \"-1\"}\"\n      ></moz-button>`\n    )}`;\n  }\n}\n\nexport class FxviewTabRow extends FxviewTabRowBase {\n  render() {\n    return html`\n      ${this.stylesheets()}\n      <a\n        href=${ifDefined(this.url)}\n        class=\"fxview-tab-row-main\"\n        id=\"fxview-tab-row-main\"\n        tabindex=${this.active &&\n        this.currentActiveElementId === \"fxview-tab-row-main\"\n          ? \"0\"\n          : \"-1\"}\n        data-l10n-id=${ifDefined(this.primaryL10nId)}\n        data-l10n-args=${ifDefined(this.primaryL10nArgs)}\n        @click=${this.primaryActionHandler}\n        @keydown=${this.primaryActionHandler}\n        title=${!this.primaryL10nId ? this.url : null}\n      >\n        ${this.faviconTemplate()} ${this.titleTemplate()}\n        ${when(\n          !this.compact,\n          () => html`${this.urlTemplate()} ${this.dateTemplate()}\n          ${this.timeTemplate()}`\n        )}\n      </a>\n      ${this.secondaryButtonTemplate()} ${this.tertiaryButtonTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"fxview-tab-row\", FxviewTabRow);\n\nexport class VirtualList extends MozLitElement {\n  static properties = {\n    items: { type: Array },\n    template: { type: Function },\n    activeIndex: { type: Number },\n    itemOffset: { type: Number },\n    maxRenderCountEstimate: { type: Number, state: true },\n    itemHeightEstimate: { type: Number, state: true },\n    isAlwaysVisible: { type: Boolean },\n    isVisible: { type: Boolean, state: true },\n    isSubList: { type: Boolean },\n    pinnedTabsIndexOffset: { type: Number },\n  };\n\n  createRenderRoot() {\n    return this;\n  }\n\n  constructor() {\n    super();\n    this.activeIndex = 0;\n    this.itemOffset = 0;\n    this.pinnedTabsIndexOffset = 0;\n    this.items = [];\n    this.subListItems = [];\n    this.itemHeightEstimate = FXVIEW_ROW_HEIGHT_PX;\n    this.maxRenderCountEstimate = Math.max(\n      40,\n      2 * Math.ceil(window.innerHeight / this.itemHeightEstimate)\n    );\n    this.isSubList = false;\n    this.isVisible = false;\n    this.intersectionObserver = new IntersectionObserver(\n      ([entry]) => (this.isVisible = entry.isIntersecting),\n      { root: this.ownerDocument }\n    );\n    this.resizeObserver = new ResizeObserver(([entry]) => {\n      if (entry.contentRect?.height > 0) {\n        // Update properties on top-level virtual-list\n        this.parentElement.itemHeightEstimate = entry.contentRect.height;\n        this.parentElement.maxRenderCountEstimate = Math.max(\n          40,\n          2 * Math.ceil(window.innerHeight / this.itemHeightEstimate)\n        );\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.intersectionObserver.disconnect();\n    this.resizeObserver.disconnect();\n  }\n\n  triggerIntersectionObserver() {\n    this.intersectionObserver.unobserve(this);\n    this.intersectionObserver.observe(this);\n  }\n\n  getSubListForItem(index) {\n    if (this.isSubList) {\n      throw new Error(\"Cannot get sublist for item\");\n    }\n    return this.children[parseInt(index / this.maxRenderCountEstimate, 10)];\n  }\n\n  getItem(index) {\n    if (!this.isSubList) {\n      return this.getSubListForItem(index)?.getItem(\n        index % this.maxRenderCountEstimate\n      );\n    }\n    return this.children[index];\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"items\") && !this.isSubList) {\n      this.subListItems = [];\n      for (let i = 0; i < this.items.length; i += this.maxRenderCountEstimate) {\n        this.subListItems.push(\n          this.items.slice(i, i + this.maxRenderCountEstimate)\n        );\n      }\n      this.triggerIntersectionObserver();\n    }\n  }\n\n  recalculateAfterWindowResize() {\n    this.maxRenderCountEstimate = Math.max(\n      40,\n      2 * Math.ceil(window.innerHeight / this.itemHeightEstimate)\n    );\n  }\n\n  firstUpdated() {\n    this.intersectionObserver.observe(this);\n    if (this.isSubList && this.children[0]) {\n      this.resizeObserver.observe(this.children[0]);\n    }\n  }\n\n  updated(changedProperties) {\n    this.updateListHeight(changedProperties);\n  }\n\n  updateListHeight(changedProperties) {\n    if (\n      changedProperties.has(\"isAlwaysVisible\") ||\n      changedProperties.has(\"isVisible\")\n    ) {\n      this.style.height =\n        this.isAlwaysVisible || this.isVisible\n          ? \"auto\"\n          : `${this.items.length * this.itemHeightEstimate}px`;\n    }\n  }\n\n  get renderItems() {\n    return this.isSubList ? this.items : this.subListItems;\n  }\n\n  subListTemplate = (data, i) => {\n    return html`<virtual-list\n      .template=${this.template}\n      .items=${data}\n      .itemHeightEstimate=${this.itemHeightEstimate}\n      .itemOffset=${i * this.maxRenderCountEstimate +\n      this.pinnedTabsIndexOffset}\n      .isAlwaysVisible=${i ==\n      parseInt(this.activeIndex / this.maxRenderCountEstimate, 10)}\n      isSubList\n    ></virtual-list>`;\n  };\n\n  itemTemplate = (data, i) =>\n    this.template(data, this.itemOffset + i + this.pinnedTabsIndexOffset);\n\n  render() {\n    if (this.isAlwaysVisible || this.isVisible) {\n      return html`\n        ${repeat(\n          this.renderItems,\n          (data, i) => i,\n          this.isSubList ? this.itemTemplate : this.subListTemplate\n        )}\n      `;\n    }\n    return \"\";\n  }\n}\ncustomElements.define(\"virtual-list\", VirtualList);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nconst lazy = {};\nconst loggersByName = new Map();\n\nChromeUtils.defineESModuleGetters(lazy, {\n  BrowserUtils: \"resource://gre/modules/BrowserUtils.sys.mjs\",\n  Log: \"resource://gre/modules/Log.sys.mjs\",\n  PlacesUIUtils: \"resource:///modules/PlacesUIUtils.sys.mjs\",\n  PlacesUtils: \"resource://gre/modules/PlacesUtils.sys.mjs\",\n});\n\nChromeUtils.defineLazyGetter(lazy, \"relativeTimeFormat\", () => {\n  return new Services.intl.RelativeTimeFormat(undefined, { style: \"narrow\" });\n});\n\nconst { XPCOMUtils } = ChromeUtils.importESModule(\n  \"resource://gre/modules/XPCOMUtils.sys.mjs\"\n);\nXPCOMUtils.defineLazyPreferenceGetter(\n  lazy,\n  \"searchEnabledPref\",\n  \"browser.firefox-view.search.enabled\"\n);\n\n// Cutoff of 1.5 minutes + 1 second to determine what text string to display\nexport const NOW_THRESHOLD_MS = 91000;\n\n// Configure logging level via this pref\nexport const LOGGING_PREF = \"browser.tabs.firefox-view.logLevel\";\n\nexport const MAX_TABS_FOR_RECENT_BROWSING = 5;\n\nexport function formatURIForDisplay(uriString) {\n  return lazy.BrowserUtils.formatURIStringForDisplay(uriString);\n}\n\nexport function convertTimestamp(\n  timestamp,\n  fluentStrings,\n  _nowThresholdMs = NOW_THRESHOLD_MS\n) {\n  if (!timestamp) {\n    // It's marginally better to show nothing instead of \"53 years ago\"\n    return \"\";\n  }\n  const elapsed = Date.now() - timestamp;\n  let formattedTime;\n  if (elapsed <= _nowThresholdMs) {\n    // Use a different string for very recent timestamps\n    formattedTime = fluentStrings.formatValueSync(\n      \"firefoxview-just-now-timestamp\"\n    );\n  } else {\n    formattedTime = lazy.relativeTimeFormat.formatBestUnit(new Date(timestamp));\n  }\n  return formattedTime;\n}\n\nexport function createFaviconElement(image, targetURI = \"\") {\n  let favicon = document.createElement(\"div\");\n  favicon.style.backgroundImage = `url('${getImageUrl(image, targetURI)}')`;\n  favicon.classList.add(\"favicon\");\n  return favicon;\n}\n\nexport function getImageUrl(icon, targetURI) {\n  return icon ? lazy.PlacesUIUtils.getImageURL(icon) : `page-icon:${targetURI}`;\n}\n\n/**\n * This function doesn't just copy the link to the clipboard, it creates a\n * URL object on the clipboard, so when it's pasted into an application that\n * supports it, it displays the title as a link.\n */\nexport function placeLinkOnClipboard(title, uri) {\n  let node = {\n    type: 0,\n    title,\n    uri,\n  };\n\n  // Copied from doCommand/placesCmd_copy in PlacesUIUtils.sys.mjs\n\n  // This is a little hacky, but there is a lot of code in Places that handles\n  // clipboard stuff, so it's easier to reuse.\n\n  // This order is _important_! It controls how this and other applications\n  // select data to be inserted based on type.\n  let contents = [\n    { type: lazy.PlacesUtils.TYPE_X_MOZ_URL, entries: [] },\n    { type: lazy.PlacesUtils.TYPE_HTML, entries: [] },\n    { type: lazy.PlacesUtils.TYPE_PLAINTEXT, entries: [] },\n  ];\n\n  contents.forEach(function (content) {\n    content.entries.push(lazy.PlacesUtils.wrapNode(node, content.type));\n  });\n\n  let xferable = Cc[\"@mozilla.org/widget/transferable;1\"].createInstance(\n    Ci.nsITransferable\n  );\n  xferable.init(null);\n\n  function addData(type, data) {\n    xferable.addDataFlavor(type);\n    xferable.setTransferData(type, lazy.PlacesUtils.toISupportsString(data));\n  }\n\n  contents.forEach(function (content) {\n    addData(content.type, content.entries.join(lazy.PlacesUtils.endl));\n  });\n\n  Services.clipboard.setData(xferable, null, Ci.nsIClipboard.kGlobalClipboard);\n}\n\n/**\n * Check the user preference to enable search functionality in Firefox View.\n *\n * @returns {boolean} The preference value.\n */\nexport function isSearchEnabled() {\n  return lazy.searchEnabledPref;\n}\n\n/**\n * Escape special characters for regular expressions from a string.\n *\n * @param {string} string\n *   The string to sanitize.\n * @returns {string} The sanitized string.\n */\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Search a tab list for items that match the given query.\n */\nexport function searchTabList(query, tabList) {\n  const regex = RegExp(escapeRegExp(query), \"i\");\n  return tabList.filter(\n    ({ title, url }) => regex.test(title) || regex.test(url)\n  );\n}\n\n/**\n * Get or create a logger, whose log-level is controlled by a pref\n *\n * @param {string} loggerName - Creating named loggers helps differentiate log messages from different\n                                components or features.\n */\n\nexport function getLogger(loggerName) {\n  if (!loggersByName.has(loggerName)) {\n    let logger = lazy.Log.repository.getLogger(`FirefoxView.${loggerName}`);\n    logger.manageLevelFromPref(LOGGING_PREF);\n    logger.addAppender(\n      new lazy.Log.ConsoleAppender(new lazy.Log.BasicFormatter())\n    );\n    loggersByName.set(loggerName, logger);\n  }\n  return loggersByName.get(loggerName);\n}\n\nexport function escapeHtmlEntities(text) {\n  return (text || \"\")\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\");\n}\n\nexport function navigateToLink(e) {\n  let currentWindow =\n    e.target.ownerGlobal.browsingContext.embedderWindowGlobal.browsingContext\n      .window;\n  if (currentWindow.openTrustedLinkIn) {\n    let where = lazy.BrowserUtils.whereToOpenLink(\n      e.detail.originalEvent,\n      false,\n      true\n    );\n    if (where == \"current\") {\n      where = \"tab\";\n    }\n    currentWindow.openTrustedLinkIn(e.originalTarget.url, where);\n  }\n}\n","import __chrome_styles_loader__mozbuttonStyles from \"toolkit/content/widgets/moz-button/moz-button.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n/**\n * A button with multiple types and two sizes.\n *\n * @tagname moz-button\n * @property {string} label - The button's label, will be overridden by slotted content.\n * @property {string} type - The button type.\n *   Options: default, primary, destructive, icon, icon ghost, ghost.\n * @property {string} size - The button size.\n *   Options: default, small.\n * @property {boolean} disabled - The disabled state.\n * @property {string} title - The button's title attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} titleAttribute - Internal, map title attribute to the title JS property.\n * @property {string} tooltipText - Set the title property, the title attribute will be used first.\n * @property {string} ariaLabel - The button's arial-label attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} ariaLabelAttribute - Internal, map aria-label attribute to the ariaLabel JS property.\n * @property {HTMLButtonElement} buttonEl - The internal button element in the shadow DOM.\n * @slot default - The button's content, overrides label property.\n * @fires click - The click event.\n */\nexport default class MozButton extends MozLitElement {\n  static shadowRootOptions = {\n    ...MozLitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  static properties = {\n    label: { type: String, reflect: true },\n    type: { type: String, reflect: true },\n    size: { type: String, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    title: { type: String, state: true },\n    titleAttribute: { type: String, attribute: \"title\", reflect: true },\n    tooltipText: { type: String },\n    ariaLabelAttribute: {\n      type: String,\n      attribute: \"aria-label\",\n      reflect: true,\n    },\n    ariaLabel: { type: String, state: true },\n  };\n\n  static queries = {\n    buttonEl: \"button\",\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.size = \"default\";\n    this.disabled = false;\n  }\n\n  willUpdate(changes) {\n    if (changes.has(\"titleAttribute\")) {\n      this.title = this.titleAttribute;\n      this.titleAttribute = null;\n    }\n    if (changes.has(\"ariaLabelAttribute\")) {\n      this.ariaLabel = this.ariaLabelAttribute;\n      this.ariaLabelAttribute = null;\n    }\n  }\n\n  // Delegate clicks on host to the button element.\n  click() {\n    this.buttonEl.click();\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttonStyles}\"\n      />\n      <button\n        type=${this.type}\n        size=${this.size}\n        ?disabled=${this.disabled}\n        title=${ifDefined(this.title || this.tooltipText)}\n        aria-label=${ifDefined(this.ariaLabel)}\n        part=\"button\"\n      >\n        <slot>${this.label}</slot>\n      </button>\n    `;\n  }\n}\ncustomElements.define(\"moz-button\", MozButton);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"lit.all.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"browser/components/firefoxview/fxview-tab-list.mjs\";\n\nconst DATE_TIME_FORMATS = {\n  relative: \"relative\",\n  dateTime: \"dateTime\",\n  date: \"date\",\n  time: \"time\",\n};\n\nexport default {\n  title: \"Domain-specific UI Widgets/Firefox View/Tab List\",\n  component: \"fxview-tab-list\",\n  argTypes: {\n    dateTimeFormat: {\n      options: Object.keys(DATE_TIME_FORMATS),\n      mapping: DATE_TIME_FORMATS,\n      control: { type: \"select\" },\n    },\n  },\n};\n\nconst Template = ({\n  listClass,\n  dateTimeFormat,\n  hasPopup,\n  maxTabsLength,\n  primaryAction,\n  secondaryAction,\n  tabItems,\n}) => html`\n  <style>\n    main {\n      max-width: 750px;\n    }\n    fxview-tab-list.menu::part(secondary-button) {\n      background-image: url(\"chrome://global/skin/icons/more.svg\");\n    }\n    fxview-tab-list.dismiss::part(secondary-button) {\n      background-image: url(\"chrome://global/skin/icons/close.svg\");\n    }\n    :host panel-item::part(button) {\n      padding-inline-start: 12px;\n      cursor: pointer;\n    }\n  </style>\n  <main>\n    <fxview-tab-list\n      class=${listClass}\n      .hasPopup=${hasPopup}\n      .dateTimeFormat=${dateTimeFormat}\n      .maxTabsLength=${maxTabsLength}\n      .tabItems=${tabItems}\n      @fxview-tab-list-secondary-action=${secondaryAction}\n      @fxview-tab-list-primary-action=${primaryAction}\n    >\n      <panel-list slot=\"menu\">\n        <panel-item data-l10n-id=\"fxviewtabrow-delete\"></panel-item>\n        <panel-item\n          data-l10n-id=\"fxviewtabrow-forget-about-this-site\"\n        ></panel-item>\n        <hr />\n        <panel-item data-l10n-id=\"fxviewtabrow-open-in-window\"></panel-item>\n        <panel-item\n          data-l10n-id=\"fxviewtabrow-open-in-private-window\"\n        ></panel-item>\n        <hr />\n        <panel-item data-l10n-id=\"fxviewtabrow-add-bookmark\"></panel-item>\n        <panel-item data-l10n-id=\"fxviewtabrow-save-to-pocket\"></panel-item>\n        <panel-item data-l10n-id=\"fxviewtabrow-copy-link\"></panel-item>\n      </panel-list>\n    </fxview-tab-list>\n  </main>\n`;\n\nconst MAX_TABS_LENGTH = 25;\n\nlet secondaryAction = e => {\n  e.target.querySelector(\"panel-list\").toggle(e.detail.originalEvent);\n};\n\nlet primaryAction = () => {\n  // Open in new tab\n};\n\nconst tabItems = [\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.net\",\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-options-menu-button\",\n    secondaryL10nArgs: JSON.stringify({ tabTitle: \"Example Domain\" }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.org\",\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.org\" }),\n    secondaryL10nId: \"fxviewtabrow-options-menu-button\",\n    secondaryL10nArgs: JSON.stringify({ tabTitle: \"Example Domain\" }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.com\",\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.com\" }),\n    secondaryL10nId: \"fxviewtabrow-options-menu-button\",\n    secondaryL10nArgs: JSON.stringify({ tabTitle: \"Example Domain\" }),\n  },\n];\nconst recentlyClosedItems = [\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.net\",\n    tabid: 1,\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-dismiss-tab-button\",\n    secondaryL10nArgs: JSON.stringify({\n      tabTitle: \"Example Domain\",\n    }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.org\",\n    tabid: 2,\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-dismiss-tab-button\",\n    secondaryL10nArgs: JSON.stringify({\n      tabTitle: \"Example Domain\",\n    }),\n  },\n  {\n    icon: \"chrome://global/skin/icons/defaultFavicon.svg\",\n    title: \"Example Domain\",\n    url: \"example.com\",\n    tabid: 3,\n    time: 1678141738136,\n    primaryL10nId: \"fxviewtabrow-tabs-list-tab\",\n    primaryL10nArgs: JSON.stringify({ targetURI: \"example.net\" }),\n    secondaryL10nId: \"fxviewtabrow-dismiss-tab-button\",\n    secondaryL10nArgs: JSON.stringify({\n      tabTitle: \"Example Domain\",\n    }),\n  },\n];\n\nexport const RelativeTime = Template.bind({});\nRelativeTime.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"relative\",\n  hasPopup: \"menu\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  tabItems,\n};\nexport const DateAndTime = Template.bind({});\nDateAndTime.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"dateTime\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  tabItems,\n};\nexport const DateOnly = Template.bind({});\nDateOnly.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"date\",\n  hasPopup: \"menu\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  tabItems,\n};\nexport const TimeOnly = Template.bind({});\nTimeOnly.args = {\n  listClass: \"menu\",\n  dateTimeFormat: \"time\",\n  hasPopup: \"menu\",\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction,\n  tabItems,\n};\nexport const RecentlyClosed = Template.bind({});\nRecentlyClosed.args = {\n  listClass: \"dismiss\",\n  dateTimeFormat: \"relative\",\n  hasPopup: null,\n  maxTabsLength: MAX_TABS_LENGTH,\n  primaryAction,\n  secondaryAction: () => {},\n  tabItems: recentlyClosedItems,\n};\n"],"names":[],"sourceRoot":""}