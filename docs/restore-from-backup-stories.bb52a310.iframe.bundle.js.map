{"version":3,"file":"restore-from-backup-stories.bb52a310.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/PA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/TA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC9HA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AChTA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA","sources":["webpack:///../../../toolkit/content/widgets/moz-message-bar/moz-message-bar.mjs","webpack:///../../../toolkit/content/widgets/moz-card/moz-card.mjs","webpack:///../../../toolkit/content/widgets/moz-button/moz-button.mjs","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///../backup/common/backup-constants.mjs","webpack:///../backup/content/restore-from-backup.mjs","webpack:///../backup/content/restore-from-backup.stories.mjs"],"sourcesContent":["import __chrome_styles_loader__mozmessagebarStyles from \"toolkit/content/widgets/moz-message-bar/moz-message-bar.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-button.mjs\";\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozMessageBar.ftl\");\n\nconst messageTypeToIconData = {\n  info: {\n    iconSrc: \"chrome://global/skin/icons/info-filled.svg\",\n    l10nId: \"moz-message-bar-icon-info\",\n  },\n  warning: {\n    iconSrc: \"chrome://global/skin/icons/warning.svg\",\n    l10nId: \"moz-message-bar-icon-warning\",\n  },\n  success: {\n    iconSrc: \"chrome://global/skin/icons/check-filled.svg\",\n    l10nId: \"moz-message-bar-icon-success\",\n  },\n  error: {\n    iconSrc: \"chrome://global/skin/icons/error.svg\",\n    l10nId: \"moz-message-bar-icon-error\",\n  },\n  critical: {\n    iconSrc: \"chrome://global/skin/icons/error.svg\",\n    l10nId: \"moz-message-bar-icon-error\",\n  },\n};\n\n/**\n * A simple message bar element that can be used to display\n * important information to users.\n *\n * @tagname moz-message-bar\n * @property {string} type - The type of the displayed message.\n * @property {string} heading - The heading of the message.\n * @property {string} message - The message text.\n * @property {boolean} dismissable - Whether or not the element is dismissable.\n * @property {string} messageL10nId - l10n ID for the message.\n * @property {string} messageL10nArgs - Any args needed for the message l10n ID.\n * @fires message-bar:close\n *  Custom event indicating that message bar was closed.\n * @fires message-bar:user-dismissed\n *  Custom event indicating that message bar was dismissed by the user.\n */\n\nexport default class MozMessageBar extends MozLitElement {\n  static queries = {\n    actionsSlot: \"slot[name=actions]\",\n    actionsEl: \".actions\",\n    closeButton: \"moz-button.close\",\n    messageEl: \".message\",\n    supportLinkSlot: \"slot[name=support-link]\",\n  };\n\n  static properties = {\n    type: { type: String },\n    heading: { type: String, fluent: true },\n    message: { type: String, fluent: true },\n    dismissable: { type: Boolean },\n    messageL10nId: { type: String },\n    messageL10nArgs: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.type = \"info\";\n    this.dismissable = false;\n  }\n\n  onActionSlotchange() {\n    let actions = this.actionsSlot.assignedNodes();\n    this.actionsEl.classList.toggle(\"active\", actions.length);\n  }\n\n  onLinkSlotChange() {\n    this.messageEl.classList.toggle(\n      \"has-link-after\",\n      !!this.supportLinkEls.length\n    );\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"alert\");\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.dispatchEvent(new CustomEvent(\"message-bar:close\"));\n  }\n\n  get supportLinkEls() {\n    return this.supportLinkSlot.assignedElements();\n  }\n\n  iconTemplate() {\n    let iconData = messageTypeToIconData[this.type];\n    if (iconData) {\n      let { iconSrc, l10nId } = iconData;\n      return html`\n        <div class=\"icon-container\">\n          <img\n            class=\"icon\"\n            src=${iconSrc}\n            data-l10n-id=${l10nId}\n            data-l10n-attrs=\"alt\"\n          />\n        </div>\n      `;\n    }\n    return \"\";\n  }\n\n  headingTemplate() {\n    if (this.heading) {\n      return html`<strong class=\"heading\">${this.heading}</strong>`;\n    }\n    return \"\";\n  }\n\n  closeButtonTemplate({ size } = {}) {\n    if (this.dismissable) {\n      return html`\n        <moz-button\n          type=\"icon ghost\"\n          class=\"close\"\n          size=${ifDefined(size)}\n          data-l10n-id=\"moz-message-bar-close-button\"\n          @click=${this.dismiss}\n        ></moz-button>\n      `;\n    }\n    return \"\";\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozmessagebarStyles}\"\n      />\n      <div class=\"container\">\n        <div class=\"content\">\n          <div class=\"text-container\">\n            ${this.iconTemplate()}\n            <div class=\"text-content\">\n              ${this.headingTemplate()}\n              <div>\n                <span\n                  class=\"message\"\n                  data-l10n-id=${ifDefined(this.messageL10nId)}\n                  data-l10n-args=${ifDefined(\n                    JSON.stringify(this.messageL10nArgs)\n                  )}\n                >\n                  ${this.message}\n                </span>\n                <span class=\"link\">\n                  <slot\n                    name=\"support-link\"\n                    @slotchange=${this.onLinkSlotChange}\n                  ></slot>\n                </span>\n              </div>\n            </div>\n          </div>\n          <span class=\"actions\">\n            <slot name=\"actions\" @slotchange=${this.onActionSlotchange}></slot>\n          </span>\n        </div>\n        ${this.closeButtonTemplate()}\n      </div>\n    `;\n  }\n\n  dismiss() {\n    this.dispatchEvent(new CustomEvent(\"message-bar:user-dismissed\"));\n    this.close();\n  }\n\n  close() {\n    this.remove();\n  }\n}\n\ncustomElements.define(\"moz-message-bar\", MozMessageBar);\n","import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible. You can use the \"expanded\" attribute to force the accordion\n * card to show its content on initial render.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} icon - (optional) A flag to indicate the header should include an icon\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @property {boolean} expanded - A flag to indicate whether the card is\n *  expanded or not. Can be used to expand the content section of the\n *  accordion card on initial render.\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentEl: \"#content\",\n    summaryEl: \"summary\",\n    contentSlotEl: \"#content-slot\",\n  };\n\n  static properties = {\n    heading: { type: String, fluent: true },\n    icon: { type: Boolean },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.expanded = false;\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\" part=\"moz-card-heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          this.icon,\n          () =>\n            html`<div part=\"icon\" id=\"heading-icon\" role=\"presentation\"></div>`\n        )}\n        <span id=\"heading\" title=${ifDefined(this.heading)} part=\"heading\"\n          >${this.heading}</span\n        >\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details\n          id=\"moz-card-details\"\n          @toggle=${this.onToggle}\n          ?open=${this.expanded}\n        >\n          <summary part=\"summary\">${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot id=\"content-slot\"></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      <div id=\"moz-card-details\">\n        ${this.headingTemplate()}\n        <div id=\"content\" aria-describedby=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  onToggle() {\n    this.expanded = this.detailsEl.open;\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n","import __chrome_styles_loader__mozbuttonStyles from \"toolkit/content/widgets/moz-button/moz-button.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * Controls moz-button behavior when menuId property is set.\n * Helps to integrate moz-button with panel-list.\n */\nclass MenuController {\n  /** @type {HTMLElement} */\n  host;\n\n  /** @type {string} */\n  #menuId;\n\n  /** @type {HTMLElement | null} */\n  #menuEl;\n\n  constructor(host) {\n    this.host = host;\n    host.addController(this);\n  }\n\n  hostDisconnected() {\n    this.host.removeEventListener(\"click\", this.openPanelList);\n    this.host.removeEventListener(\"mousedown\", this.openPanelList);\n  }\n\n  hostUpdated() {\n    if (this.#menuId === this.host.menuId) {\n      return;\n    }\n    if (this.#menuEl?.localName == \"panel-list\") {\n      this.panelListCleanUp();\n    }\n\n    this.#menuId = this.host.menuId;\n\n    // Check to see if a menuId has been added to host, or changed\n    if (this.#menuId) {\n      this.#menuEl = this.host.getRootNode().querySelector(`#${this.#menuId}`);\n\n      if (this.#menuEl?.localName == \"panel-list\") {\n        this.panelListSetUp();\n      }\n    }\n\n    // Check to see if menuId has been removed from host\n    if (!this.#menuId) {\n      this.#menuEl = null;\n      this.host.removeController(this);\n    }\n  }\n\n  /**\n   * Handles opening/closing the panel-list when the host is clicked or activated via keyboard.\n   * @param {MouseEvent|KeyboardEvent} event\n   */\n  openPanelList = event => {\n    if (\n      (event.type == \"mousedown\" && event.button == 0) ||\n      event.inputSource == MouseEvent.MOZ_SOURCE_KEYBOARD ||\n      !event.detail\n    ) {\n      this.#menuEl?.toggle(event, this.host);\n    }\n  };\n\n  /**\n   * Sets up the host for integration with panel-list,\n   * adding necessary event listeners and ARIA attributes.\n   */\n  panelListSetUp() {\n    this.host.addEventListener(\"click\", this.openPanelList);\n    this.host.addEventListener(\"mousedown\", this.openPanelList);\n    this.host.ariaHasPopup = \"menu\";\n    this.host.ariaExpanded = this.#menuEl?.open ? \"true\" : \"false\";\n  }\n\n  /**\n   * Cleans up panel-list integration,\n   * removing event listeners and clearing ARIA attributes.\n   */\n  panelListCleanUp() {\n    this.host.removeEventListener(\"click\", this.openPanelList);\n    this.host.removeEventListener(\"mousedown\", this.openPanelList);\n    this.host.ariaHasPopup = null;\n    this.host.ariaExpanded = null;\n  }\n}\n\n/**\n * A button with multiple types and two sizes.\n *\n * @tagname moz-button\n * @property {string} label - The button's label, will be overridden by slotted content.\n * @property {string} type - The button type.\n *   Options: default, primary, destructive, icon, icon ghost, ghost.\n * @property {string} size - The button size.\n *   Options: default, small.\n * @property {boolean} disabled - The disabled state.\n * @property {string} title - The button's title attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} titleAttribute - Internal, map title attribute to the title JS property.\n * @property {string} tooltipText - Set the title property, the title attribute will be used first.\n * @property {string} ariaLabel - The button's aria-label attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} ariaHasPopup - The button's aria-haspopup attribute, that indicates that a popup element can be triggered by the button.\n * @property {string} ariaExpanded - The button's aria-expanded attribute, that indicates whether or not the controlled elements are displayed or hidden.\n * @property {string} iconSrc - Path to the icon that should be displayed in the button.\n * @property {string} ariaLabelAttribute - Internal, map aria-label attribute to the ariaLabel JS property.\n * @property {string} ariaHasPopupAttribute - Internal, map aria-haspopup attribute to the ariaHasPopup JS property.\n * @property {string} ariaExpandedAttribute - Internal, map aria-expanded attribute to the ariaExpanded JS property.\n * @property {string} hasVisibleLabel - Internal, tracks whether or not the button has a visible label.\n * @property {boolean} attention - Show a dot notification on the button if true.\n * @property {boolean} parentDisabled - When the parent of this component is disabled.\n * @property {string} iconPosition - The icon's position relative to the button label.\n *   Options: start, end.\n * @property {string} menuId - A CSS selector string that identifies the associated menu element controlled by the button.\n * @property {HTMLButtonElement} buttonEl - The internal button element in the shadow DOM.\n * @property {HTMLButtonElement} slotEl - The internal slot element in the shadow DOM.\n * @cssproperty [--button-outer-padding-inline] - Used to set the outer inline padding of toolbar style buttons\n * @csspropert [--button-outer-padding-block] - Used to set the outer block padding of toolbar style buttons.\n * @cssproperty [--button-outer-padding-inline-start] - Used to set the outer inline-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-inline-end] - Used to set the outer inline-end padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-start] - Used to set the outer block-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-end] - Used to set the outer block-end padding of toolbar style buttons\n * @slot default - The button's content, overrides label property.\n * @fires click - The click event.\n */\nexport default class MozButton extends MozLitElement {\n  static shadowRootOptions = {\n    ...MozLitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  static properties = {\n    label: { type: String, reflect: true, fluent: true },\n    type: { type: String, reflect: true },\n    size: { type: String, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    title: { type: String, mapped: true },\n    tooltipText: { type: String, fluent: true },\n    ariaLabel: { type: String, mapped: true },\n    ariaHasPopup: { type: String, mapped: true },\n    ariaExpanded: { type: String, mapped: true },\n    iconSrc: { type: String },\n    hasVisibleLabel: { type: Boolean, state: true },\n    accessKey: { type: String, mapped: true },\n    attention: { type: Boolean },\n    iconPosition: { type: String, reflect: true },\n    menuId: { type: String, reflect: true },\n    parentDisabled: { type: Boolean },\n  };\n\n  static queries = {\n    buttonEl: \"button\",\n    slotEl: \"slot\",\n    backgroundEl: \".button-background\",\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.size = \"default\";\n    this.disabled = false;\n    this.hasVisibleLabel = !!this.label;\n    this.attention = false;\n    this.iconPosition = \"start\";\n    this.menuId = \"\";\n    this.parentDisabled = undefined;\n  }\n\n  willUpdate(changedProperties) {\n    super.willUpdate(changedProperties);\n\n    if (changedProperties.has(\"menuId\")) {\n      if (this.menuId && !this._menuController) {\n        this._menuController = new MenuController(this);\n      }\n      if (!this.menuId && this._menuController) {\n        this._menuController = null;\n      }\n    }\n  }\n\n  // Delegate clicks on host to the button element.\n  click() {\n    this.buttonEl.click();\n  }\n\n  checkForLabelText() {\n    this.hasVisibleLabel = this.slotEl\n      ?.assignedNodes()\n      .some(node => node.textContent.trim());\n  }\n\n  labelTemplate() {\n    if (this.label) {\n      return this.label;\n    }\n    return html`<slot @slotchange=${this.checkForLabelText}></slot>`;\n  }\n\n  iconTemplate(position) {\n    if (this.iconSrc && position == this.iconPosition) {\n      return html`<img src=${this.iconSrc} role=\"presentation\" />`;\n    }\n    return null;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttonStyles}\"\n      />\n      <button\n        ?disabled=${this.disabled || this.parentDisabled}\n        title=${ifDefined(this.title || this.tooltipText)}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-expanded=${ifDefined(this.ariaExpanded)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        accesskey=${ifDefined(this.accessKey)}\n      >\n        <span\n          class=${classMap({\n            labelled: this.label || this.hasVisibleLabel,\n            \"button-background\": true,\n            badged:\n              (this.iconSrc || this.type.includes(\"icon\")) && this.attention,\n          })}\n          part=\"button\"\n          type=${this.type}\n          size=${this.size}\n        >\n          ${this.iconTemplate(\"start\")}\n          <label\n            is=\"moz-label\"\n            shownaccesskey=${ifDefined(this.accessKey)}\n            part=\"moz-button-label\"\n          >\n            ${this.labelTemplate()}\n          </label>\n          ${this.iconTemplate(\"end\")}\n        </span>\n      </button>\n    `;\n  }\n}\ncustomElements.define(\"moz-button\", MozButton);\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.formatAccessKey();\n      }).observe(this, { characterData: true, childList: true, subtree: true });\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#observer.disconnect();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nexport const ERRORS = Object.freeze({\n  /** User is not authorized to restore a backup archive */\n  UNAUTHORIZED: 1,\n  /** Selected backup archive can't be restored because it is corrupt */\n  CORRUPTED_ARCHIVE: 2,\n  /**\n   * Selected backup archive can't be restored because the backup manifest\n   * version is too old, from the future, or invalid\n   */\n  UNSUPPORTED_BACKUP_VERSION: 3,\n  /** Backup service was not started or is not running */\n  UNINITIALIZED: 4,\n  /** Could not read from or write to the file system */\n  FILE_SYSTEM_ERROR: 5,\n  /** Encryption of backup archive failed */\n  ENCRYPTION_FAILED: 6,\n  /** Decryption of backup archive failed */\n  DECRYPTION_FAILED: 7,\n  /** Recovery of backup failed without a more specific cause */\n  RECOVERY_FAILED: 8,\n  /** Unknown error with backup system without a more specific cause */\n  UNKNOWN: 9,\n  /**\n   * Backup system tried to enable backup encryption but it was\n   * already enabled\n   */\n  ENCRYPTION_ALREADY_ENABLED: 10,\n  /**\n   * Backup system tried to disable backup encryption but it was\n   * already disabled\n   */\n  ENCRYPTION_ALREADY_DISABLED: 11,\n  /** User supplied a new password that is not a valid password */\n  INVALID_PASSWORD: 12,\n  /**\n   * An error internal to the code that is likely caused by a bug\n   * or other programmer error.\n   */\n  INTERNAL_ERROR: 13,\n  /**\n   * A backup cannot be recovered because the backup file was created\n   * by a different application than the currently running application\n   */\n  UNSUPPORTED_APPLICATION: 14,\n});\n\n/**\n * These are steps that the BackupService or any of its subcomponents might\n * be going through during configuration, creation, deletion of or restoration\n * from a backup. This is used to provide extra information to our error\n * telemetry.\n */\nexport const STEPS = Object.freeze({\n  /**\n   * This is the initial step upon creating a backup before any other steps\n   * begin.\n   */\n  CREATE_BACKUP_ENTRYPOINT: 1,\n\n  /**\n   * Determine the final destination for the written archive.\n   */\n  CREATE_BACKUP_RESOLVE_DESTINATION: 2,\n\n  /**\n   * Generate the manifest object for the backup.\n   */\n  CREATE_BACKUP_CREATE_MANIFEST: 3,\n\n  /**\n   * Create the main `backups` working directory in the profile directory if it\n   * doesn't already exist.\n   */\n  CREATE_BACKUP_CREATE_BACKUPS_FOLDER: 4,\n\n  /**\n   * Create the staging directory for the backup.\n   */\n  CREATE_BACKUP_CREATE_STAGING_FOLDER: 5,\n\n  /**\n   * Attempt to load the encryption state if one exists.\n   */\n  CREATE_BACKUP_LOAD_ENCSTATE: 6,\n\n  /**\n   * Run the backup routine for each BackupResource.\n   */\n  CREATE_BACKUP_RUN_BACKUP: 7,\n\n  /**\n   * After populating with the data from each BackupResource, verify that\n   * the manifest adheres to the BackupManifest schema.\n   */\n  CREATE_BACKUP_VERIFY_MANIFEST: 8,\n\n  /**\n   * Write the backup manifest to the staging directory.\n   */\n  CREATE_BACKUP_WRITE_MANIFEST: 9,\n\n  /**\n   * Rename the staging directory with the time code, and clear out any\n   * expired directories.\n   */\n  CREATE_BACKUP_FINALIZE_STAGING: 10,\n\n  /**\n   * Compress the staging directory into a single file.\n   */\n  CREATE_BACKUP_COMPRESS_STAGING: 11,\n\n  /**\n   * Generate the single-file archive.\n   */\n  CREATE_BACKUP_CREATE_ARCHIVE: 12,\n\n  /**\n   * Finalize the single-file archive and move it into the destination\n   * directory.\n   */\n  CREATE_BACKUP_FINALIZE_ARCHIVE: 13,\n});\n","import __chrome_styles_loader__restorefrombackupStyles from \"browser/components/backup/content/restore-from-backup.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-message-bar.mjs\";\n\nimport { ERRORS } from \"chrome://browser/content/backup/backup-constants.mjs\";\n\n/**\n * Any recovery error messaging should be defined in Fluent with both\n * a `heading` attribute and a `message` attribute.\n */\nconst RECOVERY_ERROR_L10N_IDS = Object.freeze({\n  [ERRORS.UNAUTHORIZED]: \"restore-from-backup-error-incorrect-password\",\n  [ERRORS.CORRUPTED_ARCHIVE]: \"restore-from-backup-error-corrupt-file\",\n  [ERRORS.UNSUPPORTED_BACKUP_VERSION]:\n    \"restore-from-backup-error-unsupported-version\",\n  [ERRORS.UNINITIALIZED]: \"restore-from-backup-error-recovery-failed\",\n  [ERRORS.FILE_SYSTEM_ERROR]: \"restore-from-backup-error-recovery-failed\",\n  [ERRORS.DECRYPTION_FAILED]: \"restore-from-backup-error-recovery-failed\",\n  [ERRORS.RECOVERY_FAILED]: \"restore-from-backup-error-recovery-failed\",\n  [ERRORS.UNKNOWN]: \"restore-from-backup-error-went-wrong\",\n  [ERRORS.INTERNAL_ERROR]: \"restore-from-backup-error-went-wrong\",\n  [ERRORS.UNSUPPORTED_APPLICATION]:\n    \"restore-from-backup-error-unsupported-application\",\n});\n\n/**\n * @param {number} errorCode\n *   Error code from backup-constants.mjs:ERRORS\n * @returns {string}\n *   L10N ID for error messaging for the given error code; the L10N\n *   ID should have both a `heading` and a `message` attribute\n */\nfunction getRecoveryErrorL10nId(errorCode) {\n  return (\n    RECOVERY_ERROR_L10N_IDS[errorCode] ??\n    RECOVERY_ERROR_L10N_IDS[ERRORS.UNKNOWN]\n  );\n}\n\n/**\n * The widget for allowing users to select and restore from a\n * a backup file.\n */\nexport default class RestoreFromBackup extends MozLitElement {\n  #placeholderFileIconURL = \"chrome://global/skin/icons/page-portrait.svg\";\n\n  static properties = {\n    backupFilePath: { type: String },\n    backupFileToRestore: { type: String, reflect: true },\n    backupFileInfo: { type: Object },\n    _fileIconURL: { type: String },\n    recoveryInProgress: { type: Boolean },\n    recoveryErrorCode: { type: Number },\n  };\n\n  static get queries() {\n    return {\n      filePicker: \"#backup-filepicker-input\",\n      passwordInput: \"#backup-password-input\",\n      cancelButtonEl: \"#restore-from-backup-cancel-button\",\n      confirmButtonEl: \"#restore-from-backup-confirm-button\",\n      chooseButtonEl: \"#backup-filepicker-button\",\n      errorMessageEl: \"#restore-from-backup-error\",\n    };\n  }\n\n  constructor() {\n    super();\n    this._fileIconURL = \"\";\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n\n    if (this.backupFileToRestore && !this.backupFileInfo) {\n      this.getBackupFileInfo();\n    }\n\n    this.addEventListener(\"BackupUI:SelectNewFilepickerPath\", this);\n  }\n\n  handleEvent(event) {\n    if (event.type == \"BackupUI:SelectNewFilepickerPath\") {\n      let { path, iconURL } = event.detail;\n      this.backupFileToRestore = path;\n      this._fileIconURL = iconURL;\n    }\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"backupFileToRestore\")) {\n      this.backupFileInfo = null;\n      this.getBackupFileInfo();\n    }\n  }\n\n  async handleChooseBackupFile() {\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:ShowFilepicker\", {\n        bubbles: true,\n        detail: {\n          win: window.browsingContext,\n          filter: \"filterHTML\",\n          displayDirectoryPath: this.backupFileToRestore,\n        },\n      })\n    );\n  }\n\n  getBackupFileInfo() {\n    let backupFile = this.backupFileToRestore;\n    if (!backupFile) {\n      return;\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"getBackupFileInfo\", {\n        bubbles: true,\n        composed: true,\n        detail: {\n          backupFile,\n        },\n      })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  handleConfirm() {\n    let backupFile = this.backupFileToRestore;\n    if (!backupFile || this.recoveryInProgress) {\n      return;\n    }\n    let backupPassword = this.passwordInput?.value;\n    this.dispatchEvent(\n      new CustomEvent(\"restoreFromBackupConfirm\", {\n        bubbles: true,\n        composed: true,\n        detail: {\n          backupFile,\n          backupPassword,\n        },\n      })\n    );\n  }\n\n  controlsTemplate() {\n    let iconURL =\n      this.backupFileToRestore &&\n      (this._fileIconURL || this.#placeholderFileIconURL);\n    return html`\n      <fieldset id=\"backup-restore-controls\">\n        <fieldset id=\"backup-filepicker-controls\">\n          <label\n            id=\"backup-filepicker-label\"\n            for=\"backup-filepicker-input\"\n            data-l10n-id=\"restore-from-backup-filepicker-label\"\n          ></label>\n          <div id=\"backup-filepicker\">\n            <input\n              id=\"backup-filepicker-input\"\n              type=\"text\"\n              readonly\n              value=${this.backupFileToRestore}\n              style=\"background-image: url(${ifDefined(iconURL)})\"\n            />\n            <moz-button\n              id=\"backup-filepicker-button\"\n              @click=${this.handleChooseBackupFile}\n              data-l10n-id=\"restore-from-backup-file-choose-button\"\n              aria-controls=\"backup-filepicker-input\"\n            ></moz-button>\n          </div>\n        </fieldset>\n\n        <fieldset id=\"password-entry-controls\">\n          ${this.backupFileInfo?.isEncrypted\n            ? this.passwordEntryTemplate()\n            : null}\n        </fieldset>\n      </fieldset>\n    `;\n  }\n\n  passwordEntryTemplate() {\n    return html` <fieldset id=\"backup-password\">\n      <label id=\"backup-password-label\" for=\"backup-password-input\">\n        <span\n          id=\"backup-password-span\"\n          data-l10n-id=\"restore-from-backup-password-label\"\n        ></span>\n        <input type=\"password\" id=\"backup-password-input\" />\n      </label>\n      <label\n        id=\"backup-password-description\"\n        data-l10n-id=\"restore-from-backup-password-description\"\n      ></label>\n    </fieldset>`;\n  }\n\n  contentTemplate() {\n    let buttonL10nId = !this.recoveryInProgress\n      ? \"restore-from-backup-confirm-button\"\n      : \"restore-from-backup-restoring-button\";\n\n    return html`\n      <div\n        id=\"restore-from-backup-wrapper\"\n        aria-labelledby=\"restore-from-backup-header\"\n        aria-describedby=\"restore-from-backup-description\"\n      >\n        <h1\n          id=\"restore-from-backup-header\"\n          class=\"heading-medium\"\n          data-l10n-id=\"restore-from-backup-header\"\n        ></h1>\n        <main id=\"restore-from-backup-content\">\n          ${this.recoveryErrorCode ? this.errorTemplate() : null}\n          ${this.backupFileInfo ? this.descriptionTemplate() : null}\n          ${this.controlsTemplate()}\n        </main>\n\n        <moz-button-group id=\"restore-from-backup-button-group\">\n          <moz-button\n            id=\"restore-from-backup-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"restore-from-backup-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"restore-from-backup-confirm-button\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=${buttonL10nId}\n            ?disabled=${!this.backupFileToRestore || this.recoveryInProgress}\n          ></moz-button>\n        </moz-button-group>\n      </div>\n    `;\n  }\n\n  descriptionTemplate() {\n    let { date } = this.backupFileInfo;\n    let dateTime = date && new Date(date).getTime();\n    return html`\n      <div id=\"restore-from-backup-description\">\n        <span\n          id=\"restore-from-backup-description-span\"\n          data-l10n-id=\"restore-from-backup-description-with-metadata\"\n          data-l10n-args=${JSON.stringify({\n            date: dateTime,\n          })}\n        ></span>\n        <a\n          id=\"restore-from-backup-learn-more-link\"\n          is=\"moz-support-link\"\n          support-page=\"todo-backup\"\n          data-l10n-id=\"restore-from-backup-support-link\"\n        ></a>\n      </div>\n    `;\n  }\n\n  errorTemplate() {\n    return html`\n      <moz-message-bar\n        id=\"restore-from-backup-error\"\n        type=\"error\"\n        data-l10n-id=${getRecoveryErrorL10nId(this.recoveryErrorCode)}\n      >\n      </moz-message-bar>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__restorefrombackupStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"restore-from-backup\", RestoreFromBackup);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-card.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"./restore-from-backup.mjs\";\n\nwindow.MozXULElement.insertFTLIfNeeded(\"locales-preview/backupSettings.ftl\");\nwindow.MozXULElement.insertFTLIfNeeded(\"branding/brand.ftl\");\n\nexport default {\n  title: \"Domain-specific UI Widgets/Backup/Restore from Backup\",\n  component: \"restore-from-backup\",\n  argTypes: {},\n};\n\nconst Template = ({\n  backupFilePath,\n  backupFileToRestore,\n  backupFileInfo,\n  recoveryInProgress,\n  recoveryErrorCode,\n}) => html`\n  <moz-card style=\"width: fit-content;\">\n    <restore-from-backup\n      .backupFilePath=${backupFilePath}\n      .backupFileToRestore=${backupFileToRestore}\n      .backupFileInfo=${backupFileInfo}\n      .recoveryInProgress=${recoveryInProgress}\n      .recoveryErrorCode=${recoveryErrorCode}\n    ></restore-from-backup>\n  </moz-card>\n`;\n\nexport const BackupFound = Template.bind({});\nBackupFound.args = {\n  backupFilePath: \"/Some/User/Documents\",\n  backupFileToRestore: \"/Some/User/Documents/Firefox Backup/backup.html\",\n  backupFileInfo: { date: new Date(), isEncrypted: null },\n  recoveryErrorCode: 0,\n};\n\nexport const EncryptedBackupFound = Template.bind({});\nEncryptedBackupFound.args = {\n  backupFilePath: \"/Some/User/Documents\",\n  backupFileToRestore: \"/Some/User/Documents/Firefox Backup/backup.html\",\n  backupFileInfo: { date: new Date(), isEncrypted: true },\n  recoveryErrorCode: 0,\n};\n\nexport const RecoveryInProgress = Template.bind({});\nRecoveryInProgress.args = {\n  backupFilePath: \"/Some/User/Documents\",\n  backupFileToRestore: \"/Some/User/Documents/Firefox Backup/backup.html\",\n  backupFileInfo: { date: new Date() },\n  recoveryInProgress: true,\n};\n\nexport const NoBackupFound = Template.bind({});\n"],"names":[],"sourceRoot":""}