{"version":3,"file":"moz-button-group-moz-button-group-stories.c6ede63e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-card/moz-card.mjs","webpack:///../../../toolkit/content/widgets/moz-button-group/moz-button-group.stories.mjs","webpack:///../../../toolkit/content/widgets/moz-button-group/moz-button-group.mjs"],"sourcesContent":["import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible. You can use the \"expanded\" attribute to force the accordion\n * card to show its content on initial render.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} iconSrc - Path to the icon that should be displayed in the card.\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @property {boolean} expanded - A flag to indicate whether the card is\n *  expanded or not. Can be used to expand the content section of the\n *  accordion card on initial render.\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentEl: \"#content\",\n    summaryEl: \"summary\",\n    contentSlotEl: \"#content-slot\",\n  };\n\n  static properties = {\n    heading: { type: String, fluent: true },\n    iconSrc: { type: String },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.expanded = false;\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\" part=\"moz-card-heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          !!this.iconSrc,\n          () =>\n            html`<img\n              id=\"heading-icon\"\n              src=${this.iconSrc}\n              role=\"presentation\"\n            />`\n        )}\n        <span id=\"heading\" title=${ifDefined(this.heading)} part=\"heading\"\n          >${this.heading}</span\n        >\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details\n          id=\"moz-card-details\"\n          @toggle=${this.onToggle}\n          ?open=${this.expanded}\n        >\n          <summary part=\"summary\">${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot id=\"content-slot\"></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      <div id=\"moz-card-details\">\n        ${this.headingTemplate()}\n        <div id=\"content\" aria-describedby=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  onToggle() {\n    this.expanded = this.detailsEl.open;\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"../vendor/lit.all.mjs\";\nimport \"../moz-card/moz-card.mjs\";\nimport {\n  PLATFORM_LINUX,\n  PLATFORM_MACOS,\n  PLATFORM_WINDOWS,\n} from \"./moz-button-group.mjs\";\n\nexport default {\n  title: \"UI Widgets/Button Group\",\n  component: \"moz-button-group\",\n  argTypes: {\n    platform: {\n      options: [PLATFORM_LINUX, PLATFORM_MACOS, PLATFORM_WINDOWS],\n      control: { type: \"select\" },\n    },\n  },\n  parameters: {\n    status: \"stable\",\n    fluent: `\nmoz-button-group-p = The button group is below. Card for emphasis.\nmoz-button-group-ok = OK\nmoz-button-group-cancel = Cancel\n    `,\n  },\n};\n\nconst Template = ({ platform }) => html`\n  <moz-card type=\"default\" style=\"max-width: 400px\">\n    <p data-l10n-id=\"moz-button-group-p\"></p>\n    <moz-button-group .platform=${platform}>\n      <moz-button\n        type=\"primary\"\n        data-l10n-id=\"moz-button-group-ok\"\n      ></moz-button>\n      <moz-button data-l10n-id=\"moz-button-group-cancel\"></moz-button>\n    </moz-button-group>\n  </moz-card>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  // Platform will auto-detected.\n};\n\nexport const Windows = Template.bind({});\nWindows.args = {\n  platform: PLATFORM_WINDOWS,\n};\nexport const Mac = Template.bind({});\nMac.args = {\n  platform: PLATFORM_MACOS,\n};\nexport const Linux = Template.bind({});\nLinux.args = {\n  platform: PLATFORM_LINUX,\n};\n","import __chrome_styles_loader__mozbuttongroupStyles from \"toolkit/content/widgets/moz-button-group/moz-button-group.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nexport const PLATFORM_LINUX = \"linux\";\nexport const PLATFORM_MACOS = \"macosx\";\nexport const PLATFORM_WINDOWS = \"win\";\n\n/**\n * A grouping of buttons. Primary button order will be set automatically based\n * on class=\"primary\", type=\"submit\" or autofocus attribute. Set slot=\"primary\"\n * on a primary button that does not have primary styling to set its position.\n *\n * @tagname moz-button-group\n * @property {string} platform - The detected platform, set automatically.\n */\nexport default class MozButtonGroup extends MozLitElement {\n  static queries = {\n    defaultSlotEl: \"slot:not([name])\",\n    primarySlotEl: \"slot[name=primary]\",\n  };\n\n  static properties = {\n    platform: { state: true },\n  };\n\n  constructor() {\n    super();\n    this.#detectPlatform();\n  }\n\n  #detectPlatform() {\n    if (typeof AppConstants !== \"undefined\") {\n      this.platform = AppConstants.platform;\n    } else if (navigator.platform.includes(\"Linux\")) {\n      this.platform = PLATFORM_LINUX;\n    } else if (navigator.platform.includes(\"Mac\")) {\n      this.platform = PLATFORM_MACOS;\n    } else {\n      this.platform = PLATFORM_WINDOWS;\n    }\n  }\n\n  onSlotchange() {\n    for (let child of this.defaultSlotEl.assignedNodes()) {\n      if (!(child instanceof Element)) {\n        // Text nodes won't support classList or getAttribute.\n        continue;\n      }\n      switch (child.localName) {\n        case \"button\":\n          if (\n            child.classList.contains(\"primary\") ||\n            child.getAttribute(\"type\") == \"submit\" ||\n            child.hasAttribute(\"autofocus\") ||\n            child.hasAttribute(\"default\")\n          ) {\n            child.slot = \"primary\";\n          }\n          break;\n        case \"moz-button\":\n          if (child.type == \"primary\" || child.type == \"destructive\") {\n            child.slot = \"primary\";\n          }\n          break;\n      }\n    }\n    this.#reorderLightDom();\n  }\n\n  #reorderLightDom() {\n    let primarySlottedChildren = [...this.primarySlotEl.assignedNodes()];\n    if (this.platform == PLATFORM_WINDOWS) {\n      primarySlottedChildren.reverse();\n      for (let child of primarySlottedChildren) {\n        child.parentElement.prepend(child);\n      }\n    } else {\n      for (let child of primarySlottedChildren) {\n        // Ensure the primary buttons are at the end of the light DOM.\n        child.parentElement.append(child);\n      }\n    }\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has(\"platform\")) {\n      this.#reorderLightDom();\n    }\n  }\n\n  render() {\n    let slots = [\n      html` <slot @slotchange=${this.onSlotchange}></slot> `,\n      html` <slot name=\"primary\"></slot> `,\n    ];\n    if (this.platform == PLATFORM_WINDOWS) {\n      slots = [slots[1], slots[0]];\n    }\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttongroupStyles}\"\n      />\n      ${slots}\n    `;\n  }\n}\ncustomElements.define(\"moz-button-group\", MozButtonGroup);\n"],"names":[],"sourceRoot":""}