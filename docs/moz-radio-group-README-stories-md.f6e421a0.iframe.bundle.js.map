{"version":3,"file":"moz-radio-group-README-stories-md.f6e421a0.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnlaA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;;AAEA;AACA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtsources":["webpack:///../../../toolkit/content/widgets/moz-fieldset/moz-fieldset.mjs","webpack:///./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack:///./node_modules/@mdx-js/react/index.js","webpack:///../../../toolkit/content/widgets/moz-radio-group/README.stories.md","webpack:///../../../toolkit/content/widgets/lit-select-control.mjs","webpack:///./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs","webpack:///./node_modules/react/jsx-runtime.js","webpack:///../../../toolkit/content/widgets/moz-radio-group/moz-radio-group.mjs","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import __chrome_styles_loader__mozfieldsetStyles from \"toolkit/content/widgets/moz-fieldset/moz-fieldset.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\n// Functions to wrap a string in a heading.\nconst HEADING_LEVEL_TEMPLATES = {\n  1: label => html`<h1>${label}</h1>`,\n  2: label => html`<h2>${label}</h2>`,\n  3: label => html`<h3>${label}</h3>`,\n  4: label => html`<h4>${label}</h4>`,\n  5: label => html`<h5>${label}</h5>`,\n  6: label => html`<h6>${label}</h6>`,\n};\n\n/**\n * Fieldset wrapper to lay out form inputs consistently.\n *\n * @tagname moz-fieldset\n * @property {string} label - The label for the fieldset's legend.\n * @property {string} description - The description for the fieldset.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {number} headingLevel - Render the legend in a heading of this level.\n * @property {boolean} disabled - Whether the fieldset and its children are disabled.\n * @property {string} iconSrc - The src for an optional icon.\n */\nexport default class MozFieldset extends MozLitElement {\n  static properties = {\n    label: { type: String, fluent: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    ariaLabel: { type: String, fluent: true, mapped: true },\n    ariaOrientation: { type: String, mapped: true },\n    headingLevel: { type: Number, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    iconSrc: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.headingLevel = -1;\n    this.disabled = false;\n    this.iconSrc = \"\";\n  }\n\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"disabled\")) {\n      this.#updateChildDisabledState();\n    }\n  }\n\n  #updateChildDisabledState() {\n    const formControls = [...this.querySelectorAll(\"*\")].filter(\n      element => \"disabled\" in element || \"parentDisabled\" in element\n    );\n\n    formControls.forEach(control => {\n      if (\"parentDisabled\" in control) {\n        control.parentDisabled = this.disabled;\n      }\n\n      if (this.disabled) {\n        control.setAttribute(\"disabled\", \"\");\n      } else {\n        control.removeAttribute(\"disabled\");\n      }\n    });\n  }\n\n  descriptionTemplate() {\n    if (this.description) {\n      return html`<span id=\"description\" class=\"description\">\n          ${this.description}\n        </span>\n        ${this.supportPageTemplate()}`;\n    }\n    return \"\";\n  }\n\n  supportPageTemplate() {\n    if (this.supportPage) {\n      return html`<a\n        is=\"moz-support-link\"\n        support-page=${this.supportPage}\n        part=\"support-link\"\n      ></a>`;\n    }\n    return html`<slot name=\"support-link\"></slot>`;\n  }\n\n  legendTemplate() {\n    let label =\n      HEADING_LEVEL_TEMPLATES[this.headingLevel]?.(this.label) || this.label;\n    return html`<legend part=\"label\">${this.iconTemplate()}${label}</legend>`;\n  }\n\n  iconTemplate() {\n    if (!this.iconSrc) {\n      return \"\";\n    }\n    return html`<img src=${this.iconSrc} role=\"presentation\" class=\"icon\" />`;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozfieldsetStyles}\"\n      />\n      <fieldset\n        ?disabled=${this.disabled}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-describedby=${ifDefined(\n          this.description ? \"description\" : undefined\n        )}\n        aria-orientation=${ifDefined(this.ariaOrientation)}\n      >\n        ${this.label ? this.legendTemplate() : \"\"}\n        ${!this.description ? this.supportPageTemplate() : \"\"}\n        ${this.descriptionTemplate()}\n        <div id=\"inputs\" part=\"inputs\">\n          <slot></slot>\n        </div>\n      </fieldset>\n    `;\n  }\n}\ncustomElements.define(\"moz-fieldset\", MozFieldset);\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","export {\n  MDXContext,\n  MDXProvider,\n  useMDXComponents,\n  withMDXComponents\n} from './lib/index.js'\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/firefox-desktop-components/firefox-desktop-components/gecko/browser/components/storybook/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Canvas, ArgTypes } from \"@storybook/addon-docs\";\nimport \"toolkit-widgets/moz-radio-group/moz-radio-group.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"UI Widgets/ Radio Group/README\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        },\n        viewMode: \"docs\"\n      }\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n      id: \"mozradiogroup\",\n      children: \"MozRadioGroup\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" is an element that allows users to select one option from a list of related options. It is designed to be used in tandem with our \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" custom element, which is a wrapper around an \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"<input type=\\\"radio\\\">\"\n      }), \" HTML element.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-radio-group name=\\\"contact\\\" label=\\\"Select a contact method\\\" value=\\\"email\\\"><moz-radio value=\\\"email\\\" label=\\\"Email\\\" /><moz-radio value=\\\"phone\\\" label=\\\"Phone\\\" /><moz-radio value=\\\"mail\\\" label=\\\"Mail\\\" /></moz-radio-group></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsxs(\"moz-radio-group\", {\n          name: \"contact\",\n          label: \"Select a contact method\",\n          value: \"email\",\n          children: [/*#__PURE__*/_jsx(\"moz-radio\", {\n            value: \"email\",\n            label: \"Email\"\n          }), /*#__PURE__*/_jsx(\"moz-radio\", {\n            value: \"phone\",\n            label: \"Phone\"\n          }), /*#__PURE__*/_jsx(\"moz-radio\", {\n            value: \"mail\",\n            label: \"Mail\"\n          })]\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"More information about this component including design, writing, and localization guidelines, as well as design assets, can be found on our \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://acorn.firefox.com/latest/components/radio/desktop-A9fsJE6U\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Acorn site\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"code\",\n      children: \"Code\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The source for \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" can be found under \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/content/widgets/moz-radio-group/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"toolkit/content/widgets/moz-radio-group/\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"when-to-use-moz-radio-group\",\n      children: [\"When to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Use a radio group when you are trying to get a user to select only one option from a relatively short list of options.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Use a radio group over a select when it is advantageous to have all possible options to be immediately visible to the user.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"when-not-to-use-moz-radio-group\",\n      children: [\"When not to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"If it should be possible for the user to select multiple options, use \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"moz-checkbox\"\n        }), \".\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.li, {\n        children: [\"If the intention is for a user to turn something off or on with their selection, and for their selection to have an immediate effect, consider using \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"moz-toggle\"\n        }), \" instead.\"]\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"how-to-use-moz-radio-group\",\n      children: [\"How to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"importing-the-element\",\n      children: \"Importing the element\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Like other custom elements, you should usually be able to rely on \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" getting lazy loaded at the time of first use. See \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://firefox-source-docs.mozilla.org/browser/components/storybook/docs/README.reusable-widgets.stories.html#using-new-design-system-components\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"this documentation\"\n      }), \" for more information on using design system custom elements.\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"combining-moz-radio-and-moz-radio-group\",\n      children: [\"Combining \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" must be used together in order for the elements to behave as expected. \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements must also be direct children of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \"; they should not need to be wrapped in additional elements for purposes of positioning or spacing as those style attributes are provided by \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"If you are using the elements improperly you may see the following \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/rev/a215fbd85843a91fcd8fdc33aa9cd9a357403f35/toolkit/content/widgets/moz-radio-group/moz-radio-group.mjs#260\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"console error\"\n      }), \":\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-sh\",\n        children: \"moz-radio can only be used in moz-radio-group element.\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-value-for-the-group\",\n      children: [\"Setting \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"value\"\n      }), \" for the group\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"value\"\n      }), \" property or attribute of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" can be used to set the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \" state of its \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements. While it is also possible to set \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \" directly individual \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements, in most cases it's clearer to set \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"value\"\n      }), \" on the group. This allows \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" to serve as the single source of truth for the checked/unchecked state of related \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-radio-group name=\\\"greeting\\\" label=\\\"Select a preferred greeting\\\" value=\\\"hola\\\">\\n  <moz-radio value=\\\"hi\\\" label=\\\"Hi\\\"></moz-radio>\\n  <moz-radio value=\\\"hello\\\" label=\\\"Hello\\\"></moz-radio>\\n  <moz-radio value=\\\"hola\\\" label=\\\"Hola\\\"></moz-radio>\\n</moz-radio-group>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-radio-group name=\\\"greeting\\\" label=\\\"Select a preferred greeting\\\" value=\\\"hola\\\"><moz-radio value=\\\"hi\\\" label=\\\"Hi\\\" /><moz-radio value=\\\"hello\\\" label=\\\"Hello\\\" /><moz-radio value=\\\"hola\\\" label=\\\"Hola\\\" /></moz-radio-group></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsxs(\"moz-radio-group\", {\n          name: \"greeting\",\n          label: \"Select a preferred greeting\",\n          value: \"hola\",\n          children: [/*#__PURE__*/_jsx(\"moz-radio\", {\n            value: \"hi\",\n            label: \"Hi\"\n          }), /*#__PURE__*/_jsx(\"moz-radio\", {\n            value: \"hello\",\n            label: \"Hello\"\n          }), /*#__PURE__*/_jsx(\"moz-radio\", {\n            value: \"hola\",\n            label: \"Hola\"\n          })]\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-name-for-the-group\",\n      children: [\"Setting \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"name\"\n      }), \" for the group\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"name\"\n      }), \" attribute used to associate multiple \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements can only be set on the containing \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" element. This is different from HTML \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"<input type=\\\"radio\\\">\"\n      }), \" elements where \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"name\"\n      }), \" can be set on each of the individual inputs. With \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"name\"\n      }), \" propagates down the the child \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements.\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"setting-the-disabled-state\",\n      children: [\"Setting the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state can be set on \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" to disable all of its child \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-radio-group name=\\\"group-disabled\\\" disabled>\\n  <moz-radio value=\\\"disabled1\\\" label=\\\"I'm disabled\\\"></moz-radio>\\n  <moz-radio value=\\\"disabled2\\\" label=\\\"I'm disabled too\\\"></moz-radio>\\n</moz-radio-group>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" can also be set on \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements to control their state independently of the rest of the group:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-radio-group name=\\\"button-disabled\\\">\\n  <moz-radio value=\\\"enabled\\\" label=\\\"I'm enabled\\\"></moz-radio>\\n  <moz-radio value=\\\"disabled\\\" label=\\\"I'm disabled\\\" disabled></moz-radio>\\n</moz-radio-group>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The one caveat to this is that it is not possible to programmatically enable an individual \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" element when the containing group is \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"fluent-usage\",\n      children: \"Fluent usage\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"label\"\n      }), \" properties of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" will generally be provided via \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://mozilla-l10n.github.io/localizer-documentation/tools/fluent/basic_syntax.html#attributes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Fluent attributes\"\n      }), \". \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-attrs\"\n      }), \" are set automatically, so to get things working you just need to supply a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-id\"\n      }), \" as you would with any other element.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"For example the following Fluent messages:\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group-id =\\n  .label = This is the label for the group\\nfirst-moz-radio-id =\\n  .label = This is the label for the first radio button\\nsecond-moz-radio-id =\\n  .label = This is the label for the second radio button\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n      children: \"Would be used to set labels on the different elements as follows:\"\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-radio-group data-l10n-id=\\\"moz-radio-group-id\\\">\\n  <moz-radio data-l10n-id=\\\"first-moz-radio-id\\\"></moz-radio>\\n  <moz-radio data-l10n-id=\\\"second-moz-radio-id\\\"></moz-radio>\\n</moz-radio-group>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"nested-fields\",\n      children: \"Nested fields\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio\"\n      }), \" elements support nested or dependent fields via a \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"nested\"\n      }), \" named\\nslot. These fields will be rendered below the radio element in which they are\\nnested, and will be indented to visually indicate dependence. Any nested fields\\nwill mirror the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \" state of the radio and will also become \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"disabled\"\n      }), \"\\nwhenever the radio is not \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"checked\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"When nesting fields under a radio element we do not need to do any additional\\nwrapping with \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-fieldset\"\n      }), \", since \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-radio-group\"\n      }), \" already relies on\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-fieldset\"\n      }), \" under the hood:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-radio-group label=\\\"Label for the group\\\">\\n  <moz-radio label=\\\"Some radio button\\\" value=\\\"bar\\\"></moz-radio>\\n  <moz-radio label=\\\"another another radio button\\\" value=\\\"baz\\\"></moz-radio>\\n  <moz-radio label=\\\"Parent radio button\\\" value=\\\"foo\\\" checked>\\n    <moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox one\\\" value=\\\"one\\\"></moz-checkbox>\\n    <moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox two\\\" value=\\\"two\\\" checked></moz-checkbox>\\n  </moz-radio>\\n</moz-radio-group>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-radio-group label=\\\"Label for the group\\\"><moz-radio label=\\\"Some radio button\\\" value=\\\"bar\\\" /><moz-radio label=\\\"another another radio button\\\" value=\\\"baz\\\" /><moz-radio label=\\\"Parent radio button\\\" value=\\\"foo\\\" checked><moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox one\\\" value=\\\"one\\\" /><moz-checkbox slot=\\\"nested\\\" label=\\\"Nested checkbox two\\\" value=\\\"two\\\" checked /></moz-radio></moz-radio-group></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsxs(\"moz-radio-group\", {\n          label: \"Label for the group\",\n          children: [/*#__PURE__*/_jsx(\"moz-radio\", {\n            label: \"Some radio button\",\n            value: \"bar\"\n          }), /*#__PURE__*/_jsx(\"moz-radio\", {\n            label: \"another another radio button\",\n            value: \"baz\"\n          }), /*#__PURE__*/_jsxs(\"moz-radio\", {\n            label: \"Parent radio button\",\n            value: \"foo\",\n            checked: true,\n            children: [/*#__PURE__*/_jsx(\"moz-checkbox\", {\n              slot: \"nested\",\n              label: \"Nested checkbox one\",\n              value: \"one\"\n            }), /*#__PURE__*/_jsx(\"moz-checkbox\", {\n              slot: \"nested\",\n              label: \"Nested checkbox two\",\n              value: \"two\",\n              checked: true\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"args-table\",\n      children: \"Args Table\"\n    }), \"\\n\", /*#__PURE__*/_jsx(ArgTypes, {\n      of: \"moz-radio-group\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'UI Widgets/ Radio Group/README',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    },\n    viewMode: \"docs\"\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"./vendor/lit.all.mjs\";\nimport { MozLitElement } from \"./lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-fieldset.mjs\";\n\nconst NAVIGATION_FORWARD = \"forward\";\nconst NAVIGATION_BACKWARD = \"backward\";\n\nconst NAVIGATION_VALUE = {\n  [NAVIGATION_FORWARD]: 1,\n  [NAVIGATION_BACKWARD]: -1,\n};\n\nconst DIRECTION_RIGHT = \"Right\";\nconst DIRECTION_LEFT = \"Left\";\n\nconst NAVIGATION_DIRECTIONS = {\n  LTR: {\n    FORWARD: DIRECTION_RIGHT,\n    BACKWARD: DIRECTION_LEFT,\n  },\n  RTL: {\n    FORWARD: DIRECTION_LEFT,\n    BACKWARD: DIRECTION_RIGHT,\n  },\n};\n\n/**\n * Class that can be extended to handle managing the selected and focus states\n * of child elements using a roving tabindex. For more information on this focus\n * management pattern, see:\n * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex\n *\n * Child elements must use SelectControlItemMixin for behavior to work as\n * expected.\n */\nexport class SelectControlBaseElement extends MozLitElement {\n  #childElements;\n  #value;\n  #checkedIndex;\n  #focusedIndex;\n\n  static properties = {\n    type: { type: String },\n    disabled: { type: Boolean, reflect: true },\n    description: { type: String, fluent: true },\n    supportPage: { type: String, attribute: \"support-page\" },\n    label: { type: String, fluent: true },\n    name: { type: String },\n    value: { type: String },\n    headingLevel: { type: Number },\n  };\n\n  static queries = {\n    fieldset: \"moz-fieldset\",\n  };\n\n  set value(newValue) {\n    this.#value = newValue;\n    this.childElements.forEach((item, index) => {\n      let isChecked = this.value === item.value;\n      item.checked = isChecked;\n      if (isChecked && !item.disabled) {\n        this.#checkedIndex = index;\n      }\n    });\n    this.syncFocusState();\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  get hasValue() {\n    return this.value === 0 || !!this.value;\n  }\n\n  set focusedIndex(newIndex) {\n    if (this.#focusedIndex !== newIndex) {\n      this.#focusedIndex = newIndex;\n      this.syncFocusState();\n    }\n  }\n\n  get checkedIndex() {\n    return this.#checkedIndex;\n  }\n\n  set checkedIndex(newIndex) {\n    if (this.#checkedIndex !== newIndex) {\n      this.#checkedIndex = newIndex;\n      this.syncFocusState();\n    }\n  }\n\n  get focusableIndex() {\n    let activeEl = this.getRootNode().activeElement;\n    let childElFocused =\n      activeEl?.localName == this.constructor.childElementName;\n\n    if (\n      this.#checkedIndex != undefined &&\n      this.#value &&\n      (this.type == \"radio\" || !childElFocused)\n    ) {\n      return this.#checkedIndex;\n    }\n\n    if (\n      this.#focusedIndex != undefined &&\n      this.type === \"listbox\" &&\n      childElFocused\n    ) {\n      return this.#focusedIndex;\n    }\n\n    return this.childElements.findIndex(item => !item.disabled);\n  }\n\n  // Query for child elements the first time they are needed + ensure they\n  // have been upgraded so we can access properties.\n  get childElements() {\n    if (!this.#childElements) {\n      this.#childElements = (\n        this.shadowRoot\n          ?.querySelector(\"slot:not([name])\")\n          ?.assignedElements() || [...this.children]\n      )?.filter(\n        el => el.localName === this.constructor.childElementName && !el.slot\n      );\n      this.#childElements.forEach(item => customElements.upgrade(item));\n    }\n    return this.#childElements;\n  }\n\n  constructor() {\n    super();\n    this.type = \"radio\";\n    this.disabled = false;\n    this.addEventListener(\"blur\", e => this.handleBlur(e), true);\n    this.addEventListener(\"keydown\", e => this.handleKeydown(e));\n  }\n\n  firstUpdated() {\n    this.syncStateToChildElements();\n  }\n\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await Promise.all(this.childElements.map(item => item.updateComplete));\n  }\n\n  syncStateToChildElements() {\n    this.childElements.forEach((item, index) => {\n      item.position = index;\n\n      if (item.checked && this.value == undefined) {\n        this.value = item.value;\n      }\n\n      if (this.value == item.value && !item.disabled) {\n        this.#checkedIndex = item.position;\n      }\n\n      item.name = this.name;\n    });\n    this.syncFocusState();\n  }\n\n  syncFocusState() {\n    let focusableIndex = this.focusableIndex;\n    this.childElements.forEach((item, index) => {\n      item.itemTabIndex = focusableIndex === index ? 0 : -1;\n    });\n  }\n\n  handleBlur(event) {\n    if (this.contains(event.relatedTarget)) {\n      return;\n    }\n    this.focusedIndex = undefined;\n  }\n\n  // NB: We may need to revise this to avoid bugs when we add more focusable\n  // elements to select control base/items.\n  handleKeydown(event) {\n    let directions = this.getNavigationDirections();\n    switch (event.key) {\n      case \"Down\":\n      case \"ArrowDown\":\n      case directions.FORWARD:\n      case `Arrow${directions.FORWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_FORWARD);\n        break;\n      }\n      case \"Up\":\n      case \"ArrowUp\":\n      case directions.BACKWARD:\n      case `Arrow${directions.BACKWARD}`: {\n        event.preventDefault();\n        this.navigate(NAVIGATION_BACKWARD);\n        break;\n      }\n    }\n  }\n\n  getNavigationDirections() {\n    if (this.isDocumentRTL) {\n      return NAVIGATION_DIRECTIONS.RTL;\n    }\n    return NAVIGATION_DIRECTIONS.LTR;\n  }\n\n  get isDocumentRTL() {\n    if (typeof Services !== \"undefined\") {\n      return Services.locale.isAppLocaleRTL;\n    }\n    return document.dir === \"rtl\";\n  }\n\n  navigate(direction) {\n    let currentIndex = this.focusableIndex;\n    let children = this.childElements;\n    let step = NAVIGATION_VALUE[direction];\n    let isRadio = this.type == \"radio\";\n\n    for (let i = 1; i < children.length; i++) {\n      // Support focus wrapping for type=\"radio\" only.\n      let nextIndex = isRadio\n        ? (currentIndex + children.length + step * i) % children.length\n        : currentIndex + step * i;\n\n      let nextItem = children[nextIndex];\n\n      if (nextItem && !nextItem.disabled) {\n        nextItem.focus();\n        if (isRadio) {\n          this.value = nextItem.value;\n          nextItem.click();\n        }\n        nextItem.focus();\n        return;\n      }\n    }\n  }\n\n  willUpdate(changedProperties) {\n    if (changedProperties.has(\"name\")) {\n      this.handleSetName();\n    }\n    if (changedProperties.has(\"disabled\")) {\n      this.childElements.forEach(item => {\n        item.requestUpdate();\n      });\n    }\n    if (changedProperties.has(\"type\")) {\n      let childRole = this.type == \"radio\" ? \"radio\" : \"option\";\n      this.childElements.forEach(item => {\n        item.role = childRole;\n      });\n    }\n  }\n\n  handleSetName() {\n    this.childElements.forEach(item => {\n      item.name = this.name;\n    });\n  }\n\n  // Re-dispatch change event so it's re-targeted to the custom element.\n  handleChange(event) {\n    event.stopPropagation();\n    this.dispatchEvent(new Event(event.type, event));\n  }\n\n  handleSlotChange() {\n    this.#childElements = null;\n    this.#focusedIndex = undefined;\n    this.#checkedIndex = undefined;\n    this.syncStateToChildElements();\n  }\n\n  render() {\n    return html`\n      <moz-fieldset\n        part=\"fieldset\"\n        description=${ifDefined(this.description)}\n        support-page=${ifDefined(this.supportPage)}\n        role=${this.type == \"radio\" ? \"radiogroup\" : \"listbox\"}\n        ?disabled=${this.disabled}\n        label=${this.label}\n        headinglevel=${this.headingLevel}\n        exportparts=\"inputs, support-link\"\n        aria-orientation=${ifDefined(this.constructor.orientation)}\n      >\n        ${!this.supportPage\n          ? html`<slot slot=\"support-link\" name=\"support-link\"></slot>`\n          : \"\"}\n        <slot\n          @slotchange=${this.handleSlotChange}\n          @change=${this.handleChange}\n        ></slot>\n      </moz-fieldset>\n    `;\n  }\n}\n\n/**\n * Class that can be extended by items nested in a subclass of\n * SelectControlBaseElement to handle selection, focus management, and keyboard\n * navigation. Implemented as a mixin to enable use with elements that inherit\n * from something other than MozLitElement.\n *\n * @param {LitElement} superClass\n * @returns LitElement\n */\nexport const SelectControlItemMixin = superClass =>\n  class extends superClass {\n    #controller;\n\n    static properties = {\n      name: { type: String },\n      value: { type: String },\n      disabled: { type: Boolean, reflect: true },\n      checked: { type: Boolean, reflect: true },\n      itemTabIndex: { type: Number, state: true },\n      role: { type: String, state: true },\n      position: { type: Number, state: true },\n    };\n\n    get controller() {\n      return this.#controller;\n    }\n\n    get isDisabled() {\n      return this.disabled || this.#controller.disabled;\n    }\n\n    constructor() {\n      super();\n      this.checked = false;\n      this.addEventListener(\"focus\", () => {\n        if (!this.disabled) {\n          this.controller.focusedIndex = this.position;\n        }\n      });\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      let hostElement = this.parentElement || this.getRootNode().host;\n      if (!(hostElement instanceof SelectControlBaseElement)) {\n        console.error(\n          `${this.localName} should only be used in an element that extends SelectControlBaseElement.`\n        );\n      }\n\n      this.#controller = hostElement;\n      this.role = this.#controller.type == \"radio\" ? \"radio\" : \"option\";\n      if (this.#controller.hasValue) {\n        this.checked = this.value === this.#controller.value;\n      }\n    }\n\n    willUpdate(changedProperties) {\n      super.willUpdate(changedProperties);\n      // Handle setting checked directly via JS.\n      if (\n        changedProperties.has(\"checked\") &&\n        this.checked &&\n        this.#controller.hasValue &&\n        this.value !== this.#controller.value\n      ) {\n        this.#controller.value = this.value;\n      }\n      // Handle un-checking directly via JS. If the checked item is un-checked,\n      // the value of the associated focus manager parent needs to be un-set.\n      if (\n        changedProperties.has(\"checked\") &&\n        !this.checked &&\n        this.#controller.hasValue &&\n        this.value === this.#controller.value\n      ) {\n        this.#controller.value = \"\";\n      }\n\n      if (changedProperties.has(\"disabled\")) {\n        // Prevent enabling a items if containing focus manager is disabled.\n        if (this.disabled === false && this.#controller.disabled) {\n          this.disabled = true;\n          return;\n        }\n\n        // Update items via focus manager parent for proper keyboard nav behavior.\n        if (this.checked || !this.#controller.hasValue) {\n          if (this.controller.checkedIndex != this.position) {\n            this.#controller.syncFocusState();\n          } else {\n            // If the newly disabled element was checked unset the checkedIndex\n            // to recompute which element should be focusable.\n            this.controller.checkedIndex = undefined;\n          }\n        }\n      }\n    }\n\n    handleClick() {\n      if (this.isDisabled || this.checked) {\n        return;\n      }\n\n      this.#controller.value = this.value;\n      if (this.getRootNode().activeElement?.localName == this.localName) {\n        this.focus();\n      }\n    }\n\n    // Re-dispatch change event so it propagates out of the element.\n    handleChange(e) {\n      this.dispatchEvent(new Event(e.type, e));\n    }\n  };\n","export * from '@mdx-js/react';\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport {\n  SelectControlBaseElement,\n  SelectControlItemMixin,\n} from \"../lit-select-control.mjs\";\nimport { MozBaseInputElement } from \"../lit-utils.mjs\";\n\n/**\n * Element used to group and associate moz-radio buttons so that they function\n * as a single form-control element.\n *\n * @tagname moz-radio-group\n * @property {boolean} disabled - Whether or not the fieldset is disabled.\n * @property {string} label - Label for the group of moz-radio elements.\n * @property {string} description - Description for the group of moz-radio elements.\n * @property {string} supportPage - Support page for the group of moz-radio elements.\n * @property {number} headingLevel - Render the label in a heading of this level.\n * @property {string} name\n *  Input name of the radio group. Propagates to moz-radio children.\n * @property {string} value\n *  Selected value for the group. Changing the value updates the checked\n *  state of moz-radio children and vice versa.\n * @property {string} ariaLabel - The aria-label text when there is no visible label.\n * @property {string} ariaDescription - The aria-description text when there is no visible description.\n * @slot default - The radio group's content, intended for moz-radio elements.\n * @slot support-link - The radio group's support link intended for moz-radio elements.\n */\nexport class MozRadioGroup extends SelectControlBaseElement {\n  static childElementName = \"moz-radio\";\n  static orientation = \"vertical\";\n\n  static properties = {\n    parentDisabled: { type: Boolean, state: true },\n  };\n}\ncustomElements.define(\"moz-radio-group\", MozRadioGroup);\n\n/**\n * Input element that allows a user to select one option from a group of options.\n *\n * @tagname moz-radio\n * @property {boolean} checked - Whether or not the input is selected.\n * @property {string} description - Description for the input.\n * @property {boolean} disabled - Whether or not the input is disabled.\n * @property {string} iconSrc - Path to an icon displayed next to the input.\n * @property {number} itemTabIndex - Tabindex of the input element.\n * @property {string} label - Label for the radio input.\n * @property {string} name\n *  Name of the input control, set by the associated moz-radio-group element.\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {string} value - Value of the radio input.\n */\nexport class MozRadio extends SelectControlItemMixin(MozBaseInputElement) {\n  static activatedProperty = \"checked\";\n\n  get isDisabled() {\n    return (\n      super.isDisabled || this.parentDisabled || this.controller.parentDisabled\n    );\n  }\n\n  inputTemplate() {\n    return html`<input\n      type=\"radio\"\n      id=\"input\"\n      .value=${this.value}\n      name=${this.name}\n      .checked=${this.checked}\n      aria-checked=${this.checked}\n      tabindex=${this.itemTabIndex}\n      ?disabled=${this.isDisabled}\n      accesskey=${ifDefined(this.accessKey)}\n      aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n      aria-describedby=\"description\"\n      aria-description=${ifDefined(\n        this.hasDescription ? undefined : this.ariaDescription\n      )}\n      @click=${this.handleClick}\n      @change=${this.handleChange}\n    />`;\n  }\n}\ncustomElements.define(\"moz-radio\", MozRadio);\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":[],"sourceRoot":""}