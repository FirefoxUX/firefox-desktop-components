{"version":3,"file":"setting-group-setting-group-stories.28e11895.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;ACpMA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../preferences/widgets/setting-group/setting-group.stories.mjs","webpack:///../preferences/widgets/setting-group/setting-group.mjs"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport \"chrome://browser/content/preferences/widgets/setting-group.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Settings/Setting Group\",\n  component: \"setting-group\",\n  parameters: {\n    status: \"in-development\",\n    handles: [\"click\", \"input\", \"change\"],\n    fluent: `\ngroup-example-label =\n  .label = Complicated grouping\n  .description = This group is showing that there can be a complicated config, not necessarily that this level of nesting should be used.\ncheckbox-example-input =\n  .label = Checkbox example of setting-control\n  .description = Could have a description like moz-checkbox.\ncheckbox-example-input2 =\n  .label = Another checkbox\nbrowser-layout-label =\n  .label = Browser layout\nbrowser-layout-radio-horizontal =\n  .label = Horizontal tabs\n  .description = Displayed at the top of the browser\nbrowser-layout-radio-vertical =\n  .label = Vertical tabs\n  .description = Displayed on the side, in the sidebar\nbrowser-layout-sidebar =\n  .label = Show sidebar\n  .description = Quickly access bookmarks, tabs from your phone, AI chatbots, and more without leaving your main view\ncookies-and-site-data =\n  .label = Cookies and Site Data\n  .description = Manage and delete cookies, history, cache, and site settings.\nclear-browsing-data =\n    .label = Clear browsing data\nstorage-usage =\n  .label = Your stored cookies, site data, and cache are currently using { $value } { $unit } of disk space.\nmanage-browsing-data =\n  .label = Manage browsing data\nmanage-exceptions =\n  .label = Manage exceptions\n  .description = You can specify which websites are always or never allowed to use cookies and site data.\nradio-example-input =\n  .label = This is a radio group\n  .description = With a lovely description.\nradio-one =\n  .label = One\n  .description = This is the first option.\nradio-two =\n  .label = Two\nradio-three =\n  .label = Three\n`,\n  },\n};\n\nfunction getSetting() {\n  return {\n    value: true,\n    on() {},\n    off() {},\n    userChange() {},\n    visible: () => true,\n    getControlConfig: c => c,\n    controllingExtensionInfo: {},\n  };\n}\n\nconst Template = ({ config }) => html`\n  <setting-group .config=${config} .getSetting=${getSetting}></setting-group>\n`;\n\nconst BOX_GROUP_CONFIG = {\n  id: \"data-usage-group\",\n  control: \"moz-box-group\",\n  items: [\n    {\n      id: \"data-usage\",\n      l10nId: \"storage-usage\",\n      control: \"moz-box-item\",\n      controlAttrs: {\n        \"data-l10n-args\": JSON.stringify({\n          value: 1.8,\n          unit: \"GB\",\n        }),\n      },\n    },\n    {\n      id: \"manage-browsing-data\",\n      l10nId: \"manage-browsing-data\",\n      control: \"moz-box-button\",\n    },\n    {\n      id: \"manage-exceptions\",\n      l10nId: \"manage-exceptions\",\n      control: \"moz-box-button\",\n    },\n  ],\n};\n\nexport const Group = Template.bind({});\nGroup.args = {\n  config: {\n    id: \"group-example\",\n    l10nId: \"group-example-label\",\n    items: [\n      {\n        id: \"checkbox-example\",\n        l10nId: \"checkbox-example-input\",\n      },\n      {\n        id: \"checkbox-example2\",\n        l10nId: \"checkbox-example-input2\",\n        supportPage: \"example-support\",\n        iconSrc: \"chrome://global/skin/icons/highlights.svg\",\n        items: [\n          {\n            id: \"checkbox-example\",\n            l10nId: \"checkbox-example-input\",\n          },\n          {\n            id: \"radio-example\",\n            l10nId: \"radio-example-input\",\n            control: \"moz-radio-group\",\n            options: [\n              {\n                l10nId: \"radio-one\",\n                value: \"one\",\n              },\n              {\n                l10nId: \"radio-two\",\n                value: \"two\",\n                items: [BOX_GROUP_CONFIG],\n              },\n              {\n                l10nId: \"radio-three\",\n                value: \"three\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport const BrowserLayout = Template.bind({});\nBrowserLayout.args = {\n  config: {\n    id: \"browser-layout-example\",\n    l10nId: \"browser-layout-label\",\n    items: [\n      {\n        id: \"tabs-layout\",\n        control: \"moz-radio-group\",\n        options: [\n          {\n            id: \"horizontal-tabs\",\n            l10nId: \"browser-layout-radio-horizontal\",\n            value: true,\n          },\n          {\n            id: \"vertical-tabs\",\n            l10nId: \"browser-layout-radio-vertical\",\n            value: false,\n          },\n        ],\n      },\n      {\n        id: \"show-sidebar\",\n        l10nId: \"browser-layout-sidebar\",\n      },\n    ],\n  },\n};\n\nexport const BoxGroup = Template.bind({});\nBoxGroup.args = {\n  config: {\n    id: \"cookies-data\",\n    l10nId: \"cookies-and-site-data\",\n    supportPage: \"sure\",\n    items: [\n      {\n        l10nId: \"clear-browsing-data\",\n        control: \"moz-box-button\",\n        controlAttrs: {\n          iconsrc: \"chrome://browser/skin/flame.svg\",\n        },\n      },\n      BOX_GROUP_CONFIG,\n    ],\n  },\n};\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nconst CLICK_HANDLERS = [\"moz-box-link\", \"moz-box-item\", \"moz-button\"];\n\nexport class SettingGroup extends MozLitElement {\n  static properties = {\n    config: { type: Object },\n    groupId: { type: String },\n    // getSetting should be Preferences.getSetting from preferencesBindings.js\n    getSetting: { type: Function },\n  };\n\n  static queries = {\n    controlEls: { all: \"setting-control\" },\n  };\n\n  createRenderRoot() {\n    return this;\n  }\n\n  async getUpdateComplete() {\n    let result = await super.getUpdateComplete();\n    await Promise.all([...this.controlEls].map(el => el.updateComplete));\n    return result;\n  }\n\n  /**\n   * Notify child controls when their input has fired an event. When controls\n   * are nested the parent receives events for the nested controls, so this is\n   * actually easier to manage here; it also registers fewer listeners.\n   */\n  onChange(e) {\n    let inputEl = e.target;\n    let control = inputEl.control;\n    control?.onChange(inputEl);\n  }\n\n  onClick(e) {\n    if (!CLICK_HANDLERS.includes(e.target.localName)) {\n      return;\n    }\n    let inputEl = e.target;\n    let control = inputEl.control;\n    control?.onClick(e);\n  }\n\n  itemTemplate(item) {\n    let setting = this.getSetting(item.id);\n    return html`<setting-control\n      .setting=${setting}\n      .config=${item}\n      .getSetting=${this.getSetting}\n    ></setting-control>`;\n  }\n\n  render() {\n    if (!this.config) {\n      return \"\";\n    }\n    return html`<moz-fieldset\n      data-l10n-id=${ifDefined(this.config.l10nId)}\n      @change=${this.onChange}\n      @click=${this.onClick}\n      >${this.config.items.map(item => this.itemTemplate(item))}</moz-fieldset\n    >`;\n  }\n}\ncustomElements.define(\"setting-group\", SettingGroup);\n"],"names":[],"sourceRoot":""}