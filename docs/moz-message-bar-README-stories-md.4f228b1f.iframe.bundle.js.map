{"version":3,"file":"moz-message-bar-README-stories-md.4f228b1f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzWA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5VA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxsources":["webpack:///../../../toolkit/content/widgets/moz-message-bar/moz-message-bar.mjs","webpack:///./node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack:///./node_modules/@mdx-js/react/index.js","webpack:///../../../toolkit/content/widgets/moz-button/moz-button.mjs","webpack:///../../../toolkit/content/widgets/moz-label/moz-label.mjs","webpack:///./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs","webpack:///./node_modules/react/jsx-runtime.js","webpack:///../../../toolkit/content/widgets/moz-message-bar/README.stories.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import __chrome_styles_loader__mozmessagebarStyles from \"toolkit/content/widgets/moz-message-bar/moz-message-bar.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-button.mjs\";\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozMessageBar.ftl\");\n\nconst messageTypeToIconData = {\n  info: {\n    iconSrc: \"chrome://global/skin/icons/info-filled.svg\",\n    l10nId: \"moz-message-bar-icon-info\",\n  },\n  warning: {\n    iconSrc: \"chrome://global/skin/icons/warning.svg\",\n    l10nId: \"moz-message-bar-icon-warning\",\n  },\n  success: {\n    iconSrc: \"chrome://global/skin/icons/check-filled.svg\",\n    l10nId: \"moz-message-bar-icon-success\",\n  },\n  error: {\n    iconSrc: \"chrome://global/skin/icons/error.svg\",\n    l10nId: \"moz-message-bar-icon-error\",\n  },\n  critical: {\n    iconSrc: \"chrome://global/skin/icons/error.svg\",\n    l10nId: \"moz-message-bar-icon-error\",\n  },\n};\n\n/**\n * A simple message bar element that can be used to display\n * important information to users.\n *\n * @tagname moz-message-bar\n * @property {string} type - The type of the displayed message.\n * @property {string} heading - The heading of the message.\n * @property {string} message - The message text.\n * @property {boolean} dismissable - Whether or not the element is dismissable.\n * @property {string} messageL10nId - l10n ID for the message.\n * @property {string} messageL10nArgs - Any args needed for the message l10n ID.\n * @fires message-bar:close\n *  Custom event indicating that message bar was closed.\n * @fires message-bar:user-dismissed\n *  Custom event indicating that message bar was dismissed by the user.\n */\n\nexport default class MozMessageBar extends MozLitElement {\n  static queries = {\n    actionsSlot: \"slot[name=actions]\",\n    actionsEl: \".actions\",\n    closeButton: \"moz-button.close\",\n    messageEl: \".message\",\n    supportLinkSlot: \"slot[name=support-link]\",\n  };\n\n  static properties = {\n    type: { type: String },\n    heading: { type: String, fluent: true },\n    message: { type: String, fluent: true },\n    dismissable: { type: Boolean },\n    messageL10nId: { type: String },\n    messageL10nArgs: { type: String },\n  };\n\n  constructor() {\n    super();\n    this.type = \"info\";\n    this.dismissable = false;\n  }\n\n  onActionSlotchange() {\n    let actions = this.actionsSlot.assignedNodes();\n    this.actionsEl.classList.toggle(\"active\", actions.length);\n  }\n\n  onLinkSlotChange() {\n    this.messageEl.classList.toggle(\n      \"has-link-after\",\n      !!this.supportLinkEls.length\n    );\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"alert\");\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.dispatchEvent(new CustomEvent(\"message-bar:close\"));\n  }\n\n  get supportLinkEls() {\n    return this.supportLinkSlot.assignedElements();\n  }\n\n  iconTemplate() {\n    let iconData = messageTypeToIconData[this.type];\n    if (iconData) {\n      let { iconSrc, l10nId } = iconData;\n      return html`\n        <div class=\"icon-container\">\n          <img\n            class=\"icon\"\n            src=${iconSrc}\n            data-l10n-id=${l10nId}\n            data-l10n-attrs=\"alt\"\n          />\n        </div>\n      `;\n    }\n    return \"\";\n  }\n\n  headingTemplate() {\n    if (this.heading) {\n      return html`<strong class=\"heading\">${this.heading}</strong>`;\n    }\n    return \"\";\n  }\n\n  closeButtonTemplate({ size } = {}) {\n    if (this.dismissable) {\n      return html`\n        <moz-button\n          type=\"icon ghost\"\n          class=\"close\"\n          size=${ifDefined(size)}\n          data-l10n-id=\"moz-message-bar-close-button\"\n          @click=${this.dismiss}\n        ></moz-button>\n      `;\n    }\n    return \"\";\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozmessagebarStyles}\"\n      />\n      <div class=\"container\">\n        <div class=\"content\">\n          <div class=\"text-container\">\n            ${this.iconTemplate()}\n            <div class=\"text-content\">\n              ${this.headingTemplate()}\n              <div>\n                <slot name=\"message\">\n                  <span\n                    class=\"message\"\n                    data-l10n-id=${ifDefined(this.messageL10nId)}\n                    data-l10n-args=${ifDefined(\n                      JSON.stringify(this.messageL10nArgs)\n                    )}\n                  >\n                    ${this.message}\n                  </span>\n                </slot>\n                <span class=\"link\">\n                  <slot\n                    name=\"support-link\"\n                    @slotchange=${this.onLinkSlotChange}\n                  ></slot>\n                </span>\n              </div>\n            </div>\n          </div>\n          <span class=\"actions\">\n            <slot name=\"actions\" @slotchange=${this.onActionSlotchange}></slot>\n          </span>\n        </div>\n        ${this.closeButtonTemplate()}\n      </div>\n    `;\n  }\n\n  dismiss() {\n    this.dispatchEvent(new CustomEvent(\"message-bar:user-dismissed\"));\n    this.close();\n  }\n\n  close() {\n    this.remove();\n  }\n}\n\ncustomElements.define(\"moz-message-bar\", MozMessageBar);\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","export {\n  MDXContext,\n  MDXProvider,\n  useMDXComponents,\n  withMDXComponents\n} from './lib/index.js'\n","import __chrome_styles_loader__mozbuttonStyles from \"toolkit/content/widgets/moz-button/moz-button.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined, classMap } from \"../vendor/lit.all.mjs\";\nimport { MozLitElement } from \"../lit-utils.mjs\";\n\nwindow.MozXULElement?.insertFTLIfNeeded(\"toolkit/global/mozButton.ftl\");\n\n// eslint-disable-next-line import/no-unassigned-import\nimport \"chrome://global/content/elements/moz-label.mjs\";\n\n/**\n * Controls moz-button behavior when menuId property is set.\n * Helps to integrate moz-button with panel-list.\n */\nclass MenuController {\n  /** @type {HTMLElement} */\n  host;\n\n  /** @type {string} */\n  #menuId;\n\n  /** @type {HTMLElement | null} */\n  #menuEl;\n\n  /** @type {boolean} */\n  #hostIsSplitButton;\n\n  constructor(host) {\n    this.host = host;\n    host.addController(this);\n  }\n\n  hostConnected() {\n    this.hostUpdated();\n  }\n\n  hostDisconnected() {\n    this.#menuId = null;\n    this.#menuEl = null;\n    this.removePanelListListeners();\n  }\n\n  hostUpdated() {\n    let hostMenuId = this.host.menuId;\n    let hostIsSplitButton = this.host.isSplitButton;\n\n    if (\n      this.#menuId === hostMenuId &&\n      this.#hostIsSplitButton === hostIsSplitButton\n    ) {\n      return;\n    }\n    if (this.#menuEl?.localName == \"panel-list\") {\n      this.panelListCleanUp();\n    }\n\n    this.#menuId = hostMenuId;\n    this.#hostIsSplitButton = hostIsSplitButton;\n\n    // Check to see if a menuId has been added to host, or changed\n    if (this.#menuId) {\n      this.#menuEl = this.getPanelList();\n\n      if (this.#menuEl?.localName == \"panel-list\") {\n        this.panelListSetUp();\n      }\n    }\n\n    // Check to see if menuId has been removed from host\n    if (!this.#menuId) {\n      this.#menuEl = null;\n      this.host.removeController(this);\n    }\n  }\n\n  /**\n   * Retrieves the panel-list element matching the host's menuId.\n   * @returns {HTMLElement | null}\n   */\n  getPanelList() {\n    let root = this.host.getRootNode();\n    let menuEl = null;\n\n    while (root) {\n      menuEl = root.querySelector?.(`#${this.#menuId}`);\n      if (menuEl) {\n        break;\n      }\n\n      if (root instanceof ShadowRoot) {\n        root = root.host?.getRootNode();\n      } else {\n        break;\n      }\n    }\n\n    return menuEl;\n  }\n\n  /**\n   * Handles opening/closing the panel-list when the host is clicked or activated via keyboard.\n   * @param {MouseEvent|KeyboardEvent} event\n   */\n  openPanelList = event => {\n    if (\n      (event.type == \"mousedown\" && event.button == 0) ||\n      event.inputSource == MouseEvent.MOZ_SOURCE_KEYBOARD ||\n      !event.detail\n    ) {\n      if (this.#hostIsSplitButton) {\n        this.#menuEl?.toggle(event, this.host.chevronButtonEl);\n      } else {\n        this.#menuEl?.toggle(event, this.host);\n      }\n    }\n  };\n\n  /**\n   * Removes event listeners related to panel-list from the host.\n   */\n  removePanelListListeners() {\n    if (this.#hostIsSplitButton) {\n      this.host.chevronButtonEl?.removeEventListener(\n        \"click\",\n        this.openPanelList\n      );\n      this.host.chevronButtonEl?.removeEventListener(\n        \"mousedown\",\n        this.openPanelList\n      );\n    } else {\n      this.host.removeEventListener(\"click\", this.openPanelList);\n      this.host.removeEventListener(\"mousedown\", this.openPanelList);\n    }\n  }\n\n  /**\n   * Sets up the host for integration with panel-list,\n   * adding necessary event listeners and ARIA attributes.\n   */\n  panelListSetUp() {\n    if (this.#hostIsSplitButton) {\n      this.host.chevronButtonEl?.addEventListener(\"click\", this.openPanelList);\n      this.host.chevronButtonEl?.addEventListener(\n        \"mousedown\",\n        this.openPanelList\n      );\n    } else {\n      this.host.addEventListener(\"click\", this.openPanelList);\n      this.host.addEventListener(\"mousedown\", this.openPanelList);\n    }\n    this.host.ariaHasPopup = \"menu\";\n    this.host.ariaExpanded = this.#menuEl?.open ? \"true\" : \"false\";\n  }\n\n  /**\n   * Cleans up panel-list integration,\n   * removing event listeners and clearing ARIA attributes.\n   */\n  panelListCleanUp() {\n    this.removePanelListListeners();\n    this.host.ariaHasPopup = null;\n    this.host.ariaExpanded = null;\n  }\n}\n\n/**\n * A button with multiple types and two sizes.\n *\n * @tagname moz-button\n * @property {string} label - The button's label, will be overridden by slotted content.\n * @property {string} type - The button type.\n *   Options: default, primary, destructive, icon, icon ghost, ghost.\n * @property {string} size - The button size.\n *   Options: default, small.\n * @property {boolean} disabled - The disabled state.\n * @property {string} title - The button's title attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} titleAttribute - Internal, map title attribute to the title JS property.\n * @property {string} tooltipText - Set the title property, the title attribute will be used first.\n * @property {string} ariaLabel - The button's aria-label attribute, used in shadow DOM and therefore not as an attribute on moz-button.\n * @property {string} ariaHasPopup - The button's aria-haspopup attribute, that indicates that a popup element can be triggered by the button.\n * @property {string} ariaExpanded - The button's aria-expanded attribute, that indicates whether or not the controlled elements are displayed or hidden.\n * @property {string} iconSrc - Path to the icon that should be displayed in the button.\n * @property {string} ariaLabelAttribute - Internal, map aria-label attribute to the ariaLabel JS property.\n * @property {string} ariaHasPopupAttribute - Internal, map aria-haspopup attribute to the ariaHasPopup JS property.\n * @property {string} ariaExpandedAttribute - Internal, map aria-expanded attribute to the ariaExpanded JS property.\n * @property {string} hasVisibleLabel - Internal, tracks whether or not the button has a visible label.\n * @property {boolean} attention - Show a dot notification on the button if true.\n * @property {boolean} parentDisabled - When the parent of this component is disabled.\n * @property {string} iconPosition - The icon's position relative to the button label.\n *   Options: start, end.\n * @property {string} menuId - A CSS selector string that identifies the associated menu element controlled by the button.\n * @property {HTMLButtonElement} buttonEl - The internal button element in the shadow DOM.\n * @property {HTMLButtonElement} slotEl - The internal slot element in the shadow DOM.\n * @cssproperty [--button-outer-padding-inline] - Used to set the outer inline padding of toolbar style buttons\n * @csspropert [--button-outer-padding-block] - Used to set the outer block padding of toolbar style buttons.\n * @cssproperty [--button-outer-padding-inline-start] - Used to set the outer inline-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-inline-end] - Used to set the outer inline-end padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-start] - Used to set the outer block-start padding of toolbar style buttons\n * @cssproperty [--button-outer-padding-block-end] - Used to set the outer block-end padding of toolbar style buttons\n * @slot default - The button's content, overrides label property.\n * @fires click - The click event.\n */\nexport default class MozButton extends MozLitElement {\n  static shadowRootOptions = {\n    ...MozLitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  static properties = {\n    label: { type: String, reflect: true, fluent: true },\n    type: { type: String, reflect: true },\n    size: { type: String, reflect: true },\n    disabled: { type: Boolean, reflect: true },\n    title: { type: String, mapped: true },\n    tooltipText: { type: String, fluent: true },\n    ariaLabel: { type: String, mapped: true },\n    ariaHasPopup: { type: String, mapped: true },\n    ariaExpanded: { type: String, mapped: true },\n    iconSrc: { type: String },\n    hasVisibleLabel: { type: Boolean, state: true },\n    accessKey: { type: String, mapped: true },\n    attention: { type: Boolean },\n    iconPosition: { type: String, reflect: true },\n    menuId: { type: String, reflect: true },\n    parentDisabled: { type: Boolean },\n  };\n\n  static queries = {\n    buttonEl: \"#main-button\",\n    chevronButtonEl: \"#chevron-button\",\n    slotEl: \"slot\",\n    backgroundEl: \"#main-button .button-background\",\n  };\n\n  constructor() {\n    super();\n    this.type = \"default\";\n    this.size = \"default\";\n    this.disabled = false;\n    this.hasVisibleLabel = !!this.label;\n    this.attention = false;\n    this.iconPosition = \"start\";\n    this.menuId = \"\";\n    this.parentDisabled = undefined;\n  }\n\n  updated(changedProperties) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"menuId\")) {\n      if (this.menuId && !this._menuController) {\n        this._menuController = new MenuController(this);\n      }\n      if (!this.menuId && this._menuController) {\n        this._menuController = null;\n      }\n    }\n  }\n\n  get isSplitButton() {\n    return this.type === \"split\";\n  }\n\n  // Delegate clicks on host to the button element.\n  click() {\n    this.buttonEl.click();\n  }\n\n  checkForLabelText() {\n    this.hasVisibleLabel = this.slotEl\n      ?.assignedNodes()\n      .some(node => node.textContent.trim());\n  }\n\n  labelTemplate() {\n    if (this.label) {\n      return this.label;\n    }\n    return html`<slot @slotchange=${this.checkForLabelText}></slot>`;\n  }\n\n  iconTemplate(position) {\n    if (this.iconSrc && position == this.iconPosition) {\n      return html`<img src=${this.iconSrc} role=\"presentation\" />`;\n    }\n    return null;\n  }\n\n  chevronButtonTemplate() {\n    if (this.isSplitButton) {\n      return html`<button\n        id=\"chevron-button\"\n        size=${this.size}\n        ?disabled=${this.disabled || this.parentDisabled}\n        data-l10n-id=\"moz-button-more-options\"\n        aria-labelledby=\"main-button chevron-button\"\n        aria-expanded=${ifDefined(this.ariaExpanded)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        @click=${e => e.stopPropagation()}\n        @mousedown=${e => e.stopPropagation()}\n      >\n        <span class=\"button-background\" type=${this.type} size=${this.size}>\n          <img\n            src=\"chrome://global/skin/icons/arrow-down.svg\"\n            role=\"presentation\"\n          />\n        </span>\n      </button>`;\n    }\n    return null;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozbuttonStyles}\"\n      />\n      <button\n        id=\"main-button\"\n        ?disabled=${this.disabled || this.parentDisabled}\n        title=${ifDefined(this.title || this.tooltipText)}\n        aria-label=${ifDefined(this.ariaLabel)}\n        aria-expanded=${ifDefined(\n          this.isSplitButton ? undefined : this.ariaExpanded\n        )}\n        aria-haspopup=${ifDefined(\n          this.isSplitButton ? undefined : this.ariaHasPopup\n        )}\n        accesskey=${ifDefined(this.accessKey)}\n      >\n        <span\n          class=${classMap({\n            labelled: this.label || this.hasVisibleLabel,\n            \"button-background\": true,\n            badged:\n              (this.iconSrc || this.type.includes(\"icon\")) && this.attention,\n          })}\n          part=\"button\"\n          type=${this.type}\n          size=${this.size}\n        >\n          ${this.iconTemplate(\"start\")}\n          <label\n            is=\"moz-label\"\n            shownaccesskey=${ifDefined(this.accessKey)}\n            part=\"moz-button-label\"\n          >\n            ${this.labelTemplate()}\n          </label>\n          ${this.iconTemplate(\"end\")}\n        </span>\n      </button>\n      ${this.chevronButtonTemplate()}\n    `;\n  }\n}\ncustomElements.define(\"moz-button\", MozButton);\n","import __chrome_styles_loader__mozlabelStyles from \"toolkit/content/widgets/moz-label/moz-label.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * An extension of the label element that provides accesskey styling and\n * formatting as well as click handling logic.\n *\n * @tagname moz-label\n * @attribute {string} accesskey - Key used for keyboard access.\n * @attribute {string} shownaccesskey - Key to underline but not set as\n *   accesskey, this is useful to work around an issue where multiple accesskeys\n *   on the same element cause it to be focused isntead of activated.\n */\nclass MozTextLabel extends HTMLLabelElement {\n  #insertSeparator = false;\n  #alwaysAppendAccessKey = false;\n  #lastFormattedAccessKey = null;\n  #observer = null;\n\n  // Default to underlining accesskeys for Windows and Linux.\n  static #underlineAccesskey = !navigator.platform.includes(\"Mac\");\n  static get observedAttributes() {\n    return [\"accesskey\", \"shownaccesskey\"];\n  }\n\n  static stylesheetUrl = __chrome_styles_loader__mozlabelStyles;\n\n  constructor() {\n    super();\n    this.#register();\n    this.addEventListener(\"click\", this._onClick);\n  }\n\n  #register() {\n    if (window.IS_STORYBOOK) {\n      MozTextLabel.#underlineAccesskey = true;\n    } else if (typeof Services !== \"undefined\") {\n      MozTextLabel.#underlineAccesskey = !!Services.prefs.getIntPref(\n        \"ui.key.menuAccessKey\",\n        Number(!navigator.platform.includes(\"Mac\"))\n      );\n      if (MozTextLabel.#underlineAccesskey) {\n        try {\n          const nsIPrefLocalizedString = Ci.nsIPrefLocalizedString;\n          const prefNameInsertSeparator =\n            \"intl.menuitems.insertseparatorbeforeaccesskeys\";\n          const prefNameAlwaysAppendAccessKey =\n            \"intl.menuitems.alwaysappendaccesskeys\";\n\n          let val = Services.prefs.getComplexValue(\n            prefNameInsertSeparator,\n            nsIPrefLocalizedString\n          ).data;\n          this.#insertSeparator = val == \"true\";\n          val = Services.prefs.getComplexValue(\n            prefNameAlwaysAppendAccessKey,\n            nsIPrefLocalizedString\n          ).data;\n          this.#alwaysAppendAccessKey = val == \"true\";\n        } catch (e) {\n          this.#insertSeparator = this.#alwaysAppendAccessKey = true;\n        }\n      }\n    }\n  }\n\n  #startMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.observe(this, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  #stopMutationObserver() {\n    if (!this.#observer) {\n      return;\n    }\n    this.#observer.disconnect();\n  }\n\n  connectedCallback() {\n    this.#setStyles();\n    this.formatAccessKey();\n    if (!this.#observer) {\n      this.#observer = new MutationObserver(() => {\n        this.#lastFormattedAccessKey = null;\n        this.formatAccessKey();\n      });\n      this.#startMutationObserver();\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.#observer) {\n      this.#stopMutationObserver();\n      this.#observer = null;\n    }\n  }\n\n  // Bug 1820588 - we may want to generalize this into\n  // MozHTMLElement.insertCssIfNeeded(style)\n  #setStyles() {\n    let root = this.getRootNode();\n    if (root.__mozLabelCssAdded) {\n      return;\n    }\n\n    let container = root.head ?? root;\n\n    for (let link of container.querySelectorAll(\"link\")) {\n      if (link.getAttribute(\"href\") == this.constructor.stylesheetUrl) {\n        return;\n      }\n    }\n\n    let style = document.createElement(\"link\");\n    style.rel = \"stylesheet\";\n    style.href = this.constructor.stylesheetUrl;\n    container.appendChild(style);\n    root.__mozLabelCssAdded = true;\n  }\n\n  set textContent(val) {\n    super.textContent = val;\n    this.#lastFormattedAccessKey = null;\n    this.formatAccessKey();\n  }\n\n  get textContent() {\n    return super.textContent;\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue == newValue) {\n      return;\n    }\n\n    // Note that this is only happening when \"accesskey\" attribute changes.\n    this.formatAccessKey();\n  }\n\n  _onClick() {\n    let controlElement = this.labeledControlElement;\n    if (!controlElement || this.disabled) {\n      return;\n    }\n    controlElement.focus();\n\n    if (\n      (controlElement.localName == \"checkbox\" ||\n        controlElement.localName == \"radio\") &&\n      controlElement.getAttribute(\"disabled\") == \"true\"\n    ) {\n      return;\n    }\n\n    if (controlElement.localName == \"checkbox\") {\n      controlElement.checked = !controlElement.checked;\n    } else if (controlElement.localName == \"radio\") {\n      controlElement.control.selectedItem = controlElement;\n    }\n  }\n\n  set accessKey(val) {\n    this.setAttribute(\"accesskey\", val);\n    let control = this.labeledControlElement;\n    if (control) {\n      control.setAttribute(\"accesskey\", val);\n    }\n  }\n\n  get accessKey() {\n    let accessKey = this.getAttribute(\"accesskey\");\n    return accessKey ? accessKey[0] : null;\n  }\n\n  get labeledControlElement() {\n    let control = this.control;\n    return control ? document.getElementById(control) : null;\n  }\n\n  set control(val) {\n    this.setAttribute(\"control\", val);\n  }\n\n  get control() {\n    return this.getAttribute(\"control\");\n  }\n\n  // This is used to match the rendering of accesskeys from nsTextBoxFrame.cpp (i.e. when the\n  // label uses [value]). So this is just for when we have textContent.\n  formatAccessKey() {\n    // Skip doing any DOM manipulation whenever possible:\n    let accessKey = this.accessKey || this.getAttribute(\"shownaccesskey\");\n    if (\n      !MozTextLabel.#underlineAccesskey ||\n      this.#lastFormattedAccessKey == accessKey ||\n      !this.textContent ||\n      !this.textContent.trim()\n    ) {\n      return;\n    }\n    this.#stopMutationObserver();\n    try {\n      this.#formatAccessKey(accessKey);\n    } finally {\n      queueMicrotask(() => this.#startMutationObserver());\n    }\n  }\n\n  #formatAccessKey(accessKey) {\n    this.#lastFormattedAccessKey = accessKey;\n    if (this.accessKeySpan) {\n      // Clear old accesskey\n      mergeElement(this.accessKeySpan);\n      this.accessKeySpan = null;\n    }\n\n    if (this.hiddenColon) {\n      mergeElement(this.hiddenColon);\n      this.hiddenColon = null;\n    }\n\n    if (this.accessKeyParens) {\n      this.accessKeyParens.remove();\n      this.accessKeyParens = null;\n    }\n\n    // If we used to have an accessKey but not anymore, we're done here\n    if (!accessKey) {\n      return;\n    }\n\n    let labelText = this.textContent;\n    let accessKeyIndex = -1;\n    if (!this.#alwaysAppendAccessKey) {\n      accessKeyIndex = labelText.indexOf(accessKey);\n      if (accessKeyIndex < 0) {\n        // Try again in upper case\n        accessKeyIndex = labelText\n          .toUpperCase()\n          .indexOf(accessKey.toUpperCase());\n      }\n    } else if (labelText.endsWith(`(${accessKey.toUpperCase()})`)) {\n      accessKeyIndex = labelText.length - (1 + accessKey.length); // = index of accessKey.\n    }\n\n    const HTML_NS = \"http://www.w3.org/1999/xhtml\";\n    this.accessKeySpan = document.createElementNS(HTML_NS, \"span\");\n    this.accessKeySpan.className = \"accesskey\";\n\n    // Note that if you change the following code, see the comment of\n    // nsTextBoxFrame::UpdateAccessTitle.\n\n    // If accesskey is in the string, underline it:\n    if (accessKeyIndex >= 0) {\n      wrapChar(this, this.accessKeySpan, accessKeyIndex);\n      return;\n    }\n\n    // If accesskey is not in string, append in parentheses\n    // If end is colon, we should insert before colon.\n    // i.e., \"label:\" -> \"label(X):\"\n    let colonHidden = false;\n    if (/:$/.test(labelText)) {\n      labelText = labelText.slice(0, -1);\n      this.hiddenColon = document.createElementNS(HTML_NS, \"span\");\n      this.hiddenColon.className = \"hiddenColon\";\n      this.hiddenColon.style.display = \"none\";\n      // Hide the last colon by using span element.\n      // I.e., label<span style=\"display:none;\">:</span>\n      wrapChar(this, this.hiddenColon, labelText.length);\n      colonHidden = true;\n    }\n    // If end is space(U+20),\n    // we should not add space before parentheses.\n    let endIsSpace = false;\n    if (/ $/.test(labelText)) {\n      endIsSpace = true;\n    }\n\n    this.accessKeyParens = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"span\"\n    );\n    this.appendChild(this.accessKeyParens);\n    if (this.#insertSeparator && !endIsSpace) {\n      this.accessKeyParens.textContent = \" (\";\n    } else {\n      this.accessKeyParens.textContent = \"(\";\n    }\n    this.accessKeySpan.textContent = accessKey.toUpperCase();\n    this.accessKeyParens.appendChild(this.accessKeySpan);\n    if (!colonHidden) {\n      this.accessKeyParens.appendChild(document.createTextNode(\")\"));\n    } else {\n      this.accessKeyParens.appendChild(document.createTextNode(\"):\"));\n    }\n  }\n}\ncustomElements.define(\"moz-label\", MozTextLabel, { extends: \"label\" });\n\nfunction mergeElement(element) {\n  // If the element has been removed already, return:\n  if (!element.isConnected) {\n    return;\n  }\n  // `isInstance` isn't available to web content (i.e. Storybook) so we need to\n  // fallback to using `instanceof`.\n  if (\n    Text.hasOwnProperty(\"isInstance\")\n      ? Text.isInstance(element.previousSibling)\n      : // eslint-disable-next-line mozilla/use-isInstance\n        element.previousSibling instanceof Text\n  ) {\n    element.previousSibling.appendData(element.textContent);\n  } else {\n    element.parentNode.insertBefore(element.firstChild, element);\n  }\n  element.remove();\n}\n\nfunction wrapChar(parentNode, element, index) {\n  let treeWalker = document.createNodeIterator(\n    parentNode,\n    NodeFilter.SHOW_TEXT,\n    null\n  );\n  let node = treeWalker.nextNode();\n  while (index >= node.length) {\n    index -= node.length;\n    node = treeWalker.nextNode();\n  }\n  if (index) {\n    node = node.splitText(index);\n  }\n\n  node.parentNode.insertBefore(element, node);\n  if (node.length > 1) {\n    node.splitText(1);\n  }\n  element.appendChild(node);\n}\n","export * from '@mdx-js/react';\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"/home/runner/work/firefox-desktop-components/firefox-desktop-components/gecko/browser/components/storybook/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport { Meta, Canvas, ArgTypes } from \"@storybook/addon-docs\";\nimport \"toolkit-widgets/moz-message-bar/moz-message-bar.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Meta, {\n      title: \"UI Widgets/ Message Bar/README\",\n      parameters: {\n        previewTabs: {\n          canvas: {\n            hidden: true\n          }\n        },\n        viewMode: \"docs\"\n      }\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n      id: \"mozmessagebar\",\n      children: \"MozMessageBar\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [/*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" is a versatile user interface element designed to display messages or notifications.\\nThese messages and notifications are nonmodal, and keep users informed without blocking access to the base page.\\nIt supports various types of messages - info, warning, success, and error - each with distinct visual styling\\nto convey the message's urgency or importance. You can customize \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" by adding a message, message heading,\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-support-link\"\n      }), \", actions buttons, or by making the message bar dismissable.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-message-bar dismissable heading=\\\"Heading of the message bar\\\" message=\\\"Message for the user\\\" /></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-message-bar\", {\n          dismissable: true,\n          heading: \"Heading of the message bar\",\n          message: \"Message for the user\"\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"when-to-use\",\n      children: \"When to use\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Use the message bar to display important announcements or notifications to the user.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Use it to attract the user's attention without interrupting the user's task.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"when-not-to-use\",\n      children: \"When not to use\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n      children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n        children: \"Do not use the message bar for displaying critical alerts or warnings that require immediate and focused attention.\"\n      }), \"\\n\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"code\",\n      children: \"Code\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The source for \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" can be found under\\n\", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/content/widgets/moz-message-bar/moz-message-bar.mjs\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"toolkit/content/widgets/moz-message-bar\"\n      }), \".\\nYou can find an examples of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" in use in the Firefox codebase in\\n\", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/toolkit/mozapps/extensions/content/aboutaddons.html\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"about:addons\"\n      }), \" and\\n\", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://searchfox.org/mozilla-central/source/browser/base/content/browser-addons.js\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"unified extensions panel\"\n      }), \".\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h2, {\n      id: \"how-to-use-moz-message-bar\",\n      children: [\"How to use \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      })]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"importing-the-element\",\n      children: \"Importing the element\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Like other custom elements, you should usually be able to rely on \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" getting lazy loaded at the time of first use. See \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://firefox-source-docs.mozilla.org/browser/components/storybook/docs/README.reusable-widgets.stories.html#using-new-design-system-components\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"this documentation\"\n      }), \" for more information on using design system custom elements.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n      id: \"fluent-usage\",\n      children: \"Fluent usage\"\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Generally the \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"heading\"\n      }), \" and \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"message\"\n      }), \" properties of\\n\", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" will be provided via \", /*#__PURE__*/_jsx(_components.a, {\n        href: \"https://mozilla-l10n.github.io/localizer-documentation/tools/fluent/basic_syntax.html#attributes\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Fluent attributes\"\n      }), \".\\nTo get this working you will need to format your Fluent message like this:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        children: \"with-heading-and-message =\\n  .heading = Heading text goes here\\n  .message = Message text goes here\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-attrs\"\n      }), \" will be set up automatically via \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"MozLitElement\"\n      }), \", so you can just specify \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"data-l10n-id\"\n      }), \" on your message bar as you would with any other markup:\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"  <moz-message-bar data-l10n-id=\\\"with-heading-and-message\\\"></moz-message-bar>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.h3, {\n      id: \"custom-message-slot\",\n      children: [\"Custom \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"message\"\n      }), \" slot\"]\n    }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n      children: [\"Normally the \\\"message\\\" of \", /*#__PURE__*/_jsx(_components.code, {\n        children: \"moz-message-bar\"\n      }), \" can only be a string (containing no HTML elements). However, if you'd like to use a message that contains nested HTML, such as an anchor link, you can use the message slot.\"]\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n      children: /*#__PURE__*/_jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<moz-message-bar>\\n  <span slot=\\\"message\\\" data-l10n-id=\\\"moz-message-bar-message-slot\\\">\\n    <a data-l10n-name=\\\"moz-message-bar-link\\\" href=\\\"http://example.com\\\"></a>\\n  </span>\\n</moz-message-bar>\\n\"\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n      withSource: \"none\",\n      mdxSource: \"<with-common-styles><moz-message-bar><span slot=\\\"message\\\">{\\\"Here is a message with a nested \\\"}<a href=\\\"https://example.com\\\" target=\\\"_blank\\\">{\\\"link\\\"}</a>{\\\".\\\"}</span></moz-message-bar></with-common-styles>\",\n      children: /*#__PURE__*/_jsx(\"with-common-styles\", {\n        children: /*#__PURE__*/_jsx(\"moz-message-bar\", {\n          children: /*#__PURE__*/_jsxs(\"span\", {\n            slot: \"message\",\n            children: [\"Here is a message with a nested \", /*#__PURE__*/_jsx(\"a\", {\n              href: \"https://example.com\",\n              target: \"_blank\",\n              children: \"link\"\n            }), \".\"]\n          })\n        })\n      })\n    }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n      id: \"args-table\",\n      children: \"Args Table\"\n    }), \"\\n\", /*#__PURE__*/_jsx(ArgTypes, {\n      of: \"moz-message-bar\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, {\n    ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n/* ========= */\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'UI Widgets/ Message Bar/README',\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true\n      }\n    },\n    viewMode: \"docs\"\n  },\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":[],"sourceRoot":""}