{"version":3,"file":"1948.53f530e9.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../toolkit/content/widgets/moz-select/moz-select.mjs"],"sourcesContent":["import __chrome_styles_loader__mozselectStyles from \"toolkit/content/widgets/moz-select/moz-select.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  createRef,\n  html,\n  ref,\n  classMap,\n  ifDefined,\n} from \"../vendor/lit.all.mjs\";\nimport { MozBaseInputElement, MozLitElement } from \"../lit-utils.mjs\";\n\n/**\n * A select dropdown with options provided via custom `moz-option` elements.\n *\n * @tagname moz-select\n * @property {string} label - The text of the label element\n * @property {string} name - The name of the input control\n * @property {string} value - The value of the selected option\n * @property {boolean} disabled - The disabled state of the input control\n * @property {string} iconSrc - The src for an optional icon\n * @property {string} description - The text for the description element that helps describe the input control\n * @property {string} supportPage - Name of the SUMO support page to link to.\n * @property {array} options - The array of options, populated by <moz-option> children in the\n *     default slot. Do not set directly, these will be overridden by <moz-option> children.\n */\nexport default class MozSelect extends MozBaseInputElement {\n  #optionIconSrcMap = new Map();\n\n  static properties = {\n    options: { type: Array, state: true },\n  };\n  static inputLayout = \"block\";\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.options = [];\n    this.slotRef = createRef();\n    this.optionsMutationObserver = new MutationObserver(\n      this.populateOptions.bind(this)\n    );\n  }\n\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.optionsMutationObserver.observe(this, {\n      attributeFilter: [\"label\", \"value\", \"iconsrc\"],\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  update(changedProperties) {\n    super.update(changedProperties);\n    if (this.hasUpdated && changedProperties.has(\"options\")) {\n      // Match the select's value on initial render or options change.\n      this.value = this.inputEl.value;\n    }\n  }\n\n  get _selectedOptionIconSrc() {\n    if (!this.inputEl || !this.options.length) {\n      return \"\";\n    }\n\n    return this.#optionIconSrcMap.get(this.value) ?? \"\";\n  }\n\n  /**\n   * Internal - populates the select element with options from the light DOM slot.\n   */\n  populateOptions() {\n    this.options = [];\n    this.#optionIconSrcMap.clear();\n\n    for (const node of this.slotRef.value.assignedNodes()) {\n      if (node.localName === \"moz-option\") {\n        const optionValue = node.getAttribute(\"value\");\n        const optionLabel = node.getAttribute(\"label\");\n        const optionIconSrc = node.getAttribute(\"iconsrc\");\n        this.options.push({\n          value: optionValue,\n          label: optionLabel,\n          iconSrc: optionIconSrc,\n        });\n\n        if (optionIconSrc) {\n          this.#optionIconSrcMap.set(optionValue, optionIconSrc);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles change events and updates the selected value.\n   *\n   * @param {Event} event\n   * @memberof MozSelect\n   */\n  handleStateChange(event) {\n    this.value = event.target.value;\n  }\n\n  /**\n   * @type {MozBaseInputElement['inputStylesTemplate']}\n   */\n  inputStylesTemplate() {\n    return html` <link\n      rel=\"stylesheet\"\n      href=\"${__chrome_styles_loader__mozselectStyles}\"\n    />`;\n  }\n\n  selectedOptionIconTemplate() {\n    if (this._selectedOptionIconSrc) {\n      return html`<img\n        src=${this._selectedOptionIconSrc}\n        role=\"presentation\"\n        class=\"select-option-icon\"\n      />`;\n    }\n    return null;\n  }\n\n  inputTemplate() {\n    const classes = classMap({\n      \"select-wrapper\": true,\n      \"with-icon\": !!this._selectedOptionIconSrc,\n    });\n\n    return html`\n      <div class=${ifDefined(classes)}>\n        ${this.selectedOptionIconTemplate()}\n        <select\n          id=\"input\"\n          name=${this.name}\n          .value=${this.value}\n          accesskey=${this.accessKey}\n          @input=${this.handleStateChange}\n          @change=${this.redispatchEvent}\n          ?disabled=${this.disabled || this.parentDisabled}\n          aria-describedby=\"description\"\n          aria-label=${ifDefined(this.ariaLabel ?? undefined)}\n        >\n          ${this.options.map(\n            option => html`\n              <option\n                value=${option.value}\n                ?selected=${option.value == this.value}\n              >\n                ${option.label}\n              </option>\n            `\n          )}\n        </select>\n        <img\n          src=\"chrome://global/skin/icons/arrow-down.svg\"\n          role=\"presentation\"\n          class=\"select-chevron-icon\"\n        />\n      </div>\n      <slot\n        @slotchange=${this.populateOptions}\n        hidden\n        ${ref(this.slotRef)}\n      ></slot>\n    `;\n  }\n}\ncustomElements.define(\"moz-select\", MozSelect);\n\n/**\n * A custom option element for use in moz-select.\n *\n * @tagname moz-option\n * @property {string} value - The value of the option\n * @property {string} label - The label of the option\n * @property {string} iconSrc - The path to the icon of the the option\n */\nexport class MozOption extends MozLitElement {\n  static properties = {\n    // Reflect the attribute so that moz-select can detect changes with a MutationObserver\n    value: { type: String, reflect: true },\n    // Reflect the attribute so that moz-select can detect changes with a MutationObserver\n    label: { type: String, reflect: true, fluent: true },\n    iconSrc: { type: String, reflect: true },\n  };\n\n  constructor() {\n    super();\n    this.value = \"\";\n    this.label = \"\";\n    this.iconSrc = \"\";\n  }\n\n  render() {\n    // This is just a placeholder to pass values into moz-select.\n    return \"\";\n  }\n}\ncustomElements.define(\"moz-option\", MozOption);\n"],"names":[],"sourceRoot":""}