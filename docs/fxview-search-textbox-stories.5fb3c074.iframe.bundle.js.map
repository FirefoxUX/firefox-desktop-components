{"version":3,"file":"fxview-search-textbox-stories.5fb3c074.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAcA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;AAAA","sources":["webpack://browser-storybook/./node_modules/@storybook/addon-actions/dist/chunk-WFFRPTHA.mjs","webpack://browser-storybook/./node_modules/@storybook/addon-actions/dist/index.mjs","webpack://browser-storybook/../firefoxview/fxview-search-textbox.mjs","webpack://browser-storybook/./stories/fxview-search-textbox.stories.mjs"],"sourcesContent":["import { v4 } from 'uuid';\nimport { addons } from '@storybook/preview-api';\nimport { global } from '@storybook/global';\nimport { ImplicitActionsDuringRendering } from '@storybook/core-events/preview-errors';\n\nvar PARAM_KEY=\"actions\",ADDON_ID=\"storybook/actions\",PANEL_ID=`${ADDON_ID}/panel`,EVENT_ID=`${ADDON_ID}/action-event`,CLEAR_ID=`${ADDON_ID}/action-clear`,CYCLIC_KEY=\"$___storybook.isCyclic\";var config={depth:10,clearOnStoryChange:!0,limit:50},configureActions=(options={})=>{Object.assign(config,options);};var findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return !proto||callback(proto)?proto:findProto(proto,callback)},isReactSyntheticEvent=e=>!!(typeof e==\"object\"&&e&&findProto(e,proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name))&&typeof e.persist==\"function\"),serializeArg=a=>{if(isReactSyntheticEvent(a)){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,\"view\"),view=viewDescriptor?.value;return typeof view==\"object\"&&view?.constructor.name===\"Window\"&&Object.defineProperty(e,\"view\",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}return a},generateId=()=>typeof crypto==\"object\"&&typeof crypto.getRandomValues==\"function\"?v4():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=(\"__STORYBOOK_PREVIEW__\"in global?global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find(render=>render.phase===\"playing\"||render.phase===\"rendering\");if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(deprecated)console.warn(error);else throw error}}let channel=addons.getChannel(),id=generateId(),minDepth=5,serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:minDepth+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit);};return handler.isAction=!0,handler}var actions=(...args)=>{let options=config,names=args;names.length===1&&Array.isArray(names[0])&&([names]=names),names.length!==1&&typeof names[names.length-1]!=\"string\"&&(options={...config,...names.pop()});let namesObject=names[0];(names.length!==1||typeof namesObject==\"string\")&&(namesObject={},names.forEach(name=>{namesObject[name]=name;}));let actionsObject={};return Object.keys(namesObject).forEach(name=>{actionsObject[name]=action(namesObject[name],options);}),actionsObject};\n\nexport { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY, action, actions, config, configureActions };\n","export { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY, action, actions, config, configureActions } from './chunk-WFFRPTHA.mjs';\n","import __chrome_styles_loader__fxviewsearchtextboxStyles from \"browser/components/firefoxview/fxview-search-textbox.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\nconst SEARCH_DEBOUNCE_RATE_MS = 500;\n\n/**\n * A search box that displays a search icon and is clearable. Updates to the\n * search query trigger a `fxview-search-textbox-query` event with the current\n * query value.\n *\n * There is no actual searching done here. That needs to be implemented by the\n * `fxview-search-textbox-query` event handler. `searchTabList()` from\n * `search-helpers.mjs` can be used as a starting point.\n *\n * @property {string} placeholder\n *   The placeholder text for the search box.\n * @property {number} size\n *   The width (number of characters) of the search box.\n * @property {string} pageName\n *   The hash for the page name that the search input is located on.\n */\nexport default class FxviewSearchTextbox extends MozLitElement {\n  static properties = {\n    placeholder: { type: String },\n    size: { type: Number },\n    pageName: { type: String },\n  };\n\n  static queries = {\n    clearButton: \".clear-icon\",\n    input: \"input\",\n  };\n\n  #query = \"\";\n  #searchTimer;\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearTimeout(this.#searchTimer);\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  blur() {\n    this.input.blur();\n  }\n\n  onInput(event) {\n    this.#query = event.target.value.trim();\n    event.preventDefault();\n    this.onSearch();\n  }\n\n  /**\n   * Handler for query updates from keyboard input, and textbox clears from 'X'\n   * button.\n   */\n  onSearch() {\n    clearTimeout(this.#searchTimer);\n    this.#searchTimer = setTimeout(\n      () => this.#dispatchQueryEvent(),\n      SEARCH_DEBOUNCE_RATE_MS\n    );\n    this.requestUpdate();\n  }\n\n  clear(event) {\n    if (\n      event.type == \"click\" ||\n      (event.type == \"keydown\" && event.code == \"Enter\") ||\n      (event.type == \"keydown\" && event.code == \"Space\")\n    ) {\n      this.#query = \"\";\n      event.preventDefault();\n      this.onSearch();\n    }\n  }\n\n  #dispatchQueryEvent() {\n    window.scrollTo(0, 0);\n    this.dispatchEvent(\n      new CustomEvent(\"fxview-search-textbox-query\", {\n        bubbles: true,\n        composed: true,\n        detail: { query: this.#query },\n      })\n    );\n    if (!window.IS_STORYBOOK) {\n      Services.telemetry.recordEvent(\n        \"firefoxview_next\",\n        \"search_initiated\",\n        \"search\",\n        null,\n        {\n          page: this.pageName,\n        }\n      );\n    }\n  }\n\n  render() {\n    return html`\n    <link rel=\"stylesheet\" href=\"${__chrome_styles_loader__fxviewsearchtextboxStyles}\" />\n    <div class=\"search-container\">\n      <div class=\"search-icon\"></div>\n      <input\n        type=\"search\"\n        .placeholder=${ifDefined(this.placeholder)}\n        .size=${ifDefined(this.size)}\n        .value=${this.#query}\n        @input=${this.onInput}\n      ></input>\n      <div\n        class=\"clear-icon\"\n        role=\"button\"\n        tabindex=\"0\"\n        ?hidden=${!this.#query}\n        @click=${this.clear}\n        @keydown=${this.clear}\n        data-l10n-id=\"firefoxview-search-text-box-clear-button\"\n      ></div>\n    </div>`;\n  }\n}\n\ncustomElements.define(\"fxview-search-textbox\", FxviewSearchTextbox);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { action } from \"@storybook/addon-actions\";\n\nimport { html, ifDefined } from \"lit.all.mjs\";\nimport \"browser/components/firefoxview/fxview-search-textbox.mjs\";\n\nexport default {\n  title: \"Domain-specific UI Widgets/Firefox View/Search Textbox\",\n  component: \"fxview-search-textbox\",\n  argTypes: {\n    size: {\n      control: { type: \"number\", min: 1, step: 1 },\n    },\n  },\n};\n\nconst Template = ({ placeholder, size }) => html`\n  <style>\n    fxview-search-textbox {\n      --fxview-border: var(--in-content-border-color);\n      --fxview-text-primary-color: var(--in-content-page-color);\n      --fxview-element-background-hover: var(\n        --in-content-button-background-hover\n      );\n      --fxview-text-color-hover: var(--in-content-button-text-color-hover);\n    }\n  </style>\n  <fxview-search-textbox\n    placeholder=${ifDefined(placeholder)}\n    size=${ifDefined(size)}\n    @fxview-search-textbox-query=${action(\"fxview-search-textbox-query\")}\n  ></fxview-search-textbox>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  placeholder: \"\",\n};\n\nexport const SearchBoxWithPlaceholder = Template.bind({});\nSearchBoxWithPlaceholder.args = {\n  ...Default.args,\n  placeholder: \"Search\",\n};\n\nexport const SearchBoxWithCustomSize = Template.bind({});\nSearchBoxWithCustomSize.args = {\n  ...Default.args,\n  size: 32,\n};\n"],"names":[],"sourceRoot":""}