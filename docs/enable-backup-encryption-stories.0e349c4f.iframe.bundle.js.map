{"version":3,"file":"enable-backup-encryption-stories.0e349c4f.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACvOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://browser-storybook/../backup/content/enable-backup-encryption.mjs","webpack://browser-storybook/../backup/content/enable-backup-encryption.stories.mjs","webpack://browser-storybook/../../../toolkit/content/widgets/moz-card/moz-card.mjs"],"sourcesContent":["import __chrome_styles_loader__enablebackupencryptionStyles from \"browser/components/backup/content/enable-backup-encryption.css\";\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { html, ifDefined } from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Valid attributes for the enable-backup-encryption dialog type.\n *\n * @see EnableBackupEncryption.type\n */\nconst VALID_TYPES = Object.freeze({\n  SET_PASSWORD: \"set-password\",\n  CHANGE_PASSWORD: \"change-password\",\n});\n\nconst VALID_L10N_IDS = new Map([\n  [VALID_TYPES.SET_PASSWORD, \"enable-backup-encryption-header\"],\n  [VALID_TYPES.CHANGE_PASSWORD, \"change-backup-encryption-header\"],\n]);\n\n/**\n * The widget for enabling password protection if the backup is not yet\n * encrypted.\n */\nexport default class EnableBackupEncryption extends MozLitElement {\n  static properties = {\n    passwordsMatch: { type: Boolean, reflect: true },\n    passwordsRequired: { type: Boolean, reflect: true },\n    /**\n     * The \"type\" attribute changes the layout.\n     *\n     * @see VALID_TYPES\n     */\n    type: { type: String, reflect: true },\n  };\n\n  static get queries() {\n    return {\n      cancelButtonEl: \"#backup-enable-encryption-cancel-button\",\n      confirmButtonEl: \"#backup-enable-encryption-confirm-button\",\n      inputNewPasswordEl: \"#new-password-input\",\n      inputRepeatPasswordEl: \"#repeat-password-input\",\n      textDescriptionEl: \"#backup-enable-encryption-description\",\n    };\n  }\n\n  constructor() {\n    super();\n    this.passwordsMatch = false;\n    this.passwordsRequired = true;\n    this.type = VALID_TYPES.SET_PASSWORD;\n  }\n\n  /**\n   * Dispatches the BackupUI:InitWidget custom event upon being attached to the\n   * DOM, which registers with BackupUIChild for BackupService state updates.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"BackupUI:InitWidget\", { bubbles: true })\n    );\n  }\n\n  handleCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"dialogCancel\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n    this.resetChanges();\n  }\n\n  handleConfirm() {\n    switch (this.type) {\n      case VALID_TYPES.SET_PASSWORD:\n        this.dispatchEvent(\n          new CustomEvent(\"enableEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              password: this.inputNewPasswordEl.value,\n            },\n          })\n        );\n        break;\n      case VALID_TYPES.CHANGE_PASSWORD:\n        this.dispatchEvent(\n          new CustomEvent(\"rerunEncryption\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n              password: this.inputNewPasswordEl.value,\n            },\n          })\n        );\n        break;\n    }\n    this.resetChanges();\n  }\n\n  handleChangeNewPassword() {\n    this.updatePasswordValidity();\n  }\n\n  handleChangeRepeatPassword() {\n    this.updatePasswordValidity();\n  }\n\n  updatePasswordValidity() {\n    // If the \"required\" attribute was previously removed, add it back\n    // to make password validation work as expected.\n    if (!this.passwordsRequired) {\n      this.passwordsRequired = true;\n    }\n\n    let isNewPasswordInputValid = this.inputNewPasswordEl?.checkValidity();\n    let isRepeatPasswordInputValid =\n      this.inputRepeatPasswordEl?.checkValidity();\n    /**\n     * TODO: Before confirmation, verify FxA format rules (bug 1896772).\n     * This step may involve async validation with BackupService. For instance, we have to\n     * check against a list of common passwords (bug 1905140) and display a message if an\n     * issue occurs (bug 1905145).\n     */\n    this.passwordsMatch =\n      isNewPasswordInputValid &&\n      isRepeatPasswordInputValid &&\n      this.inputNewPasswordEl.value == this.inputRepeatPasswordEl.value;\n  }\n\n  resetChanges() {\n    this.passwordsMatch = false;\n    this.inputNewPasswordEl.value = \"\";\n    this.inputRepeatPasswordEl.value = \"\";\n    // Temporarily remove \"required\" attribute to remove styles for invalid inputs.\n    // The attribute will be added again when we run validation.\n    this.passwordsRequired = false;\n  }\n\n  contentTemplate() {\n    return html`\n      <form\n        id=\"backup-enable-encryption-wrapper\"\n        aria-labelledby=\"backup-enable-encryption-header\"\n        aria-describedby=\"backup-enable-encryption-description\"\n      >\n        <h1\n          id=\"backup-enable-encryption-header\"\n          class=\"heading-medium\"\n          data-l10n-id=${ifDefined(VALID_L10N_IDS.get(this.type))}\n        ></h1>\n        <main id=\"backup-enable-encryption-content\">\n          ${this.type === VALID_TYPES.SET_PASSWORD\n            ? html` <div id=\"backup-enable-encryption-description\">\n                <span\n                  id=\"backup-enable-encryption-description-span\"\n                  data-l10n-id=\"enable-backup-encryption-description\"\n                >\n                  <!--TODO: finalize support page links (bug 1900467)-->\n                </span>\n                <a\n                  id=\"backup-enable-encryption-learn-more-link\"\n                  is=\"moz-support-link\"\n                  support-page=\"todo-backup\"\n                  data-l10n-id=\"enable-backup-encryption-support-link\"\n                ></a>\n              </div>`\n            : null}\n\n          <fieldset id=\"passwords\">\n            <label id=\"new-password-label\" for=\"new-password-input\">\n              <span\n                id=\"new-password-span\"\n                data-l10n-id=\"enable-backup-encryption-create-password-label\"\n              ></span>\n              <input\n                type=\"password\"\n                id=\"new-password-input\"\n                ?required=${this.passwordsRequired}\n                @input=${this.handleChangeNewPassword}\n              />\n            </label>\n            <label id=\"repeat-password-label\" for=\"repeat-password-input\">\n              <span\n                id=\"repeat-password-span\"\n                data-l10n-id=\"enable-backup-encryption-repeat-password-label\"\n              ></span>\n              <input\n                type=\"password\"\n                id=\"repeat-password-input\"\n                ?required=${this.passwordsRequired}\n                @input=${this.handleChangeRepeatPassword}\n              />\n            </label>\n          </fieldset>\n        </main>\n\n        <moz-button-group id=\"backup-enable-encryption-button-group\">\n          <moz-button\n            id=\"backup-enable-encryption-cancel-button\"\n            @click=${this.handleCancel}\n            data-l10n-id=\"enable-backup-encryption-cancel-button\"\n          ></moz-button>\n          <moz-button\n            id=\"backup-enable-encryption-confirm-button\"\n            @click=${this.handleConfirm}\n            type=\"primary\"\n            data-l10n-id=\"enable-backup-encryption-confirm-button\"\n            ?disabled=${!this.passwordsMatch}\n          ></moz-button>\n        </moz-button-group>\n      </form>\n    `;\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__enablebackupencryptionStyles}\"\n      />\n      ${this.contentTemplate()}\n    `;\n  }\n}\n\ncustomElements.define(\"enable-backup-encryption\", EnableBackupEncryption);\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// eslint-disable-next-line import/no-unresolved\nimport { html } from \"lit.all.mjs\";\nimport \"chrome://global/content/elements/moz-card.mjs\";\nimport \"./enable-backup-encryption.mjs\";\n\nwindow.MozXULElement.insertFTLIfNeeded(\"locales-preview/backupSettings.ftl\");\nwindow.MozXULElement.insertFTLIfNeeded(\"branding/brand.ftl\");\n\nexport default {\n  title: \"Domain-specific UI Widgets/Backup/Enable Encryption\",\n  component: \"enable-backup-encryption\",\n  argTypes: {\n    type: {\n      control: { type: \"select\" },\n      options: [\"set-password\", \"change-password\"],\n    },\n  },\n};\n\nconst Template = ({ type }) => html`\n  <moz-card style=\"width: 23.94rem;\">\n    <enable-backup-encryption type=${type}></enable-backup-encryption>\n  </moz-card>\n`;\n\nexport const SetPassword = Template.bind({});\nSetPassword.args = {\n  type: \"set-password\",\n};\n\nexport const ChangePassword = Template.bind({});\nChangePassword.args = {\n  type: \"change-password\",\n};\n","import __chrome_styles_loader__mozcardStyles from \"toolkit/content/widgets/moz-card/moz-card.css\";\n/* -*- indent-tabs-mode: nil; js-indent-level: 2 -*-\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  html,\n  ifDefined,\n  when,\n} from \"chrome://global/content/vendor/lit.all.mjs\";\nimport { MozLitElement } from \"chrome://global/content/lit-utils.mjs\";\n\n/**\n * Cards contain content and actions about a single subject.\n * There are two card types:\n * The default type where no type attribute is required and the card\n * will have no extra functionality.\n *\n * The \"accordion\" type will initially not show any content. The card\n * will contain an arrow to expand the card so that all of the content\n * is visible.\n *\n *\n * @property {string} heading - The heading text that will be used for the card.\n * @property {string} icon - (optional) A flag to indicate the header should include an icon\n * @property {string} type - (optional) The type of card. No type specified\n *   will be the default card. The other available type is \"accordion\"\n * @slot content - The content to show inside of the card.\n */\nexport default class MozCard extends MozLitElement {\n  static queries = {\n    detailsEl: \"#moz-card-details\",\n    headingEl: \"#heading\",\n    contentSlotEl: \"#content\",\n  };\n\n  static properties = {\n    heading: { type: String },\n    icon: { type: Boolean },\n    type: { type: String, reflect: true },\n    expanded: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.expanded = false;\n    this.type = \"default\";\n  }\n\n  headingTemplate() {\n    if (!this.heading) {\n      return \"\";\n    }\n    return html`\n      <div id=\"heading-wrapper\">\n        ${when(\n          this.type == \"accordion\",\n          () => html`<div class=\"chevron-icon\"></div>`\n        )}\n        ${when(\n          this.icon,\n          () =>\n            html`<div part=\"icon\" id=\"heading-icon\" role=\"presentation\"></div>`\n        )}\n        <span id=\"heading\">${this.heading}</span>\n      </div>\n    `;\n  }\n\n  cardTemplate() {\n    if (this.type === \"accordion\") {\n      return html`\n        <details id=\"moz-card-details\" @toggle=\"${this.onToggle}\">\n          <summary>${this.headingTemplate()}</summary>\n          <div id=\"content\"><slot></slot></div>\n        </details>\n      `;\n    }\n\n    return html`\n      ${this.headingTemplate()}\n      <div id=\"content\" aria-describedby=\"content\">\n        <slot></slot>\n      </div>\n    `;\n  }\n  /**\n   * Handles the click event on the chevron icon.\n   *\n   * Without this, the click event would be passed to\n   * toggleDetails which would force the details element\n   * to stay open.\n   *\n   * @memberof MozCard\n   */\n  onDetailsClick() {\n    this.toggleDetails();\n  }\n\n  /**\n   * @param {boolean} force - Used to force open or force close the\n   * details element.\n   * @memberof MozCard\n   */\n  toggleDetails(force) {\n    this.detailsEl.open = force ?? !this.detailsEl.open;\n  }\n\n  onToggle() {\n    this.dispatchEvent(\n      new ToggleEvent(\"toggle\", {\n        newState: this.detailsEl.open ? \"open\" : \"closed\",\n        oldState: this.detailsEl.open ? \"closed\" : \"open\",\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"${__chrome_styles_loader__mozcardStyles}\"\n      />\n      <article\n        class=\"moz-card\"\n        aria-labelledby=${ifDefined(this.heading ? \"heading\" : undefined)}\n      >\n        ${this.cardTemplate()}\n      </article>\n    `;\n  }\n}\ncustomElements.define(\"moz-card\", MozCard);\n"],"names":[],"sourceRoot":""}